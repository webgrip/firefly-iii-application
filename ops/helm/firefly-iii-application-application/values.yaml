# firefly-iii-application Helm Chart Values
# This file contains ALL configurable values from the upstream charts.
# Values marked with "# REQUIRED" must be configured by the operator.

# =============================================================================
# Global Configuration
# =============================================================================
global:
  # -- Global Docker image registry (overrides individual image registries)
  imageRegistry: ""
  # -- Global Docker registry secret names as an array
  imagePullSecrets: []
  # -- Global default StorageClass for Persistent Volume(s)
  defaultStorageClass: ""
  # -- Set additional global labels. Helm templates can be used.
  labels: {}
  # -- Set additional global annotations. Helm templates can be used.
  annotations: {}
  # -- Propagate global metadata to Pod labels.
  propagateGlobalMetadataToPods: false

# =============================================================================
# Application Configuration (bjw-s/app-template)
# =============================================================================
application:
  # -- Enable the application deployment
  enabled: true

  # -- Set the strategy for the default pod options
  defaultPodOptionsStrategy: overwrite

  # -- Set default options for all controllers / pods here
  defaultPodOptions:
    # -- Defines affinity constraint rules. Helm templates can be used.
    affinity: {}
    # -- Set annotations on the Pod
    annotations: {}
    # -- Specifies whether a service account token should be automatically mounted
    automountServiceAccountToken: true
    # -- Configuring the ndots option may resolve nslookup issues on some Kubernetes setups
    dnsConfig: {}
    # -- Defaults to "ClusterFirst" if hostNetwork is false and "ClusterFirstWithHostNet" if hostNetwork is true
    dnsPolicy: ""
    # -- Enable/disable the generation of environment variables for services
    enableServiceLinks: false
    # -- Allows specifying explicit hostname setting
    hostname: ""
    # -- Use hostAliases to add custom entries to /etc/hosts
    hostAliases: []
    # -- Use the host's ipc namespace
    hostIPC: false
    # -- When using hostNetwork make sure you set dnsPolicy to `ClusterFirstWithHostNet`
    hostNetwork: false
    # -- Use the host's pid namespace
    hostPID: false
    # -- Use the host's user namespace (requires 1.29 or newer)
    hostUsers: null
    # -- Set image pull secrets
    imagePullSecrets: []
    # -- Set labels on the Pod
    labels: {}
    # -- Node selection constraint
    nodeSelector: {}
    # -- Custom priority class for different treatment by the scheduler
    priorityClassName: ""
    # -- Set Container restart policy
    restartPolicy: ""
    # -- Allow specifying a runtimeClassName other than the default one
    runtimeClassName: ""
    # -- Allows specifying a custom scheduler name
    schedulerName: ""
    # -- Configure the Security Context for the Pod
    securityContext:
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault
      fsGroup: 1500
      fsGroupChangePolicy: OnRootMismatch
    # -- Allows sharing process namespace between containers in a Pod
    shareProcessNamespace: null
    # -- Duration in seconds the pod needs to terminate gracefully
    terminationGracePeriodSeconds: null
    # -- Specify taint tolerations
    tolerations: []
    # -- Defines topologySpreadConstraint rules
    topologySpreadConstraints: []

  # -- Configure Controllers
  controllers:
    main:
      # -- Controller type (deployment, daemonset, statefulset, cronjob, job)
      type: deployment
      # -- Controller annotations
      annotations: {}
      # -- Controller labels
      labels: {}
      # -- Number of replicas (only for deployment/statefulset)
      replicas: 1
      # -- Deployment/StatefulSet strategy
      strategy: RollingUpdate
      # -- Deployment strategy options
      rollingUpdate:
        maxUnavailable: 25%
        maxSurge: 25%
      # -- Number of revisions to retain
      revisionHistoryLimit: 3

      # -- Pod configuration
      pod:
        # -- Pod annotations
        annotations: {}
        # -- Pod labels
        labels: {}
        # -- Pod security context (overrides defaultPodOptions.securityContext)
        securityContext:
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
          fsGroup: 1500
          fsGroupChangePolicy: OnRootMismatch

      # -- Container configuration
      containers:
        app:
          # -- Container image configuration
          image:
            repository: webgrip/firefly-iii-application  # REQUIRED: Set org repository
            tag: "latest"  # CI/ops will pin this elsewhere
            pullPolicy: Always
          # -- Container security context
          securityContext:
            runAsUser: 1500
            runAsGroup: 1500
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
            capabilities:
              drop:
                - ALL
          # -- Container command override
          command: []
          # -- Container args override
          args: []
          # -- Environment variables
          env:
            # App Configuration
            - name: APP_NAME
              value: "firefly-iii-application"
            - name: APP_ENV
              value: "production"
            - name: APP_DEBUG
              value: "false"
            - name: APP_URL
              value: "https://firefly-iii-application.example.com"  # REQUIRED
            - name: APP_LOCALE
              value: "en"
            - name: APP_FALLBACK_LOCALE
              value: "en"
            - name: APP_TIMEZONE
              value: "UTC"  # REQUIRED
            - name: APP_KEY
              valueFrom:
                secretKeyRef:
                  name: firefly-iii-application-application-secrets
                  key: app-key
            # Database Configuration  
            - name: DB_CONNECTION
              value: "mysql"
            - name: DB_HOST
              value: "firefly-iii-application-application-mariadb"
            - name: DB_PORT
              value: "3306"
            - name: DB_DATABASE
              value: "firefly-iii-application"
            - name: DB_USERNAME
              value: "firefly-iii-application"
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: firefly-iii-application-application-secrets
                  key: mariadb-password
            # Redis Configuration
            - name: REDIS_HOST
              value: "firefly-iii-application-application-redis-master"
            - name: REDIS_PORT
              value: "6379"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: firefly-iii-application-application-secrets
                  key: redis-password
            # Cache and Session Configuration
            - name: CACHE_DRIVER
              value: "redis"
            - name: SESSION_DRIVER
              value: "redis"
            - name: QUEUE_CONNECTION
              value: "redis"
            # Security Configuration
            - name: API_SECRET
              valueFrom:
                secretKeyRef:
                  name: firefly-iii-application-application-secrets
                  key: api-secret
          # -- Environment variables from ConfigMaps/Secrets
          envFrom: []
          # -- Container lifecycle hooks
          lifecycle: {}
          # -- Container resource limits and requests
          resources:
            requests:
              cpu: "250m"
              memory: "512Mi"
            limits:
              cpu: "1000m"
              memory: "1Gi"
          # -- Container probes
          probes:
            liveness:
              enabled: true
              custom: false
              spec:
                httpGet:
                  path: /health
                  port: http
                initialDelaySeconds: 30
                periodSeconds: 10
                timeoutSeconds: 5
                failureThreshold: 6
                successThreshold: 1
            readiness:
              enabled: true
              custom: false
              spec:
                httpGet:
                  path: /health
                  port: http
                initialDelaySeconds: 5
                periodSeconds: 10
                timeoutSeconds: 5
                failureThreshold: 3
                successThreshold: 1
            startup:
              enabled: false
              custom: false
              spec:
                httpGet:
                  path: /health
                  port: http
                initialDelaySeconds: 0
                periodSeconds: 5
                timeoutSeconds: 5
                failureThreshold: 30
                successThreshold: 1

  # -- Service configuration
  service:
    main:
      # -- Enable the service
      enabled: true
      # -- Service type
      type: ClusterIP
      # -- Service annotations
      annotations: {}
      # -- Service labels
      labels: {}
      # -- Primary service (used by ingress)
      primary: true
      # -- Controller name that the service targets
      controller: main
      # -- Service ports configuration
      ports:
        http:
          enabled: true
          primary: true
          port: 80
          protocol: HTTP
          targetPort: http

  # -- Ingress configuration
  ingress:
    main:
      # -- Enable ingress
      enabled: true
      # -- Ingress class name
      className: ""  # REQUIRED: Set ingress class (e.g., nginx, traefik)
      # -- Ingress annotations
      annotations:
        # cert-manager.io/cluster-issuer: letsencrypt-prod  # REQUIRED: Set cert-manager issuer
      # -- Ingress labels
      labels: {}
      # -- Ingress hosts configuration
      hosts:
        - host: "firefly-iii-application.example.com"  # REQUIRED: Set your FQDN
          paths:
            - path: /
              pathType: Prefix
              service:
                identifier: main
                port: http
      # -- Ingress TLS configuration
      tls:
        - secretName: firefly-iii-application-tls
          hosts:
            - "firefly-iii-application.example.com"  # REQUIRED: Match your FQDN

  # -- Persistent storage configuration
  persistence:
    data:
      # -- Enable persistent storage
      enabled: true
      # -- Storage type (persistentVolumeClaim, emptyDir, hostPath, nfs, configMap, secret)
      type: persistentVolumeClaim
      # -- Access mode
      accessMode: ReadWriteOnce
      # -- Storage size
      size: 8Gi
      # -- Storage class
      storageClass: ""  # REQUIRED: Set your storage class
      # -- Advanced mount options
      advancedMounts:
        main:
          app:
            - path: /data
              readOnly: false

  # -- ConfigMap configuration
  configMaps:
    config:
      # -- Enable ConfigMap
      enabled: false
      # -- ConfigMap annotations
      annotations: {}
      # -- ConfigMap labels  
      labels: {}
      # -- ConfigMap data
      data: {}

# =============================================================================
# Redis Configuration (Bitnami)
# =============================================================================
redis:
  # -- Enable Redis
  enabled: true
  
  # -- Global configuration
  global:
    imageRegistry: ""
    imagePullSecrets: []
    defaultStorageClass: ""
    storageClass: ""
    redis:
      password: ""
  
  # -- Kubernetes version override
  kubeVersion: ""
  # -- String to partially override common.names.fullname
  nameOverride: ""
  # -- String to fully override common.names.fullname
  fullnameOverride: ""
  # -- Default Kubernetes cluster domain
  clusterDomain: cluster.local
  # -- Common labels to add to all Redis resources
  commonLabels: {}
  # -- Common annotations to add to all Redis resources
  commonAnnotations: {}
  # -- Extra objects to deploy (evaluated as a template)
  extraDeploy: []
  # -- Enable diagnostic mode in the deployment
  diagnosticMode:
    enabled: false
    command:
      - sleep
    args:
      - infinity

  # -- Redis image configuration
  image:
    registry: docker.io
    repository: bitnami/redis
    tag: 8.2.1-debian-12-r0
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
    debug: false

  # -- Redis architecture (standalone or replication)
  architecture: standalone

  # -- Authentication configuration
  auth:
    enabled: true
    sentinel: true
    password: ""  # Will be set via existingSecret
    existingSecret: "firefly-iii-application-application-secrets"
    existingSecretPasswordKey: "redis-password"
    usernames: []
    usePasswordFiles: false

  # -- Redis master configuration
  master:
    count: 1
    configuration: ""
    disableCommands:
      - FLUSHDB
      - FLUSHALL
    command: []
    args: []
    enableServiceLinks: true
    preExecCmds: []
    extraFlags: []
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    containerPorts:
      redis: 6379
    startupProbe:
      enabled: true
      initialDelaySeconds: 20
      periodSeconds: 5
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 5
    livenessProbe:
      enabled: true
      initialDelaySeconds: 20
      periodSeconds: 5
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 5
    readinessProbe:
      enabled: true
      initialDelaySeconds: 20
      periodSeconds: 5
      timeoutSeconds: 1
      successThreshold: 1
      failureThreshold: 5
    resources:
      requests:
        cpu: "50m"
        memory: "128Mi"
      limits:
        cpu: "150m"
        memory: "256Mi"
    podSecurityContext:
      enabled: true
      fsGroup: 1001
      fsGroupChangePolicy: Always
      supplementalGroups: []
      sysctls: []
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
      runAsGroup: 1001
      runAsNonRoot: true
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      seccompProfile:
        type: RuntimeDefault
      capabilities:
        drop:
          - ALL
    kind: Deployment
    schedulerName: ""
    updateStrategy:
      type: RollingUpdate
    priorityClassName: ""
    hostAliases: []
    podLabels: {}
    podAnnotations: {}
    shareProcessNamespace: false
    podAffinityPreset: ""
    podAntiAffinityPreset: soft
    nodeAffinityPreset:
      type: ""
      key: ""
      values: []
    affinity: {}
    nodeSelector: {}
    tolerations: []
    topologySpreadConstraints: []
    dnsPolicy: ""
    dnsConfig: {}
    lifecycleHooks: {}
    extraVolumes: []
    extraVolumeMounts: []
    sidecars: []
    initContainers: []
    persistence:
      enabled: true
      medium: ""
      sizeLimit: ""
      path: /bitnami/redis/data
      storageClass: ""  # Uses global.defaultStorageClass
      accessModes:
        - ReadWriteOnce
      size: 8Gi
      annotations: {}
      labels: {}
      selector: {}
      dataSource: {}
      existingClaim: ""
    persistentVolumeClaimRetentionPolicy:
      enabled: false
      whenScaled: Retain
      whenDeleted: Retain
    service:
      type: ClusterIP
      ports:
        redis: 6379
      nodePorts:
        redis: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      internalTrafficPolicy: Cluster
      clusterIP: ""
      loadBalancerIP: ""
      loadBalancerClass: ""
      loadBalancerSourceRanges: []
      annotations: {}
      sessionAffinity: None
      sessionAffinityConfig: {}
    terminationGracePeriodSeconds: 30
    serviceAccount:
      create: true
      name: ""
      automountServiceAccountToken: false
      annotations: {}

# =============================================================================
# MariaDB Configuration (Bitnami)
# =============================================================================
mariadb:
  # -- Enable MariaDB
  enabled: true

  # -- Global configuration
  global:
    imageRegistry: ""
    imagePullSecrets: []
    defaultStorageClass: ""

  # -- Kubernetes version override
  kubeVersion: ""
  # -- String to partially override mariadb.fullname
  nameOverride: ""
  # -- String to fully override mariadb.fullname
  fullnameOverride: ""
  # -- Default Kubernetes cluster domain
  clusterDomain: cluster.local
  # -- Common labels to add to all MariaDB resources
  commonLabels: {}
  # -- Common annotations to add to all MariaDB resources
  commonAnnotations: {}
  # -- Extra objects to deploy (evaluated as a template)
  extraDeploy: []
  # -- Enable diagnostic mode in the deployment
  diagnosticMode:
    enabled: false
    command:
      - sleep
    args:
      - infinity

  # -- MariaDB image configuration
  image:
    registry: docker.io
    repository: bitnami/mariadb
    tag: 12.0.2-debian-12-r0
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
    debug: false

  # -- MariaDB architecture (standalone or replication)
  architecture: standalone

  # -- Authentication configuration
  auth:
    rootPassword: ""
    database: "firefly-iii-application"
    username: "firefly-iii-application"
    password: ""
    replicationUser: replicator
    replicationPassword: ""
    existingSecret: "firefly-iii-application-application-secrets"
    forcePassword: false
    usePasswordFiles: false
    customPasswordFiles: {}

  # -- Primary configuration
  primary:
    command: []
    args: []
    hostAliases: []
    configuration: |-
      [mysqld]
      skip-name-resolve
      explicit_defaults_for_timestamp
      basedir=/opt/bitnami/mariadb
      datadir=/bitnami/mariadb/data
      plugin_dir=/opt/bitnami/mariadb/plugin
      port=3306
      socket=/opt/bitnami/mariadb/tmp/mysql.sock
      tmpdir=/opt/bitnami/mariadb/tmp
      max_allowed_packet=16M
      bind-address=*
      pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid
      log-error=/opt/bitnami/mariadb/logs/mysqld.log
      character-set-server=UTF8
      collation-server=utf8_general_ci
      slow_query_log=0
      long_query_time=10.0
      
      [client]
      port=3306
      socket=/opt/bitnami/mariadb/tmp/mysql.sock
      default-character-set=UTF8
      plugin_dir=/opt/bitnami/mariadb/plugin
      
      [manager]
      port=3306
      socket=/opt/bitnami/mariadb/tmp/mysql.sock
      pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid
    existingConfigmap: ""
    updateStrategy:
      type: RollingUpdate
    rollingUpdatePartition: ""
    podManagementPolicy: ""
    podLabels: {}
    podAnnotations: {}
    podAffinityPreset: ""
    podAntiAffinityPreset: soft
    nodeAffinityPreset:
      type: ""
      key: ""
      values: []
    affinity: {}
    nodeSelector: {}
    tolerations: []
    topologySpreadConstraints: []
    priorityClassName: ""
    schedulerName: ""
    podSecurityContext:
      enabled: true
      fsGroup: 1001
      fsGroupChangePolicy: Always
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
      runAsGroup: 1001
      runAsNonRoot: true
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      seccompProfile:
        type: RuntimeDefault
      capabilities:
        drop:
          - ALL
    resources:
      requests:
        cpu: "100m"
        memory: "256Mi"
      limits:
        cpu: "300m"
        memory: "512Mi"
    livenessProbe:
      enabled: true
      initialDelaySeconds: 120
      periodSeconds: 10
      timeoutSeconds: 1
      failureThreshold: 3
      successThreshold: 1
    readinessProbe:
      enabled: true
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 1
      failureThreshold: 3
      successThreshold: 1
    startupProbe:
      enabled: true
      initialDelaySeconds: 120
      periodSeconds: 15
      timeoutSeconds: 5
      failureThreshold: 10
      successThreshold: 1
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    extraFlags: ""
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraPorts: []
    lifecycleHooks: {}
    containerPorts:
      mysql: 3306
    persistence:
      enabled: true
      existingClaim: ""
      mountPath: /bitnami/mariadb
      subPath: ""
      storageClass: ""  # Uses global.defaultStorageClass
      annotations: {}
      labels: {}
      accessModes:
        - ReadWriteOnce
      size: 8Gi
      selector: {}
    persistentVolumeClaimRetentionPolicy:
      enabled: false
      whenScaled: Retain
      whenDeleted: Retain
    extraVolumes: []
    extraVolumeMounts: []
    initContainers: []
    sidecars: []
    service:
      type: ClusterIP
      ports:
        mysql: 3306
      nodePorts:
        mysql: ""
      clusterIP: ""
      loadBalancerIP: ""
      loadBalancerClass: ""
      loadBalancerSourceRanges: []
      extraPorts: []
      annotations: {}
      sessionAffinity: None
      sessionAffinityConfig: {}
    pdb:
      create: true
      minAvailable: ""
      maxUnavailable: ""

  # -- ServiceAccount configuration
  serviceAccount:
    create: true
    name: ""
    annotations: {}
    automountServiceAccountToken: false

  # -- RBAC configuration
  rbac:
    create: false

  # -- Init configuration
  initdbScripts: {}
  initdbScriptsConfigMap: ""

  # -- Metrics configuration
  metrics:
    enabled: false