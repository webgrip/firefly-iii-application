{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Placeholder for techdocs","title":"Home"},{"location":"home/","text":"Purpose: Entry point for deeper Firefly III documentation. Contents - Application - Domain (DDD) - Operations - Troubleshooting - Sources Application \u00b6 Comprehensive documentation about the Firefly III application, including configuration, lifecycle management, and integrations with databases, caches, and external services. Domain (DDD) \u00b6 Domain-Driven Design artifacts capturing Firefly III's business concepts, bounded contexts, aggregates, and domain events based on upstream terminology and architecture. Operations \u00b6 Production operations guidance including runbooks, networking configuration, observability setup, upgrade procedures, and troubleshooting guides. Sources \u00b6 \"Firefly III Documentation\" \u2014 https://docs.firefly-iii.org \u2014 retrieved 2025-01-09","title":"Home"},{"location":"home/#application","text":"Comprehensive documentation about the Firefly III application, including configuration, lifecycle management, and integrations with databases, caches, and external services.","title":"Application"},{"location":"home/#domain-ddd","text":"Domain-Driven Design artifacts capturing Firefly III's business concepts, bounded contexts, aggregates, and domain events based on upstream terminology and architecture.","title":"Domain (DDD)"},{"location":"home/#operations","text":"Production operations guidance including runbooks, networking configuration, observability setup, upgrade procedures, and troubleshooting guides.","title":"Operations"},{"location":"home/#sources","text":"\"Firefly III Documentation\" \u2014 https://docs.firefly-iii.org \u2014 retrieved 2025-01-09","title":"Sources"},{"location":"template-sync/","text":"Template File Synchronization \u00b6 This template repository includes an automated workflow to sync template files to application repositories based on GitHub topics. Overview \u00b6 The template sync workflow automatically keeps certain template files up-to-date across multiple application repositories in your organization. This eliminates the need to manually copy workflow files, configuration files, and documentation updates to each application repository. How It Works \u00b6 Topic-based targeting : Repositories are identified for sync based on GitHub topics Automated pull requests : Changes are proposed via pull requests, allowing for review Selective file sync : Only specific template files are synchronized Conflict-aware : Existing customizations are preserved through the PR review process Files That Are Synced \u00b6 The following files are automatically synchronized from the template to target repositories: Workflow Files \u00b6 .github/workflows/on_docs_change.yml - Documentation deployment workflow .github/workflows/on_source_change.yml - Source code build and deployment workflow .github/workflows/on_workflow_files_change.yml - Workflow file change handling Configuration Files \u00b6 .editorconfig - Editor configuration for consistent code formatting .gitignore - Git ignore patterns .releaserc.json - Semantic release configuration Development Tools \u00b6 .vscode/settings.json - VSCode workspace settings Setting Up Template Sync \u00b6 For Application Repositories \u00b6 To enable template sync for an application repository: Add the topic : Add the application topic to your repository Go to your repository settings In the \"Topics\" section, add application Save the changes Initial sync : The next time the template repository is updated, your repository will receive a pull request with the synced files For the Template Repository \u00b6 The sync workflow is automatically triggered when: - Template files are changed and pushed to the main branch - The workflow can also be manually triggered from the Actions tab Manual Sync \u00b6 You can manually trigger a sync from the template repository: Go to the Actions tab in the template repository Select the \"Sync Template Files to Application Repos\" workflow Click \"Run workflow\" Optionally specify: Topic : Custom topic to filter repositories (default: application ) Dry run : Preview what would be synced without making changes Customization and Conflicts \u00b6 Handling Conflicts \u00b6 \u26a0\ufe0f Important : Template files take precedence over local modifications. When template files are synced: 1. A new branch is created in the target repository (using semantic branch naming: feat/sync-template-files-YYYYMMDD-HHMMSS ) 2. Template files completely replace the existing files in the target repository 3. A pull request is created for review with detailed conflict information 4. Repository maintainers must review carefully to identify and restore any necessary customizations What happens with conflicts: - If you've modified .editorconfig in your application repository - And the template repository's .editorconfig is also updated - The template version will completely replace your local version - Your local changes will be visible in the PR diff, allowing you to restore them if needed Repository-Specific Customizations \u00b6 If you need to customize template files for specific repositories: Review the PR carefully : When a sync PR is created, examine the diff to see what local changes will be lost Preserve customizations : Either modify the PR to include your customizations or restore them after merging Document customizations : Consider documenting why certain customizations were made to make future reviews easier Consider alternatives : For significant customizations, consider whether the file should be excluded from future syncs Opting Out \u00b6 To stop receiving template sync updates: 1. Remove the application topic from your repository 2. Existing sync PRs can be closed without merging Workflow Configuration \u00b6 The sync workflow is defined in .github/workflows/sync-template-files.yml and includes: Automatic triggers : Runs when template files are modified Topic detection : Uses GitHub GraphQL API to find repositories with the specified topic Safe operations : Creates branches and PRs instead of direct pushes Error handling : Continues processing other repositories if one fails Troubleshooting \u00b6 No Repositories Found \u00b6 If the workflow reports \"No repositories found\": - Verify the application topic is added to target repositories - Check that repositories are in the same organization as the template - Ensure the GitHub token has sufficient permissions Sync Failures \u00b6 If sync fails for a specific repository: - Check the workflow logs for specific error messages - Verify the target repository allows PR creation - Ensure there are no branch protection rules blocking the sync branch creation Customizations Lost \u00b6 If repository-specific customizations are overwritten: - The lost changes should be visible in the PR diff for easy identification - Restore customizations by modifying the PR before merging or making follow-up commits - Consider documenting important customizations for future reference - For frequently customized files, consider whether they should remain in the sync list Example Use Cases \u00b6 Workflow Updates : When CI/CD workflows are improved in the template, all application repositories can receive the updates Security Updates : Security-related workflow changes can be quickly distributed Tooling Changes : Updates to development tools and configurations can be synchronized Documentation : Template documentation updates can be shared across projects Best Practices \u00b6 Review PRs carefully : Always review sync PRs to ensure compatibility with your application Test changes : Test workflow and configuration changes in a development environment Document customizations : Keep track of application-specific modifications Use semantic commits : The sync workflow follows conventional commit patterns Regular maintenance : Periodically review and update the list of synced files","title":"Template Sync"},{"location":"template-sync/#template-file-synchronization","text":"This template repository includes an automated workflow to sync template files to application repositories based on GitHub topics.","title":"Template File Synchronization"},{"location":"template-sync/#overview","text":"The template sync workflow automatically keeps certain template files up-to-date across multiple application repositories in your organization. This eliminates the need to manually copy workflow files, configuration files, and documentation updates to each application repository.","title":"Overview"},{"location":"template-sync/#how-it-works","text":"Topic-based targeting : Repositories are identified for sync based on GitHub topics Automated pull requests : Changes are proposed via pull requests, allowing for review Selective file sync : Only specific template files are synchronized Conflict-aware : Existing customizations are preserved through the PR review process","title":"How It Works"},{"location":"template-sync/#files-that-are-synced","text":"The following files are automatically synchronized from the template to target repositories:","title":"Files That Are Synced"},{"location":"template-sync/#workflow-files","text":".github/workflows/on_docs_change.yml - Documentation deployment workflow .github/workflows/on_source_change.yml - Source code build and deployment workflow .github/workflows/on_workflow_files_change.yml - Workflow file change handling","title":"Workflow Files"},{"location":"template-sync/#configuration-files","text":".editorconfig - Editor configuration for consistent code formatting .gitignore - Git ignore patterns .releaserc.json - Semantic release configuration","title":"Configuration Files"},{"location":"template-sync/#development-tools","text":".vscode/settings.json - VSCode workspace settings","title":"Development Tools"},{"location":"template-sync/#setting-up-template-sync","text":"","title":"Setting Up Template Sync"},{"location":"template-sync/#for-application-repositories","text":"To enable template sync for an application repository: Add the topic : Add the application topic to your repository Go to your repository settings In the \"Topics\" section, add application Save the changes Initial sync : The next time the template repository is updated, your repository will receive a pull request with the synced files","title":"For Application Repositories"},{"location":"template-sync/#for-the-template-repository","text":"The sync workflow is automatically triggered when: - Template files are changed and pushed to the main branch - The workflow can also be manually triggered from the Actions tab","title":"For the Template Repository"},{"location":"template-sync/#manual-sync","text":"You can manually trigger a sync from the template repository: Go to the Actions tab in the template repository Select the \"Sync Template Files to Application Repos\" workflow Click \"Run workflow\" Optionally specify: Topic : Custom topic to filter repositories (default: application ) Dry run : Preview what would be synced without making changes","title":"Manual Sync"},{"location":"template-sync/#customization-and-conflicts","text":"","title":"Customization and Conflicts"},{"location":"template-sync/#handling-conflicts","text":"\u26a0\ufe0f Important : Template files take precedence over local modifications. When template files are synced: 1. A new branch is created in the target repository (using semantic branch naming: feat/sync-template-files-YYYYMMDD-HHMMSS ) 2. Template files completely replace the existing files in the target repository 3. A pull request is created for review with detailed conflict information 4. Repository maintainers must review carefully to identify and restore any necessary customizations What happens with conflicts: - If you've modified .editorconfig in your application repository - And the template repository's .editorconfig is also updated - The template version will completely replace your local version - Your local changes will be visible in the PR diff, allowing you to restore them if needed","title":"Handling Conflicts"},{"location":"template-sync/#repository-specific-customizations","text":"If you need to customize template files for specific repositories: Review the PR carefully : When a sync PR is created, examine the diff to see what local changes will be lost Preserve customizations : Either modify the PR to include your customizations or restore them after merging Document customizations : Consider documenting why certain customizations were made to make future reviews easier Consider alternatives : For significant customizations, consider whether the file should be excluded from future syncs","title":"Repository-Specific Customizations"},{"location":"template-sync/#opting-out","text":"To stop receiving template sync updates: 1. Remove the application topic from your repository 2. Existing sync PRs can be closed without merging","title":"Opting Out"},{"location":"template-sync/#workflow-configuration","text":"The sync workflow is defined in .github/workflows/sync-template-files.yml and includes: Automatic triggers : Runs when template files are modified Topic detection : Uses GitHub GraphQL API to find repositories with the specified topic Safe operations : Creates branches and PRs instead of direct pushes Error handling : Continues processing other repositories if one fails","title":"Workflow Configuration"},{"location":"template-sync/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"template-sync/#no-repositories-found","text":"If the workflow reports \"No repositories found\": - Verify the application topic is added to target repositories - Check that repositories are in the same organization as the template - Ensure the GitHub token has sufficient permissions","title":"No Repositories Found"},{"location":"template-sync/#sync-failures","text":"If sync fails for a specific repository: - Check the workflow logs for specific error messages - Verify the target repository allows PR creation - Ensure there are no branch protection rules blocking the sync branch creation","title":"Sync Failures"},{"location":"template-sync/#customizations-lost","text":"If repository-specific customizations are overwritten: - The lost changes should be visible in the PR diff for easy identification - Restore customizations by modifying the PR before merging or making follow-up commits - Consider documenting important customizations for future reference - For frequently customized files, consider whether they should remain in the sync list","title":"Customizations Lost"},{"location":"template-sync/#example-use-cases","text":"Workflow Updates : When CI/CD workflows are improved in the template, all application repositories can receive the updates Security Updates : Security-related workflow changes can be quickly distributed Tooling Changes : Updates to development tools and configurations can be synchronized Documentation : Template documentation updates can be shared across projects","title":"Example Use Cases"},{"location":"template-sync/#best-practices","text":"Review PRs carefully : Always review sync PRs to ensure compatibility with your application Test changes : Test workflow and configuration changes in a development environment Document customizations : Keep track of application-specific modifications Use semantic commits : The sync workflow follows conventional commit patterns Regular maintenance : Periodically review and update the list of synced files","title":"Best Practices"},{"location":"app/lifecycle/","text":"Purpose: Make upgrade expectations explicit. Contents - Policy - Currently supported versions - Upgrade guidance - Sources Policy \u00b6 Firefly III follows a rolling release model with semantic versioning: Major versions (e.g., 6.x) introduce breaking changes or significant architecture updates Minor versions (e.g., 6.1.x) add new features while maintaining backward compatibility Patch versions (e.g., 6.1.1) fix bugs and security issues Support Policy: - Only the latest stable version receives active development and support - Critical security fixes may be backported to the previous major version - Users are encouraged to upgrade regularly to benefit from bug fixes and new features - Database migrations are provided for all version upgrades Currently supported versions \u00b6 Version Status PHP Requirement Database Support Notes 6.x Current Stable PHP 8.2+ MySQL 8.0+, MariaDB 10.9+, PostgreSQL 13+ Active development 5.x Legacy PHP 8.1+ MySQL 5.7+, PostgreSQL 10+ Security fixes only Upgrade guidance \u00b6 Before upgrading: 1. Create a full database backup 2. Test the upgrade in a staging environment 3. Review the changelog for breaking changes 4. Ensure PHP and database versions meet requirements Upgrade process: 1. Stop the Firefly III application 2. Update container images to the target version 3. Run database migrations (automatic on container startup) 4. Verify application functionality 5. Update any custom configurations if needed Rollback procedure: 1. Stop the application 2. Restore database from backup 3. Revert to previous container image version 4. Restart services Tag management in this repository: - Production deployments use specific version tags (e.g., 6.1.17 ) - Never use latest tag in production - Update tags through pull requests with proper testing Sources \u00b6 \"Firefly III Upgrade Guide\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/upgrade/ \u2014 retrieved 2025-01-09 \"Firefly III Installation Guide\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/ \u2014 retrieved 2025-01-09","title":"Lifecycle"},{"location":"app/lifecycle/#policy","text":"Firefly III follows a rolling release model with semantic versioning: Major versions (e.g., 6.x) introduce breaking changes or significant architecture updates Minor versions (e.g., 6.1.x) add new features while maintaining backward compatibility Patch versions (e.g., 6.1.1) fix bugs and security issues Support Policy: - Only the latest stable version receives active development and support - Critical security fixes may be backported to the previous major version - Users are encouraged to upgrade regularly to benefit from bug fixes and new features - Database migrations are provided for all version upgrades","title":"Policy"},{"location":"app/lifecycle/#currently-supported-versions","text":"Version Status PHP Requirement Database Support Notes 6.x Current Stable PHP 8.2+ MySQL 8.0+, MariaDB 10.9+, PostgreSQL 13+ Active development 5.x Legacy PHP 8.1+ MySQL 5.7+, PostgreSQL 10+ Security fixes only","title":"Currently supported versions"},{"location":"app/lifecycle/#upgrade-guidance","text":"Before upgrading: 1. Create a full database backup 2. Test the upgrade in a staging environment 3. Review the changelog for breaking changes 4. Ensure PHP and database versions meet requirements Upgrade process: 1. Stop the Firefly III application 2. Update container images to the target version 3. Run database migrations (automatic on container startup) 4. Verify application functionality 5. Update any custom configurations if needed Rollback procedure: 1. Stop the application 2. Restore database from backup 3. Revert to previous container image version 4. Restart services Tag management in this repository: - Production deployments use specific version tags (e.g., 6.1.17 ) - Never use latest tag in production - Update tags through pull requests with proper testing","title":"Upgrade guidance"},{"location":"app/lifecycle/#sources","text":"\"Firefly III Upgrade Guide\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/upgrade/ \u2014 retrieved 2025-01-09 \"Firefly III Installation Guide\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/ \u2014 retrieved 2025-01-09","title":"Sources"},{"location":"app/overview/","text":"Purpose: Summarize the Firefly III application and packaging approach. Contents - What is Firefly III? - Core features - Supported versions & lifecycle - Sources What is Firefly III? \u00b6 Firefly III is a free, open source, self-hosted personal finance manager. It can help you keep track of your expenses and income, so you can spend less and save more. Firefly III supports the use of budgets, categories and tags, and can import data from external sources. It's built with the Laravel framework in PHP and uses a MySQL or PostgreSQL database. This repository provides a complete containerized deployment of Firefly III with supporting services (MariaDB database, Redis cache, Nginx reverse proxy) using Docker Compose and Kubernetes manifests. Core features \u00b6 Transaction Management : Track and categorize income, expenses, and transfers Account Types : Support for asset accounts, expense accounts, revenue accounts, and liabilities Budgets & Categories : Organize spending with budgets and detailed categorization Bills & Recurring Transactions : Automated handling of recurring payments and income Data Import : Import from banks, CSV files, and other financial software Multi-Currency Support : Handle multiple currencies with automatic conversion Reports & Charts : Comprehensive financial reporting and visualization Rules Engine : Automatic transaction categorization and processing API Access : RESTful API for third-party integrations Data Export : Export financial data in various formats Supported versions & lifecycle \u00b6 Current Version : Firefly III follows semantic versioning with regular feature releases LTS Policy : No formal LTS policy; users should stay on latest stable release PHP Requirements : PHP 8.2+ required for current versions Database Support : MySQL 8.0+, MariaDB 10.9+, PostgreSQL 13+ Update Cadence : Feature releases every few months, patch releases as needed Sources \u00b6 \"Firefly III Documentation Home\" \u2014 https://docs.firefly-iii.org \u2014 retrieved 2025-01-09 \"Firefly III About Page\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/about/ \u2014 retrieved 2025-01-09","title":"Overview"},{"location":"app/overview/#what-is-firefly-iii","text":"Firefly III is a free, open source, self-hosted personal finance manager. It can help you keep track of your expenses and income, so you can spend less and save more. Firefly III supports the use of budgets, categories and tags, and can import data from external sources. It's built with the Laravel framework in PHP and uses a MySQL or PostgreSQL database. This repository provides a complete containerized deployment of Firefly III with supporting services (MariaDB database, Redis cache, Nginx reverse proxy) using Docker Compose and Kubernetes manifests.","title":"What is Firefly III?"},{"location":"app/overview/#core-features","text":"Transaction Management : Track and categorize income, expenses, and transfers Account Types : Support for asset accounts, expense accounts, revenue accounts, and liabilities Budgets & Categories : Organize spending with budgets and detailed categorization Bills & Recurring Transactions : Automated handling of recurring payments and income Data Import : Import from banks, CSV files, and other financial software Multi-Currency Support : Handle multiple currencies with automatic conversion Reports & Charts : Comprehensive financial reporting and visualization Rules Engine : Automatic transaction categorization and processing API Access : RESTful API for third-party integrations Data Export : Export financial data in various formats","title":"Core features"},{"location":"app/overview/#supported-versions-lifecycle","text":"Current Version : Firefly III follows semantic versioning with regular feature releases LTS Policy : No formal LTS policy; users should stay on latest stable release PHP Requirements : PHP 8.2+ required for current versions Database Support : MySQL 8.0+, MariaDB 10.9+, PostgreSQL 13+ Update Cadence : Feature releases every few months, patch releases as needed","title":"Supported versions &amp; lifecycle"},{"location":"app/overview/#sources","text":"\"Firefly III Documentation Home\" \u2014 https://docs.firefly-iii.org \u2014 retrieved 2025-01-09 \"Firefly III About Page\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/about/ \u2014 retrieved 2025-01-09","title":"Sources"},{"location":"app/configuration/entrypoint-cli/","text":"Purpose: Capture startup behavior and commands we rely on. Contents - Entrypoint behavior - CLI commands & flags used - Sources Entrypoint behavior \u00b6 The Firefly III container uses PHP-FPM as the primary entrypoint: Container startup sequence: 1. Initialize environment variables from .env file 2. Wait for database connectivity (if configured) 3. Run database migrations automatically 4. Clear and optimize Laravel caches 5. Start PHP-FPM process on port 9000 6. Health check responds on /health endpoint Environment initialization: - Reads configuration from /var/www/app/.env - Validates required environment variables - Sets up Laravel framework configuration - Connects to database and verifies schema CLI commands & flags used \u00b6 Artisan commands (Laravel CLI): Command Purpose Usage in deployment Source php artisan migrate Run database migrations Automatic on startup \"Firefly III Installation\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 php artisan cache:clear Clear application cache Automatic on startup \"Firefly III Installation\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 php artisan config:cache Cache configuration Automatic on startup \"Firefly III Installation\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 php artisan route:cache Cache routes Automatic on startup \"Firefly III Installation\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 php artisan view:cache Cache Blade templates Automatic on startup \"Firefly III Installation\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 Firefly III specific commands: Command Purpose Usage Source php artisan firefly-iii:create-admin Create admin user Manual user creation \"Firefly III CLI\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/command-line/ \u2014 retrieved 2025-01-09 php artisan firefly-iii:verify Verify installation Health check validation \"Firefly III CLI\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/command-line/ \u2014 retrieved 2025-01-09 php artisan firefly-iii:upgrade-database Upgrade database schema Manual upgrades \"Firefly III CLI\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/command-line/ \u2014 retrieved 2025-01-09 PHP-FPM process: Flag Purpose Default Notes -F Run in foreground Always used Required for container operation -R Allow to run as root Not used Security: run as www-data Container health check: - Command : curl -f http://localhost:9000/health || exit 1 - Interval : 30 seconds - Timeout : 3 seconds - Retries : 3 - Start period : 60 seconds Sources \u00b6 \"Firefly III Installation Guide\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 \"Firefly III Command Line\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/command-line/ \u2014 retrieved 2025-01-09","title":"Entrypoint & CLI"},{"location":"app/configuration/entrypoint-cli/#entrypoint-behavior","text":"The Firefly III container uses PHP-FPM as the primary entrypoint: Container startup sequence: 1. Initialize environment variables from .env file 2. Wait for database connectivity (if configured) 3. Run database migrations automatically 4. Clear and optimize Laravel caches 5. Start PHP-FPM process on port 9000 6. Health check responds on /health endpoint Environment initialization: - Reads configuration from /var/www/app/.env - Validates required environment variables - Sets up Laravel framework configuration - Connects to database and verifies schema","title":"Entrypoint behavior"},{"location":"app/configuration/entrypoint-cli/#cli-commands-flags-used","text":"Artisan commands (Laravel CLI): Command Purpose Usage in deployment Source php artisan migrate Run database migrations Automatic on startup \"Firefly III Installation\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 php artisan cache:clear Clear application cache Automatic on startup \"Firefly III Installation\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 php artisan config:cache Cache configuration Automatic on startup \"Firefly III Installation\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 php artisan route:cache Cache routes Automatic on startup \"Firefly III Installation\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 php artisan view:cache Cache Blade templates Automatic on startup \"Firefly III Installation\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 Firefly III specific commands: Command Purpose Usage Source php artisan firefly-iii:create-admin Create admin user Manual user creation \"Firefly III CLI\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/command-line/ \u2014 retrieved 2025-01-09 php artisan firefly-iii:verify Verify installation Health check validation \"Firefly III CLI\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/command-line/ \u2014 retrieved 2025-01-09 php artisan firefly-iii:upgrade-database Upgrade database schema Manual upgrades \"Firefly III CLI\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/command-line/ \u2014 retrieved 2025-01-09 PHP-FPM process: Flag Purpose Default Notes -F Run in foreground Always used Required for container operation -R Allow to run as root Not used Security: run as www-data Container health check: - Command : curl -f http://localhost:9000/health || exit 1 - Interval : 30 seconds - Timeout : 3 seconds - Retries : 3 - Start period : 60 seconds","title":"CLI commands &amp; flags used"},{"location":"app/configuration/entrypoint-cli/#sources","text":"\"Firefly III Installation Guide\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 \"Firefly III Command Line\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/command-line/ \u2014 retrieved 2025-01-09","title":"Sources"},{"location":"app/configuration/env/","text":"Purpose: Enumerate required env vars and constraints. Contents - Required variables - Optional variables used here - Sources Required variables \u00b6 Name Purpose Default Constraints / Format Source APP_KEY Laravel application encryption key None base64:44-char string \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 APP_URL Base URL for the application None Valid HTTP/HTTPS URL \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 DB_CONNECTION Database type None mysql, pgsql, sqlite \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 DB_DATABASE Database name None String \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 DB_HOST Database host None Hostname or IP \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 DB_PASSWORD Database password None String \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 DB_PORT Database port 3306 (MySQL), 5432 (PostgreSQL) Valid port number \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 DB_USERNAME Database username None String \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 Optional variables used here \u00b6 Name Purpose Default Notes Source APP_DEBUG Enable debug mode false Set to true only in development \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 APP_ENV Application environment production local, production, staging \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 APP_LOCALE Application language en ISO 639-1 language codes \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 APP_TIMEZONE Application timezone UTC PHP timezone identifiers \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 CACHE_DRIVER Cache driver file file, redis, memcached \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 IS_DOCKER Enable Docker-specific optimizations false Set to true in containerized environments \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 MAIL_DRIVER Mail driver log smtp, sendmail, mailgun, log \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 MAIL_ENCRYPTION Mail encryption None tls, ssl \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 MAIL_FROM_ADDRESS Sender email address None Valid email address \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 MAIL_HOST SMTP host None Hostname or IP \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 MAIL_PORT SMTP port 587 Valid port number \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 REDIS_HOST Redis host None Hostname or IP \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 REDIS_PASSWORD Redis password None String \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 REDIS_PORT Redis port 6379 Valid port number \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 SESSION_DRIVER Session storage driver file file, redis, database \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 TRUSTED_PROXIES Trusted proxy IPs None IP addresses or CIDR blocks \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 Sources \u00b6 \"Firefly III Configuration Reference\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09","title":"Environment"},{"location":"app/configuration/env/#required-variables","text":"Name Purpose Default Constraints / Format Source APP_KEY Laravel application encryption key None base64:44-char string \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 APP_URL Base URL for the application None Valid HTTP/HTTPS URL \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 DB_CONNECTION Database type None mysql, pgsql, sqlite \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 DB_DATABASE Database name None String \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 DB_HOST Database host None Hostname or IP \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 DB_PASSWORD Database password None String \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 DB_PORT Database port 3306 (MySQL), 5432 (PostgreSQL) Valid port number \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 DB_USERNAME Database username None String \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09","title":"Required variables"},{"location":"app/configuration/env/#optional-variables-used-here","text":"Name Purpose Default Notes Source APP_DEBUG Enable debug mode false Set to true only in development \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 APP_ENV Application environment production local, production, staging \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 APP_LOCALE Application language en ISO 639-1 language codes \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 APP_TIMEZONE Application timezone UTC PHP timezone identifiers \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 CACHE_DRIVER Cache driver file file, redis, memcached \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 IS_DOCKER Enable Docker-specific optimizations false Set to true in containerized environments \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 MAIL_DRIVER Mail driver log smtp, sendmail, mailgun, log \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 MAIL_ENCRYPTION Mail encryption None tls, ssl \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 MAIL_FROM_ADDRESS Sender email address None Valid email address \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 MAIL_HOST SMTP host None Hostname or IP \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 MAIL_PORT SMTP port 587 Valid port number \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 REDIS_HOST Redis host None Hostname or IP \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 REDIS_PASSWORD Redis password None String \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 REDIS_PORT Redis port 6379 Valid port number \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 SESSION_DRIVER Session storage driver file file, redis, database \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 TRUSTED_PROXIES Trusted proxy IPs None IP addresses or CIDR blocks \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09","title":"Optional variables used here"},{"location":"app/configuration/env/#sources","text":"\"Firefly III Configuration Reference\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09","title":"Sources"},{"location":"app/configuration/files-and-paths/","text":"Purpose: Make storage locations and ownership explicit. Contents - Config files - Data directories & volumes - Certificates & secrets - Sources Config files \u00b6 Path Purpose Format Notes Source /var/www/app/.env Main configuration file Key=Value Contains all environment variables \"Firefly III Installation\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 /var/www/app/config/ Laravel configuration directory PHP Framework configuration files \"Firefly III Installation\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 Data directories & volumes \u00b6 Path What it stores Backup/Retention Notes Source /var/www/app/storage/ Application storage (logs, cache, uploads) Regular backup recommended Contains file uploads, logs, compiled views \"Firefly III Installation\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 /var/www/app/storage/app/ User uploaded files Critical - must backup Attachment files, import files \"Firefly III Installation\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 /var/www/app/storage/logs/ Application logs Rotate/archive weekly Laravel and Firefly III logs \"Firefly III Installation\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 /var/www/app/public/ Public web assets No backup needed Static assets (CSS, JS, images) \"Firefly III Installation\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 /var/lib/mysql/ Database files (MariaDB) Critical - must backup All financial data \"MariaDB Documentation\" \u2014 https://mariadb.com/kb/en/data-directories/ \u2014 retrieved 2025-01-09 /data/ Redis persistence (if enabled) Optional backup Cache and session data \"Redis Documentation\" \u2014 https://redis.io/docs/manual/persistence/ \u2014 retrieved 2025-01-09 Certificates & secrets \u00b6 Purpose Location Management Notes TLS Certificates External load balancer Let's Encrypt recommended Managed outside container Database passwords Environment variables Kubernetes secrets/Docker secrets Never in image layers Application key APP_KEY environment variable Generated with php artisan key:generate Critical for encryption File permissions \u00b6 Application files : Owned by www-data:www-data (uid 33) Storage directory : Must be writable by web server Database files : Owned by mysql:mysql (uid 999) Redis files : Owned by redis:redis (uid 100) Backup strategy \u00b6 Critical data (daily backups): - Database (full dump with mysqldump or pg_dump ) - Storage directory ( /var/www/app/storage/app/ ) Optional data: - Logs (for debugging, can be regenerated) - Cache (temporary, can be regenerated) Sources \u00b6 \"Firefly III Installation Guide\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 \"MariaDB Data Directory\" \u2014 https://mariadb.com/kb/en/data-directories/ \u2014 retrieved 2025-01-09","title":"Files & Paths"},{"location":"app/configuration/files-and-paths/#config-files","text":"Path Purpose Format Notes Source /var/www/app/.env Main configuration file Key=Value Contains all environment variables \"Firefly III Installation\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 /var/www/app/config/ Laravel configuration directory PHP Framework configuration files \"Firefly III Installation\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09","title":"Config files"},{"location":"app/configuration/files-and-paths/#data-directories-volumes","text":"Path What it stores Backup/Retention Notes Source /var/www/app/storage/ Application storage (logs, cache, uploads) Regular backup recommended Contains file uploads, logs, compiled views \"Firefly III Installation\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 /var/www/app/storage/app/ User uploaded files Critical - must backup Attachment files, import files \"Firefly III Installation\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 /var/www/app/storage/logs/ Application logs Rotate/archive weekly Laravel and Firefly III logs \"Firefly III Installation\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 /var/www/app/public/ Public web assets No backup needed Static assets (CSS, JS, images) \"Firefly III Installation\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 /var/lib/mysql/ Database files (MariaDB) Critical - must backup All financial data \"MariaDB Documentation\" \u2014 https://mariadb.com/kb/en/data-directories/ \u2014 retrieved 2025-01-09 /data/ Redis persistence (if enabled) Optional backup Cache and session data \"Redis Documentation\" \u2014 https://redis.io/docs/manual/persistence/ \u2014 retrieved 2025-01-09","title":"Data directories &amp; volumes"},{"location":"app/configuration/files-and-paths/#certificates-secrets","text":"Purpose Location Management Notes TLS Certificates External load balancer Let's Encrypt recommended Managed outside container Database passwords Environment variables Kubernetes secrets/Docker secrets Never in image layers Application key APP_KEY environment variable Generated with php artisan key:generate Critical for encryption","title":"Certificates &amp; secrets"},{"location":"app/configuration/files-and-paths/#file-permissions","text":"Application files : Owned by www-data:www-data (uid 33) Storage directory : Must be writable by web server Database files : Owned by mysql:mysql (uid 999) Redis files : Owned by redis:redis (uid 100)","title":"File permissions"},{"location":"app/configuration/files-and-paths/#backup-strategy","text":"Critical data (daily backups): - Database (full dump with mysqldump or pg_dump ) - Storage directory ( /var/www/app/storage/app/ ) Optional data: - Logs (for debugging, can be regenerated) - Cache (temporary, can be regenerated)","title":"Backup strategy"},{"location":"app/configuration/files-and-paths/#sources","text":"\"Firefly III Installation Guide\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 \"MariaDB Data Directory\" \u2014 https://mariadb.com/kb/en/data-directories/ \u2014 retrieved 2025-01-09","title":"Sources"},{"location":"app/configuration/helm-values/","text":"Purpose: Keep Helm docs tight and truthful. Contents - Values we set - Sources Values we set \u00b6 Key Example Notes / Constraints Source namespace firefly-iii-application Kubernetes namespace for deployment \"Helm Chart Values\" \u2014 ops/helm/application-application/values.yaml \u2014 retrieved 2025-01-09 _shared_config.hostname firefly-iii-application.staging.k8s.webgrip.nl External hostname for ingress \"Helm Chart Values\" \u2014 ops/helm/application-application/values.yaml \u2014 retrieved 2025-01-09 _shared_config.url https://firefly-iii-application.staging.k8s.webgrip.nl Full external URL \"Helm Chart Values\" \u2014 ops/helm/application-application/values.yaml \u2014 retrieved 2025-01-09 application.controllers.main.containers.app.image.repository docker.io/webgrip/firefly-iii-application Container image repository \"Helm Chart Values\" \u2014 ops/helm/application-application/values.yaml \u2014 retrieved 2025-01-09 application.controllers.main.containers.app.image.tag latest Container image tag (use specific versions in production) \"Helm Chart Values\" \u2014 ops/helm/application-application/values.yaml \u2014 retrieved 2025-01-09 application.controllers.main.containers.app.resources.requests.cpu 250m CPU request for application container \"Helm Chart Values\" \u2014 ops/helm/application-application/values.yaml \u2014 retrieved 2025-01-09 application.controllers.main.containers.app.resources.requests.memory 512Mi Memory request for application container \"Helm Chart Values\" \u2014 ops/helm/application-application/values.yaml \u2014 retrieved 2025-01-09 application.controllers.main.containers.app.resources.limits.cpu 1000m CPU limit for application container \"Helm Chart Values\" \u2014 ops/helm/application-application/values.yaml \u2014 retrieved 2025-01-09 application.controllers.main.containers.app.resources.limits.memory 1Gi Memory limit for application container \"Helm Chart Values\" \u2014 ops/helm/application-application/values.yaml \u2014 retrieved 2025-01-09 application.controllers.main.containers.web.image.repository nginxinc/nginx-unprivileged Nginx container image \"Helm Chart Values\" \u2014 ops/helm/application-application/values.yaml \u2014 retrieved 2025-01-09 application.controllers.main.containers.web.image.tag 1.29.1-alpine3.22-perl Nginx container image tag \"Helm Chart Values\" \u2014 ops/helm/application-application/values.yaml \u2014 retrieved 2025-01-09 mariadb.enabled true Enable MariaDB database \"Helm Chart Values\" \u2014 ops/helm/application-application/values.yaml \u2014 retrieved 2025-01-09 mariadb.database firefly-iii-application Database name \"Helm Chart Values\" \u2014 ops/helm/application-application/values.yaml \u2014 retrieved 2025-01-09 mariadb.username firefly-iii-application Database username \"Helm Chart Values\" \u2014 ops/helm/application-application/values.yaml \u2014 retrieved 2025-01-09 redis.enabled true Enable Redis cache \"Helm Chart Values\" \u2014 ops/helm/application-application/values.yaml \u2014 retrieved 2025-01-09 Environment Variables Set via Helm \u00b6 Application Configuration: - APP_NAME : firefly-iii-application - APP_ENV : production - APP_DEBUG : false - APP_URL : Uses shared hostname configuration - APP_LOCALE : en - APP_TIMEZONE : Europe/Amsterdam Database Configuration: - DB_CONNECTION : mysql - DB_HOST : firefly-iii-application-mariadb - DB_PORT : 3306 - DB_DATABASE : firefly-iii-application - DB_USERNAME : firefly-iii-application Cache Configuration: - SESSION_DRIVER : redis - CACHE_DRIVER : redis - QUEUE_CONNECTION : redis - REDIS_HOST : firefly-iii-application-redis-master - REDIS_PORT : 6379 - REDIS_PREFIX : firefly-iii-application_ Security Configuration: - REQUIRE_HTTPS : true - TRUSTED_PROXIES : ** (trust all proxies) - DB_STRICT : false Additional Configuration: - IS_DOCKER : true (indicates container environment) - FILESYSTEM_DRIVER : local (file storage backend) - EXPANDED_LOGGING : true (enhanced logging for troubleshooting) - PDF_GENERATOR : snappdf (PDF generation engine) Secrets (referenced from Kubernetes secrets): - APP_KEY : Application encryption key used for Laravel encryption and CSRF protection - DB_PASSWORD : Database password for MariaDB connection - REDIS_PASSWORD : Password for Redis cache and session storage - API_SECRET : Secret token for API authentication and external integrations - UPDATE_SECRET : Security token for webhook authentication and automated update notifications - WEBCRON_SECRET : Authentication token for scheduled task execution and cron job webhooks Sources \u00b6 \"Helm Chart Values\" \u2014 ops/helm/application-application/values.yaml \u2014 retrieved 2025-01-09","title":"Helm (used values)"},{"location":"app/configuration/helm-values/#values-we-set","text":"Key Example Notes / Constraints Source namespace firefly-iii-application Kubernetes namespace for deployment \"Helm Chart Values\" \u2014 ops/helm/application-application/values.yaml \u2014 retrieved 2025-01-09 _shared_config.hostname firefly-iii-application.staging.k8s.webgrip.nl External hostname for ingress \"Helm Chart Values\" \u2014 ops/helm/application-application/values.yaml \u2014 retrieved 2025-01-09 _shared_config.url https://firefly-iii-application.staging.k8s.webgrip.nl Full external URL \"Helm Chart Values\" \u2014 ops/helm/application-application/values.yaml \u2014 retrieved 2025-01-09 application.controllers.main.containers.app.image.repository docker.io/webgrip/firefly-iii-application Container image repository \"Helm Chart Values\" \u2014 ops/helm/application-application/values.yaml \u2014 retrieved 2025-01-09 application.controllers.main.containers.app.image.tag latest Container image tag (use specific versions in production) \"Helm Chart Values\" \u2014 ops/helm/application-application/values.yaml \u2014 retrieved 2025-01-09 application.controllers.main.containers.app.resources.requests.cpu 250m CPU request for application container \"Helm Chart Values\" \u2014 ops/helm/application-application/values.yaml \u2014 retrieved 2025-01-09 application.controllers.main.containers.app.resources.requests.memory 512Mi Memory request for application container \"Helm Chart Values\" \u2014 ops/helm/application-application/values.yaml \u2014 retrieved 2025-01-09 application.controllers.main.containers.app.resources.limits.cpu 1000m CPU limit for application container \"Helm Chart Values\" \u2014 ops/helm/application-application/values.yaml \u2014 retrieved 2025-01-09 application.controllers.main.containers.app.resources.limits.memory 1Gi Memory limit for application container \"Helm Chart Values\" \u2014 ops/helm/application-application/values.yaml \u2014 retrieved 2025-01-09 application.controllers.main.containers.web.image.repository nginxinc/nginx-unprivileged Nginx container image \"Helm Chart Values\" \u2014 ops/helm/application-application/values.yaml \u2014 retrieved 2025-01-09 application.controllers.main.containers.web.image.tag 1.29.1-alpine3.22-perl Nginx container image tag \"Helm Chart Values\" \u2014 ops/helm/application-application/values.yaml \u2014 retrieved 2025-01-09 mariadb.enabled true Enable MariaDB database \"Helm Chart Values\" \u2014 ops/helm/application-application/values.yaml \u2014 retrieved 2025-01-09 mariadb.database firefly-iii-application Database name \"Helm Chart Values\" \u2014 ops/helm/application-application/values.yaml \u2014 retrieved 2025-01-09 mariadb.username firefly-iii-application Database username \"Helm Chart Values\" \u2014 ops/helm/application-application/values.yaml \u2014 retrieved 2025-01-09 redis.enabled true Enable Redis cache \"Helm Chart Values\" \u2014 ops/helm/application-application/values.yaml \u2014 retrieved 2025-01-09","title":"Values we set"},{"location":"app/configuration/helm-values/#environment-variables-set-via-helm","text":"Application Configuration: - APP_NAME : firefly-iii-application - APP_ENV : production - APP_DEBUG : false - APP_URL : Uses shared hostname configuration - APP_LOCALE : en - APP_TIMEZONE : Europe/Amsterdam Database Configuration: - DB_CONNECTION : mysql - DB_HOST : firefly-iii-application-mariadb - DB_PORT : 3306 - DB_DATABASE : firefly-iii-application - DB_USERNAME : firefly-iii-application Cache Configuration: - SESSION_DRIVER : redis - CACHE_DRIVER : redis - QUEUE_CONNECTION : redis - REDIS_HOST : firefly-iii-application-redis-master - REDIS_PORT : 6379 - REDIS_PREFIX : firefly-iii-application_ Security Configuration: - REQUIRE_HTTPS : true - TRUSTED_PROXIES : ** (trust all proxies) - DB_STRICT : false Additional Configuration: - IS_DOCKER : true (indicates container environment) - FILESYSTEM_DRIVER : local (file storage backend) - EXPANDED_LOGGING : true (enhanced logging for troubleshooting) - PDF_GENERATOR : snappdf (PDF generation engine) Secrets (referenced from Kubernetes secrets): - APP_KEY : Application encryption key used for Laravel encryption and CSRF protection - DB_PASSWORD : Database password for MariaDB connection - REDIS_PASSWORD : Password for Redis cache and session storage - API_SECRET : Secret token for API authentication and external integrations - UPDATE_SECRET : Security token for webhook authentication and automated update notifications - WEBCRON_SECRET : Authentication token for scheduled task execution and cron job webhooks","title":"Environment Variables Set via Helm"},{"location":"app/configuration/helm-values/#sources","text":"\"Helm Chart Values\" \u2014 ops/helm/application-application/values.yaml \u2014 retrieved 2025-01-09","title":"Sources"},{"location":"app/integrations/cache/","text":"Purpose: Document cache integration for session storage and performance optimization. Contents - Supported cache drivers - Redis configuration - Container interface - Performance considerations - Sources Supported cache drivers \u00b6 Firefly III supports multiple cache backends: Driver Use Case Performance Persistence Source redis Production recommended High Optional \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 file Development/testing Medium Yes \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 database Small installations Low Yes \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 memcached Alternative to Redis High No \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 This repository uses Redis for: - Application cache ( CACHE_DRIVER=redis ) - Session storage ( SESSION_DRIVER=redis ) - Queue backend ( QUEUE_CONNECTION=redis ) Redis configuration \u00b6 Environment variables: Variable Purpose Example Source REDIS_HOST Redis hostname firefly-iii-application.redis \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 REDIS_PORT Redis port 6379 \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 REDIS_PASSWORD Redis password (from secrets) \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 REDIS_CLIENT PHP Redis client phpredis \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 REDIS_PREFIX Key prefix firefly-iii-application_ \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 Redis client configuration: - Client : phpredis (recommended over predis for performance) - Serialization : PHP serialization for complex objects - Compression : Disabled by default - Persistence : Optional RDB snapshots for session recovery Container interface \u00b6 Aspect Value / Path Notes Ports 6379/tcp Standard Redis port Healthcheck redis-cli ping Returns PONG when healthy Volumes /data Optional persistence for sessions Configuration /usr/local/etc/redis/redis.conf Custom Redis configuration Memory Policy allkeys-lru Evict least recently used keys when memory full Docker Compose configuration: 1 2 3 4 5 6 7 8 9 10 firefly-iii-application.redis : image : webgrip/firefly-iii-application-redis:latest volumes : - firefly-iii-application-redis-data:/data healthcheck : test : [ \"CMD\" , \"redis-cli\" , \"ping\" ] interval : 30s timeout : 10s retries : 5 start_period : 5s Redis configuration options: 1 2 3 4 5 6 7 8 9 10 11 12 # Memory management maxmemory 256mb maxmemory-policy allkeys-lru # Persistence (optional) save 900 1 save 300 10 save 60 10000 # Performance tcp-keepalive 300 timeout 0 Performance considerations \u00b6 Memory usage: - Sessions : ~1-10KB per active user session - Cache : Variable based on application usage - Queues : Depends on background job volume - Recommended : 256MB minimum, 512MB for high traffic Key expiration: - Sessions : Configured via SESSION_LIFETIME (default: 120 minutes) - Cache : TTL varies by cached content (views, routes, config) - Queues : Jobs removed after processing Monitoring: 1 2 3 4 5 6 7 8 # Check memory usage redis-cli info memory # Monitor key count by type redis-cli eval \"return redis.call('keys', ARGV[1])\" 0 \"firefly-iii-application_*\" # Check active connections redis-cli info clients Cache warming: - Application caches are populated on first access - Route and configuration caching happens at startup - No manual cache warming required Troubleshooting \u00b6 Common issues: 1. Connection refused : Check Redis container health and network connectivity 2. Memory pressure : Monitor Redis memory usage and adjust limits 3. Session loss : Check Redis persistence configuration 4. Slow performance : Monitor Redis CPU usage and connection count Debug commands: 1 2 3 4 5 6 7 8 9 10 11 12 # Test Redis connectivity docker exec firefly-iii-application.application php -r \" $redis = new Redis(); $redis ->connect('firefly-iii-application.redis', 6379); echo $redis ->ping() ? 'Connected' : 'Failed'; \" # Clear all cache docker exec firefly-iii-application.application php artisan cache:clear # View Redis logs docker logs firefly-iii-application.redis Sources \u00b6 \"Firefly III Configuration Reference\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 \"Redis Official Documentation\" \u2014 https://redis.io/docs/ \u2014 retrieved 2025-01-09","title":"Cache"},{"location":"app/integrations/cache/#supported-cache-drivers","text":"Firefly III supports multiple cache backends: Driver Use Case Performance Persistence Source redis Production recommended High Optional \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 file Development/testing Medium Yes \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 database Small installations Low Yes \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 memcached Alternative to Redis High No \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 This repository uses Redis for: - Application cache ( CACHE_DRIVER=redis ) - Session storage ( SESSION_DRIVER=redis ) - Queue backend ( QUEUE_CONNECTION=redis )","title":"Supported cache drivers"},{"location":"app/integrations/cache/#redis-configuration","text":"Environment variables: Variable Purpose Example Source REDIS_HOST Redis hostname firefly-iii-application.redis \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 REDIS_PORT Redis port 6379 \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 REDIS_PASSWORD Redis password (from secrets) \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 REDIS_CLIENT PHP Redis client phpredis \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 REDIS_PREFIX Key prefix firefly-iii-application_ \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 Redis client configuration: - Client : phpredis (recommended over predis for performance) - Serialization : PHP serialization for complex objects - Compression : Disabled by default - Persistence : Optional RDB snapshots for session recovery","title":"Redis configuration"},{"location":"app/integrations/cache/#container-interface","text":"Aspect Value / Path Notes Ports 6379/tcp Standard Redis port Healthcheck redis-cli ping Returns PONG when healthy Volumes /data Optional persistence for sessions Configuration /usr/local/etc/redis/redis.conf Custom Redis configuration Memory Policy allkeys-lru Evict least recently used keys when memory full Docker Compose configuration: 1 2 3 4 5 6 7 8 9 10 firefly-iii-application.redis : image : webgrip/firefly-iii-application-redis:latest volumes : - firefly-iii-application-redis-data:/data healthcheck : test : [ \"CMD\" , \"redis-cli\" , \"ping\" ] interval : 30s timeout : 10s retries : 5 start_period : 5s Redis configuration options: 1 2 3 4 5 6 7 8 9 10 11 12 # Memory management maxmemory 256mb maxmemory-policy allkeys-lru # Persistence (optional) save 900 1 save 300 10 save 60 10000 # Performance tcp-keepalive 300 timeout 0","title":"Container interface"},{"location":"app/integrations/cache/#performance-considerations","text":"Memory usage: - Sessions : ~1-10KB per active user session - Cache : Variable based on application usage - Queues : Depends on background job volume - Recommended : 256MB minimum, 512MB for high traffic Key expiration: - Sessions : Configured via SESSION_LIFETIME (default: 120 minutes) - Cache : TTL varies by cached content (views, routes, config) - Queues : Jobs removed after processing Monitoring: 1 2 3 4 5 6 7 8 # Check memory usage redis-cli info memory # Monitor key count by type redis-cli eval \"return redis.call('keys', ARGV[1])\" 0 \"firefly-iii-application_*\" # Check active connections redis-cli info clients Cache warming: - Application caches are populated on first access - Route and configuration caching happens at startup - No manual cache warming required","title":"Performance considerations"},{"location":"app/integrations/cache/#troubleshooting","text":"Common issues: 1. Connection refused : Check Redis container health and network connectivity 2. Memory pressure : Monitor Redis memory usage and adjust limits 3. Session loss : Check Redis persistence configuration 4. Slow performance : Monitor Redis CPU usage and connection count Debug commands: 1 2 3 4 5 6 7 8 9 10 11 12 # Test Redis connectivity docker exec firefly-iii-application.application php -r \" $redis = new Redis(); $redis ->connect('firefly-iii-application.redis', 6379); echo $redis ->ping() ? 'Connected' : 'Failed'; \" # Clear all cache docker exec firefly-iii-application.application php artisan cache:clear # View Redis logs docker logs firefly-iii-application.redis","title":"Troubleshooting"},{"location":"app/integrations/cache/#sources","text":"\"Firefly III Configuration Reference\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 \"Redis Official Documentation\" \u2014 https://redis.io/docs/ \u2014 retrieved 2025-01-09","title":"Sources"},{"location":"app/integrations/database/","text":"Purpose: Document database integration requirements and configuration. Contents - Supported databases - Connection configuration - Container interface - Migration and maintenance - Sources Supported databases \u00b6 Firefly III supports multiple database backends: Database Version Notes Source MySQL 8.0+ Recommended for new installations \"Firefly III Requirements\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 MariaDB 10.9+ Used in this repository deployment \"Firefly III Requirements\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 PostgreSQL 13+ Alternative to MySQL/MariaDB \"Firefly III Requirements\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 SQLite 3.8+ Development only, not recommended for production \"Firefly III Requirements\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 Character Set Requirements: - MySQL/MariaDB: utf8mb4 character set with utf8mb4_unicode_ci collation - PostgreSQL: UTF-8 encoding Connection configuration \u00b6 Environment variables for database connection: Variable Purpose Example DB_CONNECTION Database driver mysql, pgsql, sqlite DB_HOST Database hostname firefly-iii-application.mariadb DB_PORT Database port 3306 (MySQL/MariaDB), 5432 (PostgreSQL) DB_DATABASE Database name firefly-iii-application DB_USERNAME Database user firefly-iii-application DB_PASSWORD Database password (from secrets) Connection string format (internal use): 1 mysql://username:password@host:port/database?charset=utf8mb4 Container interface \u00b6 Aspect Value / Path Notes Ports 3306/tcp (MariaDB) Must match upstream defaults Healthcheck mariadb --user=<user> --password=<pass> --execute=\"SELECT 1\" As per official image guidance Volumes /var/lib/mysql Data and retention responsibilities Character Set utf8mb4 with utf8mb4_unicode_ci collation Required for proper emoji/Unicode support Configuration /etc/mysql/mariadb.conf.d/ Custom configuration files Docker Compose configuration: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 firefly-iii-application.mariadb : image : webgrip/firefly-iii-application-mariadb:latest environment : MARIADB_DATABASE : ${DB_DATABASE:-application} MARIADB_USER : ${DB_USERNAME:-application} MARIADB_PASSWORD : ${DB_PASSWORD:-application} MARIADB_ROOT_PASSWORD : ${DB_ROOT_PASSWORD:-root} MARIADB_CHARACTER_SET_SERVER : utf8mb4 MARIADB_COLLATION_SERVER : utf8mb4_unicode_ci healthcheck : test : [ \"CMD\" , \"mariadb\" , \"--user=${DB_USERNAME:-application}\" , \"--password=${DB_PASSWORD:-application}\" , \"--execute=SELECT 1\" ] interval : 10s timeout : 5s retries : 10 start_period : 30s Migration and maintenance \u00b6 Database initialization: 1. Container starts with empty database 2. Firefly III runs migrations automatically on first startup 3. Subsequent startups check for pending migrations Backup procedures: 1 2 3 4 5 6 7 # Full database backup docker exec firefly-iii-application.mariadb mysqldump \\ -u application -p application > firefly_backup.sql # Restore from backup docker exec -i firefly-iii-application.mariadb mysql \\ -u application -p application < firefly_backup.sql Migration commands: 1 2 3 4 5 6 7 # Manual migration (if needed) docker exec firefly-iii-application.application \\ php artisan migrate # Check migration status docker exec firefly-iii-application.application \\ php artisan migrate:status Performance tuning (MariaDB): - innodb_buffer_pool_size : 70-80% of available RAM - max_connections : Based on expected concurrent users - innodb_log_file_size : 256MB for write-heavy workloads Sources \u00b6 \"Firefly III Installation Requirements\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 \"MariaDB Official Image\" \u2014 https://hub.docker.com/_/mariadb \u2014 retrieved 2025-01-09","title":"Database"},{"location":"app/integrations/database/#supported-databases","text":"Firefly III supports multiple database backends: Database Version Notes Source MySQL 8.0+ Recommended for new installations \"Firefly III Requirements\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 MariaDB 10.9+ Used in this repository deployment \"Firefly III Requirements\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 PostgreSQL 13+ Alternative to MySQL/MariaDB \"Firefly III Requirements\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 SQLite 3.8+ Development only, not recommended for production \"Firefly III Requirements\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 Character Set Requirements: - MySQL/MariaDB: utf8mb4 character set with utf8mb4_unicode_ci collation - PostgreSQL: UTF-8 encoding","title":"Supported databases"},{"location":"app/integrations/database/#connection-configuration","text":"Environment variables for database connection: Variable Purpose Example DB_CONNECTION Database driver mysql, pgsql, sqlite DB_HOST Database hostname firefly-iii-application.mariadb DB_PORT Database port 3306 (MySQL/MariaDB), 5432 (PostgreSQL) DB_DATABASE Database name firefly-iii-application DB_USERNAME Database user firefly-iii-application DB_PASSWORD Database password (from secrets) Connection string format (internal use): 1 mysql://username:password@host:port/database?charset=utf8mb4","title":"Connection configuration"},{"location":"app/integrations/database/#container-interface","text":"Aspect Value / Path Notes Ports 3306/tcp (MariaDB) Must match upstream defaults Healthcheck mariadb --user=<user> --password=<pass> --execute=\"SELECT 1\" As per official image guidance Volumes /var/lib/mysql Data and retention responsibilities Character Set utf8mb4 with utf8mb4_unicode_ci collation Required for proper emoji/Unicode support Configuration /etc/mysql/mariadb.conf.d/ Custom configuration files Docker Compose configuration: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 firefly-iii-application.mariadb : image : webgrip/firefly-iii-application-mariadb:latest environment : MARIADB_DATABASE : ${DB_DATABASE:-application} MARIADB_USER : ${DB_USERNAME:-application} MARIADB_PASSWORD : ${DB_PASSWORD:-application} MARIADB_ROOT_PASSWORD : ${DB_ROOT_PASSWORD:-root} MARIADB_CHARACTER_SET_SERVER : utf8mb4 MARIADB_COLLATION_SERVER : utf8mb4_unicode_ci healthcheck : test : [ \"CMD\" , \"mariadb\" , \"--user=${DB_USERNAME:-application}\" , \"--password=${DB_PASSWORD:-application}\" , \"--execute=SELECT 1\" ] interval : 10s timeout : 5s retries : 10 start_period : 30s","title":"Container interface"},{"location":"app/integrations/database/#migration-and-maintenance","text":"Database initialization: 1. Container starts with empty database 2. Firefly III runs migrations automatically on first startup 3. Subsequent startups check for pending migrations Backup procedures: 1 2 3 4 5 6 7 # Full database backup docker exec firefly-iii-application.mariadb mysqldump \\ -u application -p application > firefly_backup.sql # Restore from backup docker exec -i firefly-iii-application.mariadb mysql \\ -u application -p application < firefly_backup.sql Migration commands: 1 2 3 4 5 6 7 # Manual migration (if needed) docker exec firefly-iii-application.application \\ php artisan migrate # Check migration status docker exec firefly-iii-application.application \\ php artisan migrate:status Performance tuning (MariaDB): - innodb_buffer_pool_size : 70-80% of available RAM - max_connections : Based on expected concurrent users - innodb_log_file_size : 256MB for write-heavy workloads","title":"Migration and maintenance"},{"location":"app/integrations/database/#sources","text":"\"Firefly III Installation Requirements\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 \"MariaDB Official Image\" \u2014 https://hub.docker.com/_/mariadb \u2014 retrieved 2025-01-09","title":"Sources"},{"location":"app/integrations/mailer/","text":"Purpose: Document email integration for notifications and user communications. Contents - Supported mail drivers - SMTP configuration - Email notifications - Testing and troubleshooting - Sources Supported mail drivers \u00b6 Firefly III supports multiple email backends: Driver Use Case Configuration Complexity Source smtp Production recommended Medium \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 log Development/testing Low \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 sendmail Local server setup Low \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 mailgun Mailgun service Medium \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 postmark Postmark service Medium \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 SMTP configuration \u00b6 Environment variables: Variable Purpose Example Required MAIL_MAILER Mail driver selection smtp Yes MAIL_HOST SMTP server hostname smtp.gmail.com Yes (SMTP) MAIL_PORT SMTP server port 587, 465, 25 Yes (SMTP) MAIL_USERNAME SMTP authentication username user@example.com Yes (SMTP) MAIL_PASSWORD SMTP authentication password (from secrets) Yes (SMTP) MAIL_ENCRYPTION Encryption method tls, ssl, null Recommended MAIL_FROM_ADDRESS Sender email address noreply@example.com Yes MAIL_FROM_NAME Sender display name Firefly III Yes Common SMTP configurations: Provider Host Port Encryption Notes Gmail smtp.gmail.com 587 tls Requires app password Outlook smtp-mail.outlook.com 587 tls Modern authentication SendGrid smtp.sendgrid.net 587 tls API key as password Mailgun smtp.mailgun.org 587 tls SMTP credentials AWS SES email-smtp.region.amazonaws.com 587 tls IAM credentials Docker Compose configuration: 1 2 3 4 5 6 7 8 9 10 firefly-iii-application.application : environment : MAIL_MAILER : smtp MAIL_HOST : smtp.example.com MAIL_PORT : 587 MAIL_USERNAME : firefly@example.com MAIL_ENCRYPTION : tls MAIL_FROM_ADDRESS : firefly@example.com MAIL_FROM_NAME : \"Firefly III\" # MAIL_PASSWORD loaded from secrets Email notifications \u00b6 Firefly III sends emails for: Event Description Frequency Can Disable Registration New user account creation Once No Password Reset Password reset requests On demand No Budget Alerts Budget overspend notifications Configurable Yes Bill Reminders Upcoming bill notifications Configurable Yes Report Generation Automated report delivery Scheduled Yes Data Import Import completion notifications Per import Yes Notification preferences: - Users can configure notification preferences in their profile - Admins can set system-wide default notification settings - Email frequency can be adjusted per notification type Testing and troubleshooting \u00b6 Test email functionality: 1 2 3 # Send test email from container docker exec firefly-iii-application.application php artisan tinker >>> Mail::raw ( 'Test email' , function ( $msg ) { $msg ->to ( 'test@example.com' ) ->subject ( 'Test' ) ; }) ; Debugging email issues: Check logs: 1 2 3 4 5 # View application logs docker logs firefly-iii-application.application | grep -i mail # View Laravel logs docker exec firefly-iii-application.application tail -f storage/logs/laravel.log Verify SMTP connectivity: 1 2 3 4 5 6 # Test SMTP connection docker exec firefly-iii-application.application php -r \" $smtp = fsockopen('smtp.example.com', 587, $errno , $errstr , 30); echo $smtp ? 'SMTP reachable' : 'SMTP unreachable: ' . $errstr ; if ( $smtp ) fclose( $smtp ); \" Common issues: Authentication failures : Check username/password credentials TLS errors : Verify encryption settings and certificate validity Port blocking : Ensure firewall allows outbound SMTP traffic Rate limiting : Check provider rate limits and daily quotas Log driver (development): When using MAIL_MAILER=log , emails are written to Laravel logs instead of being sent: 1 2 # View logged emails docker exec firefly-iii-application.application tail -f storage/logs/laravel.log | grep -A 20 \"mail.local\" Security considerations \u00b6 Best practices: - Use application-specific passwords (Gmail, Outlook) - Enable two-factor authentication on email provider - Use TLS encryption for SMTP connections - Rotate SMTP credentials regularly - Monitor for bounce/rejection rates Avoid common pitfalls: - Don't use personal email accounts for system notifications - Don't hardcode email passwords in configuration files - Don't use unencrypted SMTP connections (port 25) - Don't ignore SPF/DKIM/DMARC setup for deliverability Sources \u00b6 \"Firefly III Configuration Reference\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 \"Laravel Mail Configuration\" \u2014 https://laravel.com/docs/mail \u2014 retrieved 2025-01-09","title":"Mailer"},{"location":"app/integrations/mailer/#supported-mail-drivers","text":"Firefly III supports multiple email backends: Driver Use Case Configuration Complexity Source smtp Production recommended Medium \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 log Development/testing Low \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 sendmail Local server setup Low \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 mailgun Mailgun service Medium \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 postmark Postmark service Medium \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09","title":"Supported mail drivers"},{"location":"app/integrations/mailer/#smtp-configuration","text":"Environment variables: Variable Purpose Example Required MAIL_MAILER Mail driver selection smtp Yes MAIL_HOST SMTP server hostname smtp.gmail.com Yes (SMTP) MAIL_PORT SMTP server port 587, 465, 25 Yes (SMTP) MAIL_USERNAME SMTP authentication username user@example.com Yes (SMTP) MAIL_PASSWORD SMTP authentication password (from secrets) Yes (SMTP) MAIL_ENCRYPTION Encryption method tls, ssl, null Recommended MAIL_FROM_ADDRESS Sender email address noreply@example.com Yes MAIL_FROM_NAME Sender display name Firefly III Yes Common SMTP configurations: Provider Host Port Encryption Notes Gmail smtp.gmail.com 587 tls Requires app password Outlook smtp-mail.outlook.com 587 tls Modern authentication SendGrid smtp.sendgrid.net 587 tls API key as password Mailgun smtp.mailgun.org 587 tls SMTP credentials AWS SES email-smtp.region.amazonaws.com 587 tls IAM credentials Docker Compose configuration: 1 2 3 4 5 6 7 8 9 10 firefly-iii-application.application : environment : MAIL_MAILER : smtp MAIL_HOST : smtp.example.com MAIL_PORT : 587 MAIL_USERNAME : firefly@example.com MAIL_ENCRYPTION : tls MAIL_FROM_ADDRESS : firefly@example.com MAIL_FROM_NAME : \"Firefly III\" # MAIL_PASSWORD loaded from secrets","title":"SMTP configuration"},{"location":"app/integrations/mailer/#email-notifications","text":"Firefly III sends emails for: Event Description Frequency Can Disable Registration New user account creation Once No Password Reset Password reset requests On demand No Budget Alerts Budget overspend notifications Configurable Yes Bill Reminders Upcoming bill notifications Configurable Yes Report Generation Automated report delivery Scheduled Yes Data Import Import completion notifications Per import Yes Notification preferences: - Users can configure notification preferences in their profile - Admins can set system-wide default notification settings - Email frequency can be adjusted per notification type","title":"Email notifications"},{"location":"app/integrations/mailer/#testing-and-troubleshooting","text":"Test email functionality: 1 2 3 # Send test email from container docker exec firefly-iii-application.application php artisan tinker >>> Mail::raw ( 'Test email' , function ( $msg ) { $msg ->to ( 'test@example.com' ) ->subject ( 'Test' ) ; }) ; Debugging email issues: Check logs: 1 2 3 4 5 # View application logs docker logs firefly-iii-application.application | grep -i mail # View Laravel logs docker exec firefly-iii-application.application tail -f storage/logs/laravel.log Verify SMTP connectivity: 1 2 3 4 5 6 # Test SMTP connection docker exec firefly-iii-application.application php -r \" $smtp = fsockopen('smtp.example.com', 587, $errno , $errstr , 30); echo $smtp ? 'SMTP reachable' : 'SMTP unreachable: ' . $errstr ; if ( $smtp ) fclose( $smtp ); \" Common issues: Authentication failures : Check username/password credentials TLS errors : Verify encryption settings and certificate validity Port blocking : Ensure firewall allows outbound SMTP traffic Rate limiting : Check provider rate limits and daily quotas Log driver (development): When using MAIL_MAILER=log , emails are written to Laravel logs instead of being sent: 1 2 # View logged emails docker exec firefly-iii-application.application tail -f storage/logs/laravel.log | grep -A 20 \"mail.local\"","title":"Testing and troubleshooting"},{"location":"app/integrations/mailer/#security-considerations","text":"Best practices: - Use application-specific passwords (Gmail, Outlook) - Enable two-factor authentication on email provider - Use TLS encryption for SMTP connections - Rotate SMTP credentials regularly - Monitor for bounce/rejection rates Avoid common pitfalls: - Don't use personal email accounts for system notifications - Don't hardcode email passwords in configuration files - Don't use unencrypted SMTP connections (port 25) - Don't ignore SPF/DKIM/DMARC setup for deliverability","title":"Security considerations"},{"location":"app/integrations/mailer/#sources","text":"\"Firefly III Configuration Reference\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 \"Laravel Mail Configuration\" \u2014 https://laravel.com/docs/mail \u2014 retrieved 2025-01-09","title":"Sources"},{"location":"domain/aggregates/","text":"Purpose: Make invariants explicit. Contents - Aggregates - Invariants - Sources Aggregates \u00b6 Aggregate Root Entities/Value Objects Invariants Source Account Account Type, Account Balance, Account Meta Account balance must reflect sum of all transactions; Account type cannot change once set \"Firefly III Accounts\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/accounts/ \u2014 retrieved 2025-01-09 Transaction Group Transaction, Transaction Journal, Source/Destination Accounts Transaction amounts must balance (double-entry); All transactions in group occur on same date \"Firefly III Transactions\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/transactions/ \u2014 retrieved 2025-01-09 Budget Budget Limit, Budget Period, Available Amount Budget limits cannot be negative; Spent amount cannot exceed available amount (warning only) \"Firefly III Budgets\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/budgets/ \u2014 retrieved 2025-01-09 Bill Bill Match, Expected Amount, Due Date, Payment History Bill amount must be positive; Due dates must be in future when created \"Firefly III Bills\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/bills/ \u2014 retrieved 2025-01-09 Rule Rule Trigger, Rule Action, Rule Condition Rule must have at least one trigger and one action; Actions must be valid for trigger type \"Firefly III Rules\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/rules/ \u2014 retrieved 2025-01-09 Piggy Bank Target Amount, Current Amount, Savings Goal, Account Reference Target amount must be positive; Saved amount cannot exceed target; Must reference valid asset account \"Firefly III Piggy Banks\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/piggy-banks/ \u2014 retrieved 2025-01-09 User User Preferences, User Role, Account Ownership User must own all accounts they access; Preferences must be valid key-value pairs \"Firefly III Administration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/administration/ \u2014 retrieved 2025-01-09 Invariants \u00b6 Account Aggregate Invariants: - Account balance must always equal the sum of all associated transaction amounts - Account type (asset, expense, revenue, liability) cannot be changed once set - Account currency cannot be changed if transactions exist - Account must have a unique name within account type for the user Transaction Group Aggregate Invariants: - All transactions within a group must occur on the same date - Total debits must equal total credits (double-entry bookkeeping) - Source and destination accounts must be different for each transaction - Transaction amounts must be positive values - Split transactions must reference the same source/destination accounts Budget Aggregate Invariants: - Budget amount must be positive or zero - Budget period dates must be valid (start before end) - Only one active budget per category per period - Spent amount calculation is derived, not stored directly Bill Aggregate Invariants: - Bill minimum and maximum amounts must be positive - Maximum amount must be greater than or equal to minimum amount - Bill due dates must be valid date patterns - Bill matches must reference valid transactions Rule Aggregate Invariants: - Rule must have at least one trigger condition - Rule must have at least one action - Rule triggers and actions must be compatible types - Rule execution order must be positive integer Piggy Bank Aggregate Invariants: - Target amount must be positive - Current saved amount cannot be negative - Current saved amount cannot exceed target amount - Must reference an existing asset account owned by the user Cross-Aggregate Invariants: - Account references in transactions must exist - Category assignments must reference valid categories - Currency references must be valid ISO 4217 codes - User ownership must be consistent across all aggregates Sources \u00b6 \"Firefly III Data Model\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/accounts/ \u2014 retrieved 2025-01-09 \"Firefly III Transaction Rules\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/transactions/ \u2014 retrieved 2025-01-09","title":"Aggregates & Invariants"},{"location":"domain/aggregates/#aggregates","text":"Aggregate Root Entities/Value Objects Invariants Source Account Account Type, Account Balance, Account Meta Account balance must reflect sum of all transactions; Account type cannot change once set \"Firefly III Accounts\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/accounts/ \u2014 retrieved 2025-01-09 Transaction Group Transaction, Transaction Journal, Source/Destination Accounts Transaction amounts must balance (double-entry); All transactions in group occur on same date \"Firefly III Transactions\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/transactions/ \u2014 retrieved 2025-01-09 Budget Budget Limit, Budget Period, Available Amount Budget limits cannot be negative; Spent amount cannot exceed available amount (warning only) \"Firefly III Budgets\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/budgets/ \u2014 retrieved 2025-01-09 Bill Bill Match, Expected Amount, Due Date, Payment History Bill amount must be positive; Due dates must be in future when created \"Firefly III Bills\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/bills/ \u2014 retrieved 2025-01-09 Rule Rule Trigger, Rule Action, Rule Condition Rule must have at least one trigger and one action; Actions must be valid for trigger type \"Firefly III Rules\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/rules/ \u2014 retrieved 2025-01-09 Piggy Bank Target Amount, Current Amount, Savings Goal, Account Reference Target amount must be positive; Saved amount cannot exceed target; Must reference valid asset account \"Firefly III Piggy Banks\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/piggy-banks/ \u2014 retrieved 2025-01-09 User User Preferences, User Role, Account Ownership User must own all accounts they access; Preferences must be valid key-value pairs \"Firefly III Administration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/administration/ \u2014 retrieved 2025-01-09","title":"Aggregates"},{"location":"domain/aggregates/#invariants","text":"Account Aggregate Invariants: - Account balance must always equal the sum of all associated transaction amounts - Account type (asset, expense, revenue, liability) cannot be changed once set - Account currency cannot be changed if transactions exist - Account must have a unique name within account type for the user Transaction Group Aggregate Invariants: - All transactions within a group must occur on the same date - Total debits must equal total credits (double-entry bookkeeping) - Source and destination accounts must be different for each transaction - Transaction amounts must be positive values - Split transactions must reference the same source/destination accounts Budget Aggregate Invariants: - Budget amount must be positive or zero - Budget period dates must be valid (start before end) - Only one active budget per category per period - Spent amount calculation is derived, not stored directly Bill Aggregate Invariants: - Bill minimum and maximum amounts must be positive - Maximum amount must be greater than or equal to minimum amount - Bill due dates must be valid date patterns - Bill matches must reference valid transactions Rule Aggregate Invariants: - Rule must have at least one trigger condition - Rule must have at least one action - Rule triggers and actions must be compatible types - Rule execution order must be positive integer Piggy Bank Aggregate Invariants: - Target amount must be positive - Current saved amount cannot be negative - Current saved amount cannot exceed target amount - Must reference an existing asset account owned by the user Cross-Aggregate Invariants: - Account references in transactions must exist - Category assignments must reference valid categories - Currency references must be valid ISO 4217 codes - User ownership must be consistent across all aggregates","title":"Invariants"},{"location":"domain/aggregates/#sources","text":"\"Firefly III Data Model\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/accounts/ \u2014 retrieved 2025-01-09 \"Firefly III Transaction Rules\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/transactions/ \u2014 retrieved 2025-01-09","title":"Sources"},{"location":"domain/anti-corruption-layer/","text":"Purpose: Document translation boundaries that protect domain integrity. Contents - ACL Implementations - Translation Patterns - Boundary Protection - Sources ACL Implementations \u00b6 Data Import ACL: Protects internal transaction model from external bank format variations. External Format Internal Model Translation Responsibility Source CSV Bank Export Transaction Group CSV mapper validates and transforms field mappings \"Firefly III Data Import\" \u2014 https://docs.firefly-iii.org/how-to/data-importer/ \u2014 retrieved 2025-01-09 OFX Files Transaction Journal OFX parser extracts transactions and accounts \"Firefly III Data Import\" \u2014 https://docs.firefly-iii.org/how-to/data-importer/ \u2014 retrieved 2025-01-09 Nordigen API Account/Transaction API adapter handles pagination and rate limiting \"Firefly III Data Import\" \u2014 https://docs.firefly-iii.org/how-to/data-importer/ \u2014 retrieved 2025-01-09 Spectre API Financial Data API client manages authentication and data transformation \"Firefly III Data Import\" \u2014 https://docs.firefly-iii.org/how-to/data-importer/ \u2014 retrieved 2025-01-09 API Presentation ACL: Shields internal domain models from REST API concerns. Domain Aggregate API Resource Translation Layer Source Transaction Group TransactionResource Laravel Resource with field mapping \"Firefly III API\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/api/ \u2014 retrieved 2025-01-09 Account AccountResource Account type enumeration to string conversion \"Firefly III API\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/api/ \u2014 retrieved 2025-01-09 Budget BudgetResource Period calculation and amount formatting \"Firefly III API\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/api/ \u2014 retrieved 2025-01-09 Bill BillResource Pattern matching rules to API representation \"Firefly III API\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/api/ \u2014 retrieved 2025-01-09 Database Persistence ACL: Protects domain objects from database schema concerns. Domain Model Database Schema ORM Mapping Source Money Value Object amount + currency_code columns Laravel Eloquent casting \"Firefly III Database\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 Account Hierarchy accounts table with type enum Single table inheritance pattern \"Firefly III Database\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 Transaction Group transactions + transaction_journals tables One-to-many relationship mapping \"Firefly III Database\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 Rule Logic rules + rule_triggers + rule_actions tables Polymorphic associations \"Firefly III Database\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 Translation Patterns \u00b6 Import Translation Pipeline: 1. Format Detection : Identify file type and structure 2. Schema Mapping : Map external fields to internal concepts 3. Validation : Ensure data meets domain invariants 4. Transformation : Convert to domain objects 5. Persistence : Save through domain repositories API Translation Patterns: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 // Example: Transaction Resource transformation class TransactionResource extends JsonResource { public function toArray($request) { return [ 'id' => $this->id, 'type' => $this->transaction_type->type, // Enum to string 'attributes' => [ 'amount' => $this->amount->value, // Money object to string 'currency_code' => $this->amount->currency_code, 'description' => $this->description, 'date' => $this->date->format('Y-m-d'), // Date object to ISO ] ]; } } Database Translation Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 // Money Value Object casting class Transaction extends Model { protected $casts = [ 'amount' => MoneyValueObject::class, 'date' => 'date', ]; } // Account type enumeration class Account extends Model { public function getTypeAttribute($value) { return AccountType::from($value); } } Boundary Protection \u00b6 Import Boundary Guards: - Field Validation : All imported fields validated against domain rules - Account Resolution : External account names mapped to internal accounts - Currency Handling : Foreign currencies converted using exchange rates - Duplicate Detection : Prevent duplicate transaction imports API Boundary Guards: - Input Validation : Request data validated before domain operations - Output Sanitization : Sensitive data filtered from API responses - Rate Limiting : Protect against API abuse - Authentication : Ensure user can only access owned data Database Boundary Guards: - Query Scoping : Automatic user-based data filtering - Migration Safety : Database schema changes preserve data integrity - Constraint Enforcement : Foreign key and check constraints prevent invalid data - Audit Logging : Track data modifications for compliance Error Translation: - Domain exceptions mapped to appropriate HTTP status codes - Database constraint violations translated to user-friendly messages - Import errors provide actionable feedback for data correction - API errors follow consistent JSON:API error format Integration Testing \u00b6 ACL Validation: - Test external format changes don't break internal models - Verify API responses remain stable despite domain changes - Ensure database migrations preserve ACL functionality - Validate error handling across all translation boundaries Sources \u00b6 \"Firefly III Data Import Architecture\" \u2014 https://docs.firefly-iii.org/how-to/data-importer/ \u2014 retrieved 2025-01-09 \"Firefly III API Documentation\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/api/ \u2014 retrieved 2025-01-09","title":"Anti-Corruption Layer"},{"location":"domain/anti-corruption-layer/#acl-implementations","text":"Data Import ACL: Protects internal transaction model from external bank format variations. External Format Internal Model Translation Responsibility Source CSV Bank Export Transaction Group CSV mapper validates and transforms field mappings \"Firefly III Data Import\" \u2014 https://docs.firefly-iii.org/how-to/data-importer/ \u2014 retrieved 2025-01-09 OFX Files Transaction Journal OFX parser extracts transactions and accounts \"Firefly III Data Import\" \u2014 https://docs.firefly-iii.org/how-to/data-importer/ \u2014 retrieved 2025-01-09 Nordigen API Account/Transaction API adapter handles pagination and rate limiting \"Firefly III Data Import\" \u2014 https://docs.firefly-iii.org/how-to/data-importer/ \u2014 retrieved 2025-01-09 Spectre API Financial Data API client manages authentication and data transformation \"Firefly III Data Import\" \u2014 https://docs.firefly-iii.org/how-to/data-importer/ \u2014 retrieved 2025-01-09 API Presentation ACL: Shields internal domain models from REST API concerns. Domain Aggregate API Resource Translation Layer Source Transaction Group TransactionResource Laravel Resource with field mapping \"Firefly III API\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/api/ \u2014 retrieved 2025-01-09 Account AccountResource Account type enumeration to string conversion \"Firefly III API\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/api/ \u2014 retrieved 2025-01-09 Budget BudgetResource Period calculation and amount formatting \"Firefly III API\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/api/ \u2014 retrieved 2025-01-09 Bill BillResource Pattern matching rules to API representation \"Firefly III API\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/api/ \u2014 retrieved 2025-01-09 Database Persistence ACL: Protects domain objects from database schema concerns. Domain Model Database Schema ORM Mapping Source Money Value Object amount + currency_code columns Laravel Eloquent casting \"Firefly III Database\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 Account Hierarchy accounts table with type enum Single table inheritance pattern \"Firefly III Database\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 Transaction Group transactions + transaction_journals tables One-to-many relationship mapping \"Firefly III Database\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 Rule Logic rules + rule_triggers + rule_actions tables Polymorphic associations \"Firefly III Database\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09","title":"ACL Implementations"},{"location":"domain/anti-corruption-layer/#translation-patterns","text":"Import Translation Pipeline: 1. Format Detection : Identify file type and structure 2. Schema Mapping : Map external fields to internal concepts 3. Validation : Ensure data meets domain invariants 4. Transformation : Convert to domain objects 5. Persistence : Save through domain repositories API Translation Patterns: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 // Example: Transaction Resource transformation class TransactionResource extends JsonResource { public function toArray($request) { return [ 'id' => $this->id, 'type' => $this->transaction_type->type, // Enum to string 'attributes' => [ 'amount' => $this->amount->value, // Money object to string 'currency_code' => $this->amount->currency_code, 'description' => $this->description, 'date' => $this->date->format('Y-m-d'), // Date object to ISO ] ]; } } Database Translation Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 // Money Value Object casting class Transaction extends Model { protected $casts = [ 'amount' => MoneyValueObject::class, 'date' => 'date', ]; } // Account type enumeration class Account extends Model { public function getTypeAttribute($value) { return AccountType::from($value); } }","title":"Translation Patterns"},{"location":"domain/anti-corruption-layer/#boundary-protection","text":"Import Boundary Guards: - Field Validation : All imported fields validated against domain rules - Account Resolution : External account names mapped to internal accounts - Currency Handling : Foreign currencies converted using exchange rates - Duplicate Detection : Prevent duplicate transaction imports API Boundary Guards: - Input Validation : Request data validated before domain operations - Output Sanitization : Sensitive data filtered from API responses - Rate Limiting : Protect against API abuse - Authentication : Ensure user can only access owned data Database Boundary Guards: - Query Scoping : Automatic user-based data filtering - Migration Safety : Database schema changes preserve data integrity - Constraint Enforcement : Foreign key and check constraints prevent invalid data - Audit Logging : Track data modifications for compliance Error Translation: - Domain exceptions mapped to appropriate HTTP status codes - Database constraint violations translated to user-friendly messages - Import errors provide actionable feedback for data correction - API errors follow consistent JSON:API error format","title":"Boundary Protection"},{"location":"domain/anti-corruption-layer/#integration-testing","text":"ACL Validation: - Test external format changes don't break internal models - Verify API responses remain stable despite domain changes - Ensure database migrations preserve ACL functionality - Validate error handling across all translation boundaries","title":"Integration Testing"},{"location":"domain/anti-corruption-layer/#sources","text":"\"Firefly III Data Import Architecture\" \u2014 https://docs.firefly-iii.org/how-to/data-importer/ \u2014 retrieved 2025-01-09 \"Firefly III API Documentation\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/api/ \u2014 retrieved 2025-01-09","title":"Sources"},{"location":"domain/bounded-contexts/","text":"Purpose: Identify contexts to avoid model bleed. Contents - Contexts - Shared Kernel / ACL - Sources Contexts \u00b6 Context Responsibility Key Models/Terms Upstream Artifact Source Account Management Manage financial accounts and their properties Account, Asset Account, Liability, Account Type Accounts module \"Firefly III Accounts\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/accounts/ \u2014 retrieved 2025-01-09 Transaction Processing Record and categorize financial transactions Transaction, Withdrawal, Deposit, Transfer, Split Transactions module \"Firefly III Transactions\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/transactions/ \u2014 retrieved 2025-01-09 Budget Management Plan and track spending against budgets Budget, Budget Limit, Spending Period, Available Amount Budgets module \"Firefly III Budgets\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/budgets/ \u2014 retrieved 2025-01-09 Bill Tracking Manage recurring bills and payment expectations Bill, Expected Payment, Bill Match, Due Date Bills module \"Firefly III Bills\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/bills/ \u2014 retrieved 2025-01-09 Categorization Organize transactions with categories and tags Category, Tag, Category Assignment, Tagging Categories & Tags modules \"Firefly III Categories\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/categories/ \u2014 retrieved 2025-01-09 Rule Engine Automate transaction processing with rules Rule, Rule Trigger, Rule Action, Condition Rules module \"Firefly III Rules\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/rules/ \u2014 retrieved 2025-01-09 Savings Goals Track progress toward financial goals Piggy Bank, Target Amount, Saved Amount, Goal Period Piggy Banks module \"Firefly III Piggy Banks\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/piggy-banks/ \u2014 retrieved 2025-01-09 Data Import Import financial data from external sources Import Job, CSV Mapping, Bank Import, Import Configuration Import module \"Firefly III Data Import\" \u2014 https://docs.firefly-iii.org/how-to/data-importer/ \u2014 retrieved 2025-01-09 Reporting Generate financial reports and visualizations Report, Chart, Financial Summary, Time Period Reports module \"Firefly III Reports\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/reports/ \u2014 retrieved 2025-01-09 Currency Management Handle multiple currencies and exchange rates Currency, Exchange Rate, Currency Conversion Multi-currency support \"Firefly III Currencies\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/currencies/ \u2014 retrieved 2025-01-09 User Management Manage user accounts and preferences User, User Preference, Role, Permission User/Auth system \"Firefly III Administration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/administration/ \u2014 retrieved 2025-01-09 Shared Kernel / ACL \u00b6 Shared Kernel (concepts used across contexts): - Money Amount : Monetary value with currency information - Date Range : Time periods used in budgets, reports, and bills - Account Reference : Lightweight account identifier used across contexts - Transaction Reference : Basic transaction information for cross-context operations Anti-Corruption Layer (ACL) boundaries: - External Data Sources : Import context translates bank formats to internal transaction model - Reporting Engine : Transforms internal data models into presentation-friendly formats - API Layer : Converts internal domain models to REST API representations - Database Schema : ORM layer translates between domain objects and database tables Context Relationships: - Transaction Processing \u2194 Account Management : Transactions must reference valid accounts - Budget Management \u2194 Transaction Processing : Budget tracking requires transaction categorization - Bill Tracking \u2194 Transaction Processing : Bill matching against actual transactions - Rule Engine \u2194 Transaction Processing : Rules process and modify transactions - Categorization \u2194 Transaction Processing : Categories and tags applied to transactions Integration Points: - Account balances calculated from transaction history - Budget progress derived from categorized transactions - Bill matching based on transaction patterns - Reports aggregate data across multiple contexts Sources \u00b6 \"Firefly III Features Overview\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/ \u2014 retrieved 2025-01-09 \"Firefly III Architecture\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/accounts/ \u2014 retrieved 2025-01-09","title":"Bounded Contexts"},{"location":"domain/bounded-contexts/#contexts","text":"Context Responsibility Key Models/Terms Upstream Artifact Source Account Management Manage financial accounts and their properties Account, Asset Account, Liability, Account Type Accounts module \"Firefly III Accounts\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/accounts/ \u2014 retrieved 2025-01-09 Transaction Processing Record and categorize financial transactions Transaction, Withdrawal, Deposit, Transfer, Split Transactions module \"Firefly III Transactions\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/transactions/ \u2014 retrieved 2025-01-09 Budget Management Plan and track spending against budgets Budget, Budget Limit, Spending Period, Available Amount Budgets module \"Firefly III Budgets\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/budgets/ \u2014 retrieved 2025-01-09 Bill Tracking Manage recurring bills and payment expectations Bill, Expected Payment, Bill Match, Due Date Bills module \"Firefly III Bills\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/bills/ \u2014 retrieved 2025-01-09 Categorization Organize transactions with categories and tags Category, Tag, Category Assignment, Tagging Categories & Tags modules \"Firefly III Categories\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/categories/ \u2014 retrieved 2025-01-09 Rule Engine Automate transaction processing with rules Rule, Rule Trigger, Rule Action, Condition Rules module \"Firefly III Rules\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/rules/ \u2014 retrieved 2025-01-09 Savings Goals Track progress toward financial goals Piggy Bank, Target Amount, Saved Amount, Goal Period Piggy Banks module \"Firefly III Piggy Banks\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/piggy-banks/ \u2014 retrieved 2025-01-09 Data Import Import financial data from external sources Import Job, CSV Mapping, Bank Import, Import Configuration Import module \"Firefly III Data Import\" \u2014 https://docs.firefly-iii.org/how-to/data-importer/ \u2014 retrieved 2025-01-09 Reporting Generate financial reports and visualizations Report, Chart, Financial Summary, Time Period Reports module \"Firefly III Reports\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/reports/ \u2014 retrieved 2025-01-09 Currency Management Handle multiple currencies and exchange rates Currency, Exchange Rate, Currency Conversion Multi-currency support \"Firefly III Currencies\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/currencies/ \u2014 retrieved 2025-01-09 User Management Manage user accounts and preferences User, User Preference, Role, Permission User/Auth system \"Firefly III Administration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/administration/ \u2014 retrieved 2025-01-09","title":"Contexts"},{"location":"domain/bounded-contexts/#shared-kernel-acl","text":"Shared Kernel (concepts used across contexts): - Money Amount : Monetary value with currency information - Date Range : Time periods used in budgets, reports, and bills - Account Reference : Lightweight account identifier used across contexts - Transaction Reference : Basic transaction information for cross-context operations Anti-Corruption Layer (ACL) boundaries: - External Data Sources : Import context translates bank formats to internal transaction model - Reporting Engine : Transforms internal data models into presentation-friendly formats - API Layer : Converts internal domain models to REST API representations - Database Schema : ORM layer translates between domain objects and database tables Context Relationships: - Transaction Processing \u2194 Account Management : Transactions must reference valid accounts - Budget Management \u2194 Transaction Processing : Budget tracking requires transaction categorization - Bill Tracking \u2194 Transaction Processing : Bill matching against actual transactions - Rule Engine \u2194 Transaction Processing : Rules process and modify transactions - Categorization \u2194 Transaction Processing : Categories and tags applied to transactions Integration Points: - Account balances calculated from transaction history - Budget progress derived from categorized transactions - Bill matching based on transaction patterns - Reports aggregate data across multiple contexts","title":"Shared Kernel / ACL"},{"location":"domain/bounded-contexts/#sources","text":"\"Firefly III Features Overview\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/ \u2014 retrieved 2025-01-09 \"Firefly III Architecture\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/accounts/ \u2014 retrieved 2025-01-09","title":"Sources"},{"location":"domain/context-map/","text":"Purpose: Visualize dependencies and translation boundaries. Contents - Map - Notes - Sources Map \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 flowchart LR AC[Account Management] TX[Transaction Processing] BG[Budget Management] BL[Bill Tracking] CT[Categorization] RE[Rule Engine] SG[Savings Goals] DI[Data Import] RP[Reporting] CU[Currency Management] UM[User Management] %% Core relationships TX --> AC : validates accounts TX --> CT : applies categories/tags TX --> CU : handles currencies %% Processing flows RE --> TX : modifies transactions BG --> TX : tracks spending BL --> TX : matches bills %% Derived data RP --> TX : aggregates data RP --> AC : account summaries RP --> BG : budget reports %% Import/Export DI --> TX : creates transactions DI --> AC : validates accounts %% User context UM --> AC : owns accounts UM --> TX : user transactions UM --> BG : user budgets %% Goals tracking SG --> AC : asset accounts only SG --> TX : tracks contributions Notes \u00b6 Upstream Integration Points: - Account Management \u2194 Transaction Processing : All transactions must reference valid accounts; account balances are derived from transaction history - Rule Engine \u2192 Transaction Processing : Rules automatically categorize and modify transactions based on patterns - Budget Management \u2190 Transaction Processing : Budget progress calculated from categorized transactions - Bill Tracking \u2190 Transaction Processing : Bills are matched against transaction patterns using amount and description - Reporting \u2190 Multiple Contexts : Reports aggregate data from transactions, accounts, budgets, and bills Anti-Corruption Layer (ACL) Boundaries: - Data Import Context : Translates external bank formats (CSV, OFX, MT940) into internal transaction models - Reporting Context : Transforms domain models into chart-friendly data structures - API Layer : Converts internal aggregates to RESTful JSON representations - Database Layer : Laravel ORM provides abstraction between domain objects and database schema Shared Kernel Components: - Money Value Object : Used across all contexts for monetary amounts with currency - Date Range Value Object : Common time period representation for budgets and reports - User Identity : Consistent user reference across all user-owned aggregates Context Dependencies: - High Coupling : Transaction Processing is central to most other contexts - Medium Coupling : Account Management provides foundational account references - Low Coupling : Reporting and Data Import are mostly one-way dependencies - Isolated : User Management has minimal coupling except for ownership Translation Responsibilities: - Import Context handles all external format variations - Reporting Context manages presentation layer transformations - Each context maintains its own validation rules and business logic - Cross-context communication happens through domain events where possible Sources \u00b6 \"Firefly III Architecture Overview\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/ \u2014 retrieved 2025-01-09 \"Firefly III Data Flow\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/transactions/ \u2014 retrieved 2025-01-09","title":"Context Map"},{"location":"domain/context-map/#map","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 flowchart LR AC[Account Management] TX[Transaction Processing] BG[Budget Management] BL[Bill Tracking] CT[Categorization] RE[Rule Engine] SG[Savings Goals] DI[Data Import] RP[Reporting] CU[Currency Management] UM[User Management] %% Core relationships TX --> AC : validates accounts TX --> CT : applies categories/tags TX --> CU : handles currencies %% Processing flows RE --> TX : modifies transactions BG --> TX : tracks spending BL --> TX : matches bills %% Derived data RP --> TX : aggregates data RP --> AC : account summaries RP --> BG : budget reports %% Import/Export DI --> TX : creates transactions DI --> AC : validates accounts %% User context UM --> AC : owns accounts UM --> TX : user transactions UM --> BG : user budgets %% Goals tracking SG --> AC : asset accounts only SG --> TX : tracks contributions","title":"Map"},{"location":"domain/context-map/#notes","text":"Upstream Integration Points: - Account Management \u2194 Transaction Processing : All transactions must reference valid accounts; account balances are derived from transaction history - Rule Engine \u2192 Transaction Processing : Rules automatically categorize and modify transactions based on patterns - Budget Management \u2190 Transaction Processing : Budget progress calculated from categorized transactions - Bill Tracking \u2190 Transaction Processing : Bills are matched against transaction patterns using amount and description - Reporting \u2190 Multiple Contexts : Reports aggregate data from transactions, accounts, budgets, and bills Anti-Corruption Layer (ACL) Boundaries: - Data Import Context : Translates external bank formats (CSV, OFX, MT940) into internal transaction models - Reporting Context : Transforms domain models into chart-friendly data structures - API Layer : Converts internal aggregates to RESTful JSON representations - Database Layer : Laravel ORM provides abstraction between domain objects and database schema Shared Kernel Components: - Money Value Object : Used across all contexts for monetary amounts with currency - Date Range Value Object : Common time period representation for budgets and reports - User Identity : Consistent user reference across all user-owned aggregates Context Dependencies: - High Coupling : Transaction Processing is central to most other contexts - Medium Coupling : Account Management provides foundational account references - Low Coupling : Reporting and Data Import are mostly one-way dependencies - Isolated : User Management has minimal coupling except for ownership Translation Responsibilities: - Import Context handles all external format variations - Reporting Context manages presentation layer transformations - Each context maintains its own validation rules and business logic - Cross-context communication happens through domain events where possible","title":"Notes"},{"location":"domain/context-map/#sources","text":"\"Firefly III Architecture Overview\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/ \u2014 retrieved 2025-01-09 \"Firefly III Data Flow\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/transactions/ \u2014 retrieved 2025-01-09","title":"Sources"},{"location":"domain/domain-events/","text":"Purpose: Clarify observable domain signals. Contents - Events - Delivery/Contracts - Sources Events \u00b6 Name When it fires Payload essentials Consumers Source TransactionCreated New transaction is successfully recorded Transaction ID, amounts, accounts, date, user Rules engine, budget tracker, reports \"Firefly III Rules\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/rules/ \u2014 retrieved 2025-01-09 TransactionUpdated Existing transaction is modified Transaction ID, changed fields, old/new values Rules engine, budget recalculation \"Firefly III Rules\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/rules/ \u2014 retrieved 2025-01-09 TransactionDeleted Transaction is removed from system Transaction ID, original amount, accounts affected Budget adjustment, account balance update \"Firefly III Rules\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/rules/ \u2014 retrieved 2025-01-09 BudgetLimitExceeded Spending exceeds budget limit for period Budget ID, limit amount, spent amount, overage Email notifications, dashboard alerts \"Firefly III Budgets\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/budgets/ \u2014 retrieved 2025-01-09 BillMatched Transaction matches a bill pattern Bill ID, transaction ID, match confidence Bill tracking, payment history \"Firefly III Bills\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/bills/ \u2014 retrieved 2025-01-09 RuleExecuted Automatic rule processes a transaction Rule ID, transaction ID, actions performed Audit log, user notifications \"Firefly III Rules\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/rules/ \u2014 retrieved 2025-01-09 AccountBalanceChanged Account balance updates due to transaction Account ID, old balance, new balance, transaction Account reconciliation, alerts \"Firefly III Accounts\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/accounts/ \u2014 retrieved 2025-01-09 PiggyBankGoalReached Savings goal target amount is achieved Piggy bank ID, target amount, achievement date Goal completion notifications \"Firefly III Piggy Banks\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/piggy-banks/ \u2014 retrieved 2025-01-09 DataImportCompleted External data import finishes processing Import job ID, records processed, errors count User notifications, import status \"Firefly III Data Import\" \u2014 https://docs.firefly-iii.org/how-to/data-importer/ \u2014 retrieved 2025-01-09 RecurringTransactionExecuted Scheduled recurring transaction is created Recurring transaction ID, new transaction ID Transaction processing, scheduling \"Firefly III Recurring\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/recurring/ \u2014 retrieved 2025-01-09 Delivery/Contracts \u00b6 Event Delivery Mechanisms: - Laravel Events : Internal event system for real-time processing - Webhooks : HTTP callbacks for external system integration (if configured) - Audit Log : Database storage for compliance and debugging - Email Notifications : User-configurable email alerts - API Events : RESTful endpoints for polling event history Event Structure (internal Laravel events): 1 2 3 4 5 6 7 8 9 10 11 12 class TransactionCreated { public $transaction_id; public $user_id; public $account_from; public $account_to; public $amount; public $currency_code; public $description; public $date; public $created_at; } Webhook Payload (if configured): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 { \"event\" : \"transaction.created\" , \"timestamp\" : \"2025-01-09T10:30:00Z\" , \"user_id\" : 123 , \"data\" : { \"transaction_id\" : 456 , \"amount\" : \"150.00\" , \"currency\" : \"EUR\" , \"description\" : \"Grocery shopping\" , \"date\" : \"2025-01-09\" , \"source_account\" : \"Checking Account\" , \"destination_account\" : \"Supermarket\" } } Event Ordering and Consistency: - Events are fired synchronously during transaction processing - Rule execution events follow transaction events - Budget and bill events are triggered after transaction persistence - Import events are fired after batch processing completion Retry and Reliability: - Internal events use Laravel's database queue for reliability - Webhook delivery includes retry logic with exponential backoff - Failed webhook deliveries are logged for manual retry - Event sourcing is not implemented; events are notifications only Idempotency: - Events include unique identifiers for deduplication - Webhook endpoints should handle duplicate deliveries gracefully - Event replaying is not supported; events are fire-and-forget Sources \u00b6 \"Firefly III Rules Documentation\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/rules/ \u2014 retrieved 2025-01-09 \"Firefly III Webhooks\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/advanced-concepts/webhooks/ \u2014 retrieved 2025-01-09","title":"Domain Events"},{"location":"domain/domain-events/#events","text":"Name When it fires Payload essentials Consumers Source TransactionCreated New transaction is successfully recorded Transaction ID, amounts, accounts, date, user Rules engine, budget tracker, reports \"Firefly III Rules\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/rules/ \u2014 retrieved 2025-01-09 TransactionUpdated Existing transaction is modified Transaction ID, changed fields, old/new values Rules engine, budget recalculation \"Firefly III Rules\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/rules/ \u2014 retrieved 2025-01-09 TransactionDeleted Transaction is removed from system Transaction ID, original amount, accounts affected Budget adjustment, account balance update \"Firefly III Rules\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/rules/ \u2014 retrieved 2025-01-09 BudgetLimitExceeded Spending exceeds budget limit for period Budget ID, limit amount, spent amount, overage Email notifications, dashboard alerts \"Firefly III Budgets\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/budgets/ \u2014 retrieved 2025-01-09 BillMatched Transaction matches a bill pattern Bill ID, transaction ID, match confidence Bill tracking, payment history \"Firefly III Bills\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/bills/ \u2014 retrieved 2025-01-09 RuleExecuted Automatic rule processes a transaction Rule ID, transaction ID, actions performed Audit log, user notifications \"Firefly III Rules\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/rules/ \u2014 retrieved 2025-01-09 AccountBalanceChanged Account balance updates due to transaction Account ID, old balance, new balance, transaction Account reconciliation, alerts \"Firefly III Accounts\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/accounts/ \u2014 retrieved 2025-01-09 PiggyBankGoalReached Savings goal target amount is achieved Piggy bank ID, target amount, achievement date Goal completion notifications \"Firefly III Piggy Banks\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/piggy-banks/ \u2014 retrieved 2025-01-09 DataImportCompleted External data import finishes processing Import job ID, records processed, errors count User notifications, import status \"Firefly III Data Import\" \u2014 https://docs.firefly-iii.org/how-to/data-importer/ \u2014 retrieved 2025-01-09 RecurringTransactionExecuted Scheduled recurring transaction is created Recurring transaction ID, new transaction ID Transaction processing, scheduling \"Firefly III Recurring\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/recurring/ \u2014 retrieved 2025-01-09","title":"Events"},{"location":"domain/domain-events/#deliverycontracts","text":"Event Delivery Mechanisms: - Laravel Events : Internal event system for real-time processing - Webhooks : HTTP callbacks for external system integration (if configured) - Audit Log : Database storage for compliance and debugging - Email Notifications : User-configurable email alerts - API Events : RESTful endpoints for polling event history Event Structure (internal Laravel events): 1 2 3 4 5 6 7 8 9 10 11 12 class TransactionCreated { public $transaction_id; public $user_id; public $account_from; public $account_to; public $amount; public $currency_code; public $description; public $date; public $created_at; } Webhook Payload (if configured): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 { \"event\" : \"transaction.created\" , \"timestamp\" : \"2025-01-09T10:30:00Z\" , \"user_id\" : 123 , \"data\" : { \"transaction_id\" : 456 , \"amount\" : \"150.00\" , \"currency\" : \"EUR\" , \"description\" : \"Grocery shopping\" , \"date\" : \"2025-01-09\" , \"source_account\" : \"Checking Account\" , \"destination_account\" : \"Supermarket\" } } Event Ordering and Consistency: - Events are fired synchronously during transaction processing - Rule execution events follow transaction events - Budget and bill events are triggered after transaction persistence - Import events are fired after batch processing completion Retry and Reliability: - Internal events use Laravel's database queue for reliability - Webhook delivery includes retry logic with exponential backoff - Failed webhook deliveries are logged for manual retry - Event sourcing is not implemented; events are notifications only Idempotency: - Events include unique identifiers for deduplication - Webhook endpoints should handle duplicate deliveries gracefully - Event replaying is not supported; events are fire-and-forget","title":"Delivery/Contracts"},{"location":"domain/domain-events/#sources","text":"\"Firefly III Rules Documentation\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/rules/ \u2014 retrieved 2025-01-09 \"Firefly III Webhooks\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/advanced-concepts/webhooks/ \u2014 retrieved 2025-01-09","title":"Sources"},{"location":"domain/repositories-and-adapters/","text":"Purpose: Document data access and external integration patterns. Contents - Repository Patterns - Adapter Implementations - Data Access Strategy - Sources Repository Patterns \u00b6 Domain Repositories (Interfaces): Repository Aggregate Key Methods Purpose Source AccountRepositoryInterface Account findByUser(), findByType(), findActive() Account discovery and validation \"Firefly III Account Management\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/accounts/ \u2014 retrieved 2025-01-09 TransactionRepositoryInterface Transaction Group findByDateRange(), findByCategory(), store() Transaction persistence and querying \"Firefly III Transaction System\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/transactions/ \u2014 retrieved 2025-01-09 BudgetRepositoryInterface Budget findByPeriod(), calculateSpent(), updateLimit() Budget tracking and limits \"Firefly III Budget System\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/budgets/ \u2014 retrieved 2025-01-09 BillRepositoryInterface Bill findDue(), matchTransaction(), updatePayment() Bill management and matching \"Firefly III Bill Tracking\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/bills/ \u2014 retrieved 2025-01-09 RuleRepositoryInterface Rule findActive(), executeRule(), findByTrigger() Rule engine operations \"Firefly III Rules\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/rules/ \u2014 retrieved 2025-01-09 Implementation Strategy: - Repositories define intent-based methods reflecting domain operations - No generic CRUD leakage to application layer - Repository implementations handle database specifics - Laravel Eloquent ORM used for concrete implementations Example Repository Interface: 1 2 3 4 5 6 7 8 interface TransactionRepositoryInterface { public function findByDateRange(DateRange $range, User $user): Collection; public function findUncategorized(User $user): Collection; public function store(TransactionGroup $group): TransactionGroup; public function findForBudgetCalculation(Budget $budget, DateRange $period): Collection; public function getTotalsByCategory(User $user, DateRange $range): array; } Adapter Implementations \u00b6 External Service Adapters: Service Adapter Purpose Integration Pattern Source Bank APIs NordigenAdapter Fetch account data and transactions OAuth2 + REST API \"Firefly III Data Import\" \u2014 https://docs.firefly-iii.org/how-to/data-importer/ \u2014 retrieved 2025-01-09 Email Service MailgunAdapter Send notifications and reports HTTP API + webhooks \"Firefly III Email\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 Exchange Rates CurrencyAPIAdapter Real-time currency conversion REST API + caching \"Firefly III Currencies\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/currencies/ \u2014 retrieved 2025-01-09 File Storage S3StorageAdapter Store user uploads and exports AWS S3 compatible API \"Firefly III File Storage\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 Infrastructure Adapters: Component Adapter Technology Configuration Source Cache RedisAdapter Redis Connection pooling, TTL management \"Firefly III Performance\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 Queue DatabaseQueueAdapter MySQL/PostgreSQL Job serialization, retry logic \"Firefly III Background Jobs\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 Session RedisSessionAdapter Redis Session persistence, clustering \"Firefly III Sessions\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 Logging FileLogAdapter Local filesystem Log rotation, structured format \"Firefly III Logging\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 Adapter Pattern Example: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class NordigenBankAdapter implements BankDataSourceInterface { public function fetchAccounts(string $institutionId): Collection { $response = $this->httpClient->get(\"/accounts/{$institutionId}\"); return $response->json()['accounts'] ->map(fn($data) => $this->transformToAccount($data)); } private function transformToAccount(array $data): Account { // Transform external format to domain model return Account::create([ 'name' => $data['name'], 'type' => $this->mapAccountType($data['type']), 'currency' => Currency::fromCode($data['currency']) ]); } } Data Access Strategy \u00b6 Read Model Optimization: - Denormalized Views : Pre-calculated budget summaries and account balances - Report Aggregates : Monthly/yearly financial summaries for performance - Search Indexes : Full-text search on transaction descriptions and categories - Caching Layer : Redis cache for frequently accessed account and transaction data Write Model Consistency: - Transaction Boundaries : Database transactions ensure consistency across aggregates - Event Publishing : Domain events published after successful persistence - Optimistic Locking : Version fields prevent concurrent modification conflicts - Audit Trail : All modifications logged with user and timestamp Performance Patterns: 1 2 3 4 5 6 7 8 9 10 11 // Eager loading to prevent N+1 queries $transactions = $this->transactionRepository ->findByDateRange($dateRange, $user) ->with(['category', 'budget', 'tags', 'attachments']); // Cached calculations $budgetProgress = Cache::remember( \"budget_progress_{$budget->id}_{$period->hash()}\", 3600, fn() => $this->calculateBudgetProgress($budget, $period) ); Query Optimization: - Database indexes on common query patterns (user_id, date ranges, categories) - Pagination for large result sets - Selective field loading for list views - Background aggregation for expensive calculations Data Consistency Patterns: - Eventual Consistency : Account balances calculated asynchronously for reporting - Strong Consistency : Transaction creation requires immediate balance validation - Compensating Actions : Failed imports can be rolled back through stored metadata - Idempotent Operations : Import jobs can be safely retried without duplicates Integration Testing \u00b6 Repository Testing: - Test intent-based methods against real database - Verify complex queries return expected domain objects - Ensure repository implementations honor domain constraints - Validate performance characteristics of key operations Adapter Testing: - Mock external services for unit tests - Integration tests against real service sandboxes - Circuit breaker behavior during service outages - Retry logic and error handling validation Sources \u00b6 \"Firefly III Architecture\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/ \u2014 retrieved 2025-01-09 \"Firefly III Performance Guide\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09","title":"Repositories & Adapters"},{"location":"domain/repositories-and-adapters/#repository-patterns","text":"Domain Repositories (Interfaces): Repository Aggregate Key Methods Purpose Source AccountRepositoryInterface Account findByUser(), findByType(), findActive() Account discovery and validation \"Firefly III Account Management\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/accounts/ \u2014 retrieved 2025-01-09 TransactionRepositoryInterface Transaction Group findByDateRange(), findByCategory(), store() Transaction persistence and querying \"Firefly III Transaction System\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/transactions/ \u2014 retrieved 2025-01-09 BudgetRepositoryInterface Budget findByPeriod(), calculateSpent(), updateLimit() Budget tracking and limits \"Firefly III Budget System\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/budgets/ \u2014 retrieved 2025-01-09 BillRepositoryInterface Bill findDue(), matchTransaction(), updatePayment() Bill management and matching \"Firefly III Bill Tracking\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/bills/ \u2014 retrieved 2025-01-09 RuleRepositoryInterface Rule findActive(), executeRule(), findByTrigger() Rule engine operations \"Firefly III Rules\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/rules/ \u2014 retrieved 2025-01-09 Implementation Strategy: - Repositories define intent-based methods reflecting domain operations - No generic CRUD leakage to application layer - Repository implementations handle database specifics - Laravel Eloquent ORM used for concrete implementations Example Repository Interface: 1 2 3 4 5 6 7 8 interface TransactionRepositoryInterface { public function findByDateRange(DateRange $range, User $user): Collection; public function findUncategorized(User $user): Collection; public function store(TransactionGroup $group): TransactionGroup; public function findForBudgetCalculation(Budget $budget, DateRange $period): Collection; public function getTotalsByCategory(User $user, DateRange $range): array; }","title":"Repository Patterns"},{"location":"domain/repositories-and-adapters/#adapter-implementations","text":"External Service Adapters: Service Adapter Purpose Integration Pattern Source Bank APIs NordigenAdapter Fetch account data and transactions OAuth2 + REST API \"Firefly III Data Import\" \u2014 https://docs.firefly-iii.org/how-to/data-importer/ \u2014 retrieved 2025-01-09 Email Service MailgunAdapter Send notifications and reports HTTP API + webhooks \"Firefly III Email\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 Exchange Rates CurrencyAPIAdapter Real-time currency conversion REST API + caching \"Firefly III Currencies\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/currencies/ \u2014 retrieved 2025-01-09 File Storage S3StorageAdapter Store user uploads and exports AWS S3 compatible API \"Firefly III File Storage\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 Infrastructure Adapters: Component Adapter Technology Configuration Source Cache RedisAdapter Redis Connection pooling, TTL management \"Firefly III Performance\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 Queue DatabaseQueueAdapter MySQL/PostgreSQL Job serialization, retry logic \"Firefly III Background Jobs\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 Session RedisSessionAdapter Redis Session persistence, clustering \"Firefly III Sessions\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 Logging FileLogAdapter Local filesystem Log rotation, structured format \"Firefly III Logging\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 Adapter Pattern Example: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class NordigenBankAdapter implements BankDataSourceInterface { public function fetchAccounts(string $institutionId): Collection { $response = $this->httpClient->get(\"/accounts/{$institutionId}\"); return $response->json()['accounts'] ->map(fn($data) => $this->transformToAccount($data)); } private function transformToAccount(array $data): Account { // Transform external format to domain model return Account::create([ 'name' => $data['name'], 'type' => $this->mapAccountType($data['type']), 'currency' => Currency::fromCode($data['currency']) ]); } }","title":"Adapter Implementations"},{"location":"domain/repositories-and-adapters/#data-access-strategy","text":"Read Model Optimization: - Denormalized Views : Pre-calculated budget summaries and account balances - Report Aggregates : Monthly/yearly financial summaries for performance - Search Indexes : Full-text search on transaction descriptions and categories - Caching Layer : Redis cache for frequently accessed account and transaction data Write Model Consistency: - Transaction Boundaries : Database transactions ensure consistency across aggregates - Event Publishing : Domain events published after successful persistence - Optimistic Locking : Version fields prevent concurrent modification conflicts - Audit Trail : All modifications logged with user and timestamp Performance Patterns: 1 2 3 4 5 6 7 8 9 10 11 // Eager loading to prevent N+1 queries $transactions = $this->transactionRepository ->findByDateRange($dateRange, $user) ->with(['category', 'budget', 'tags', 'attachments']); // Cached calculations $budgetProgress = Cache::remember( \"budget_progress_{$budget->id}_{$period->hash()}\", 3600, fn() => $this->calculateBudgetProgress($budget, $period) ); Query Optimization: - Database indexes on common query patterns (user_id, date ranges, categories) - Pagination for large result sets - Selective field loading for list views - Background aggregation for expensive calculations Data Consistency Patterns: - Eventual Consistency : Account balances calculated asynchronously for reporting - Strong Consistency : Transaction creation requires immediate balance validation - Compensating Actions : Failed imports can be rolled back through stored metadata - Idempotent Operations : Import jobs can be safely retried without duplicates","title":"Data Access Strategy"},{"location":"domain/repositories-and-adapters/#integration-testing","text":"Repository Testing: - Test intent-based methods against real database - Verify complex queries return expected domain objects - Ensure repository implementations honor domain constraints - Validate performance characteristics of key operations Adapter Testing: - Mock external services for unit tests - Integration tests against real service sandboxes - Circuit breaker behavior during service outages - Retry logic and error handling validation","title":"Integration Testing"},{"location":"domain/repositories-and-adapters/#sources","text":"\"Firefly III Architecture\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/ \u2014 retrieved 2025-01-09 \"Firefly III Performance Guide\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09","title":"Sources"},{"location":"domain/ubiquitous-language/","text":"Purpose: Capture upstream's domain terminology for precise communication. Contents - Glossary - Notes - Sources Glossary \u00b6 Term Definition (short, from upstream) Source Account A financial container that holds money (asset, expense, revenue, liability) \"Firefly III Concepts\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/accounts/ \u2014 retrieved 2025-01-09 Asset Account Account representing money you own (checking, savings, cash) \"Firefly III Concepts\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/accounts/ \u2014 retrieved 2025-01-09 Bill A recurring expense that is expected regularly (rent, utilities) \"Firefly III Concepts\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/bills/ \u2014 retrieved 2025-01-09 Budget A spending limit for a specific category and time period \"Firefly III Concepts\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/budgets/ \u2014 retrieved 2025-01-09 Category A way to group transactions by purpose (groceries, entertainment) \"Firefly III Concepts\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/categories/ \u2014 retrieved 2025-01-09 Deposit Money coming into an asset account from a revenue account \"Firefly III Concepts\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/transactions/ \u2014 retrieved 2025-01-09 Expense Account Account representing places where money is spent (store, landlord) \"Firefly III Concepts\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/accounts/ \u2014 retrieved 2025-01-09 Liability Account representing money you owe (credit card, mortgage) \"Firefly III Concepts\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/accounts/ \u2014 retrieved 2025-01-09 Piggy Bank A virtual savings goal within an asset account \"Firefly III Concepts\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/piggy-banks/ \u2014 retrieved 2025-01-09 Revenue Account Account representing sources of income (employer, client) \"Firefly III Concepts\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/accounts/ \u2014 retrieved 2025-01-09 Rule Automatic action triggered when transaction criteria are met \"Firefly III Concepts\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/rules/ \u2014 retrieved 2025-01-09 Split Transaction Single transaction divided into multiple categories/budgets \"Firefly III Concepts\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/transactions/ \u2014 retrieved 2025-01-09 Tag A flexible label that can be attached to transactions \"Firefly III Concepts\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/tags/ \u2014 retrieved 2025-01-09 Transaction A movement of money between accounts at a specific time \"Firefly III Concepts\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/transactions/ \u2014 retrieved 2025-01-09 Transaction Group Collection of related transactions that happen simultaneously \"Firefly III Concepts\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/transactions/ \u2014 retrieved 2025-01-09 Transfer Money moving between two asset accounts you own \"Firefly III Concepts\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/transactions/ \u2014 retrieved 2025-01-09 Withdrawal Money leaving an asset account to go to an expense account \"Firefly III Concepts\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/transactions/ \u2014 retrieved 2025-01-09 Notes \u00b6 Avoid synonyms that upstream does not use Account types follow double-entry bookkeeping principles All monetary movements are recorded as transactions between accounts Tags and categories serve different purposes (tags are flexible, categories are hierarchical) Bills represent expected expenses, budgets represent spending limits Sources \u00b6 \"Firefly III Account Concepts\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/accounts/ \u2014 retrieved 2025-01-09 \"Firefly III Transaction Concepts\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/transactions/ \u2014 retrieved 2025-01-09 \"Firefly III Budget Concepts\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/budgets/ \u2014 retrieved 2025-01-09","title":"Ubiquitous Language"},{"location":"domain/ubiquitous-language/#glossary","text":"Term Definition (short, from upstream) Source Account A financial container that holds money (asset, expense, revenue, liability) \"Firefly III Concepts\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/accounts/ \u2014 retrieved 2025-01-09 Asset Account Account representing money you own (checking, savings, cash) \"Firefly III Concepts\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/accounts/ \u2014 retrieved 2025-01-09 Bill A recurring expense that is expected regularly (rent, utilities) \"Firefly III Concepts\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/bills/ \u2014 retrieved 2025-01-09 Budget A spending limit for a specific category and time period \"Firefly III Concepts\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/budgets/ \u2014 retrieved 2025-01-09 Category A way to group transactions by purpose (groceries, entertainment) \"Firefly III Concepts\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/categories/ \u2014 retrieved 2025-01-09 Deposit Money coming into an asset account from a revenue account \"Firefly III Concepts\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/transactions/ \u2014 retrieved 2025-01-09 Expense Account Account representing places where money is spent (store, landlord) \"Firefly III Concepts\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/accounts/ \u2014 retrieved 2025-01-09 Liability Account representing money you owe (credit card, mortgage) \"Firefly III Concepts\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/accounts/ \u2014 retrieved 2025-01-09 Piggy Bank A virtual savings goal within an asset account \"Firefly III Concepts\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/piggy-banks/ \u2014 retrieved 2025-01-09 Revenue Account Account representing sources of income (employer, client) \"Firefly III Concepts\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/accounts/ \u2014 retrieved 2025-01-09 Rule Automatic action triggered when transaction criteria are met \"Firefly III Concepts\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/rules/ \u2014 retrieved 2025-01-09 Split Transaction Single transaction divided into multiple categories/budgets \"Firefly III Concepts\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/transactions/ \u2014 retrieved 2025-01-09 Tag A flexible label that can be attached to transactions \"Firefly III Concepts\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/tags/ \u2014 retrieved 2025-01-09 Transaction A movement of money between accounts at a specific time \"Firefly III Concepts\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/transactions/ \u2014 retrieved 2025-01-09 Transaction Group Collection of related transactions that happen simultaneously \"Firefly III Concepts\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/transactions/ \u2014 retrieved 2025-01-09 Transfer Money moving between two asset accounts you own \"Firefly III Concepts\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/transactions/ \u2014 retrieved 2025-01-09 Withdrawal Money leaving an asset account to go to an expense account \"Firefly III Concepts\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/transactions/ \u2014 retrieved 2025-01-09","title":"Glossary"},{"location":"domain/ubiquitous-language/#notes","text":"Avoid synonyms that upstream does not use Account types follow double-entry bookkeeping principles All monetary movements are recorded as transactions between accounts Tags and categories serve different purposes (tags are flexible, categories are hierarchical) Bills represent expected expenses, budgets represent spending limits","title":"Notes"},{"location":"domain/ubiquitous-language/#sources","text":"\"Firefly III Account Concepts\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/accounts/ \u2014 retrieved 2025-01-09 \"Firefly III Transaction Concepts\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/transactions/ \u2014 retrieved 2025-01-09 \"Firefly III Budget Concepts\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/budgets/ \u2014 retrieved 2025-01-09","title":"Sources"},{"location":"domain/use-cases/","text":"Purpose: Document application layer orchestration patterns. Contents - Use Case Patterns - Key Use Cases - Orchestration Strategy - Sources Use Case Patterns \u00b6 Single Responsibility Principle: Each use case represents one business operation with clear input/output boundaries. Orchestration Only: Use cases coordinate domain objects and infrastructure services without implementing business rules. Example Use Case Structure: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class CreateTransactionUseCase { public function __construct( private TransactionRepositoryInterface $transactions, private AccountRepositoryInterface $accounts, private RuleEngineService $ruleEngine, private EventDispatcher $events ) {} public function execute(CreateTransactionCommand $command): TransactionResult { // 1. Validate inputs // 2. Load domain objects // 3. Execute domain operations // 4. Persist changes // 5. Publish events // 6. Return result } } Key Use Cases \u00b6 Transaction Management: Use Case Input Output Domain Objects Events Published Source CreateTransaction TransactionCommand TransactionResult Transaction, Account TransactionCreated \"Firefly III Transactions\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/transactions/ \u2014 retrieved 2025-01-09 UpdateTransaction UpdateTransactionCommand TransactionResult Transaction TransactionUpdated \"Firefly III Transactions\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/transactions/ \u2014 retrieved 2025-01-09 DeleteTransaction DeleteTransactionCommand SuccessResult Transaction TransactionDeleted \"Firefly III Transactions\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/transactions/ \u2014 retrieved 2025-01-09 SplitTransaction SplitTransactionCommand TransactionGroupResult TransactionGroup TransactionSplit \"Firefly III Transactions\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/transactions/ \u2014 retrieved 2025-01-09 Account Management: Use Case Input Output Domain Objects Events Published Source CreateAccount CreateAccountCommand AccountResult Account AccountCreated \"Firefly III Accounts\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/accounts/ \u2014 retrieved 2025-01-09 UpdateAccountBalance UpdateBalanceCommand BalanceResult Account, Transaction BalanceUpdated \"Firefly III Accounts\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/accounts/ \u2014 retrieved 2025-01-09 CloseAccount CloseAccountCommand SuccessResult Account AccountClosed \"Firefly III Accounts\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/accounts/ \u2014 retrieved 2025-01-09 Budget Operations: Use Case Input Output Domain Objects Events Published Source CreateBudget CreateBudgetCommand BudgetResult Budget BudgetCreated \"Firefly III Budgets\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/budgets/ \u2014 retrieved 2025-01-09 SetBudgetLimit SetLimitCommand BudgetLimitResult Budget, BudgetLimit BudgetLimitSet \"Firefly III Budgets\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/budgets/ \u2014 retrieved 2025-01-09 CalculateBudgetProgress CalculateProgressQuery BudgetProgressResult Budget, Transaction BudgetProgressCalculated \"Firefly III Budgets\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/budgets/ \u2014 retrieved 2025-01-09 Rule Engine: Use Case Input Output Domain Objects Events Published Source CreateRule CreateRuleCommand RuleResult Rule, RuleTrigger, RuleAction RuleCreated \"Firefly III Rules\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/rules/ \u2014 retrieved 2025-01-09 ExecuteRules ExecuteRulesCommand RuleExecutionResult Rule, Transaction RuleExecuted \"Firefly III Rules\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/rules/ \u2014 retrieved 2025-01-09 TestRule TestRuleQuery RuleTestResult Rule RuleTested \"Firefly III Rules\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/rules/ \u2014 retrieved 2025-01-09 Data Import: Use Case Input Output Domain Objects Events Published Source ImportTransactions ImportCommand ImportResult ImportJob, Transaction ImportStarted, TransactionImported \"Firefly III Data Import\" \u2014 https://docs.firefly-iii.org/how-to/data-importer/ \u2014 retrieved 2025-01-09 ValidateImportData ValidateDataCommand ValidationResult ImportMapping DataValidated \"Firefly III Data Import\" \u2014 https://docs.firefly-iii.org/how-to/data-importer/ \u2014 retrieved 2025-01-09 ConfigureImport ConfigureImportCommand ImportConfigResult ImportConfiguration ImportConfigured \"Firefly III Data Import\" \u2014 https://docs.firefly-iii.org/how-to/data-importer/ \u2014 retrieved 2025-01-09 Orchestration Strategy \u00b6 Error Handling Pattern: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 public function execute(CreateTransactionCommand $command): TransactionResult { try { DB::beginTransaction(); // Domain operations $sourceAccount = $this->accounts->findById($command->sourceAccountId); $destinationAccount = $this->accounts->findById($command->destinationAccountId); $transaction = Transaction::create( $sourceAccount, $destinationAccount, $command->amount, $command->description ); $this->transactions->store($transaction); // Apply rules $this->ruleEngine->processTransaction($transaction); DB::commit(); // Publish events after successful persistence $this->events->dispatch(new TransactionCreated($transaction)); return TransactionResult::success($transaction); } catch (DomainException $e) { DB::rollback(); return TransactionResult::failure($e->getMessage()); } } Input Validation: - Commands validated at application boundary - Domain invariants enforced by aggregates - Cross-aggregate validation in use cases - External service validation through adapters Event Publishing: - Events published after successful persistence - Event handlers run asynchronously where possible - Event publishing failures logged but don't break primary operation - Events carry minimal payload (IDs + basic data) Query vs Command Separation: - Commands : Modify state, return success/failure status - Queries : Read data, return domain objects or DTOs - Query handlers : Optimized for read performance - Command handlers : Focus on consistency and validation Transaction Boundaries: - Use cases define transaction boundaries - One database transaction per use case execution - Compensating actions for cross-boundary operations - Event publication outside transaction boundaries Dependency Coordination: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 public function execute(ImportTransactionsCommand $command): ImportResult { $importJob = ImportJob::start($command->fileName, $command->userId); // 1. Parse file $transactions = $this->fileParser->parse($command->filePath); // 2. Validate data $validationResult = $this->validator->validate($transactions); if ($validationResult->hasErrors()) { return ImportResult::validationFailure($validationResult->getErrors()); } // 3. Import transactions foreach ($transactions as $transactionData) { $result = $this->createTransactionUseCase->execute( CreateTransactionCommand::fromImport($transactionData) ); $importJob->recordResult($result); } // 4. Finalize import $importJob->complete(); $this->events->dispatch(new ImportCompleted($importJob)); return ImportResult::success($importJob); } Testing Strategy \u00b6 Use Case Testing: - Mock repository and adapter interfaces - Test successful execution paths - Test error conditions and rollback behavior - Verify event publication - Test input validation Integration Testing: - Test use case orchestration with real dependencies - Verify transaction boundary behavior - Test cross-use case workflows - Validate event handler interactions Sources \u00b6 \"Firefly III Application Architecture\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/ \u2014 retrieved 2025-01-09 \"Firefly III Workflow Documentation\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/transactions/ \u2014 retrieved 2025-01-09","title":"Use Cases"},{"location":"domain/use-cases/#use-case-patterns","text":"Single Responsibility Principle: Each use case represents one business operation with clear input/output boundaries. Orchestration Only: Use cases coordinate domain objects and infrastructure services without implementing business rules. Example Use Case Structure: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class CreateTransactionUseCase { public function __construct( private TransactionRepositoryInterface $transactions, private AccountRepositoryInterface $accounts, private RuleEngineService $ruleEngine, private EventDispatcher $events ) {} public function execute(CreateTransactionCommand $command): TransactionResult { // 1. Validate inputs // 2. Load domain objects // 3. Execute domain operations // 4. Persist changes // 5. Publish events // 6. Return result } }","title":"Use Case Patterns"},{"location":"domain/use-cases/#key-use-cases","text":"Transaction Management: Use Case Input Output Domain Objects Events Published Source CreateTransaction TransactionCommand TransactionResult Transaction, Account TransactionCreated \"Firefly III Transactions\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/transactions/ \u2014 retrieved 2025-01-09 UpdateTransaction UpdateTransactionCommand TransactionResult Transaction TransactionUpdated \"Firefly III Transactions\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/transactions/ \u2014 retrieved 2025-01-09 DeleteTransaction DeleteTransactionCommand SuccessResult Transaction TransactionDeleted \"Firefly III Transactions\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/transactions/ \u2014 retrieved 2025-01-09 SplitTransaction SplitTransactionCommand TransactionGroupResult TransactionGroup TransactionSplit \"Firefly III Transactions\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/transactions/ \u2014 retrieved 2025-01-09 Account Management: Use Case Input Output Domain Objects Events Published Source CreateAccount CreateAccountCommand AccountResult Account AccountCreated \"Firefly III Accounts\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/accounts/ \u2014 retrieved 2025-01-09 UpdateAccountBalance UpdateBalanceCommand BalanceResult Account, Transaction BalanceUpdated \"Firefly III Accounts\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/accounts/ \u2014 retrieved 2025-01-09 CloseAccount CloseAccountCommand SuccessResult Account AccountClosed \"Firefly III Accounts\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/accounts/ \u2014 retrieved 2025-01-09 Budget Operations: Use Case Input Output Domain Objects Events Published Source CreateBudget CreateBudgetCommand BudgetResult Budget BudgetCreated \"Firefly III Budgets\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/budgets/ \u2014 retrieved 2025-01-09 SetBudgetLimit SetLimitCommand BudgetLimitResult Budget, BudgetLimit BudgetLimitSet \"Firefly III Budgets\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/budgets/ \u2014 retrieved 2025-01-09 CalculateBudgetProgress CalculateProgressQuery BudgetProgressResult Budget, Transaction BudgetProgressCalculated \"Firefly III Budgets\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/budgets/ \u2014 retrieved 2025-01-09 Rule Engine: Use Case Input Output Domain Objects Events Published Source CreateRule CreateRuleCommand RuleResult Rule, RuleTrigger, RuleAction RuleCreated \"Firefly III Rules\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/rules/ \u2014 retrieved 2025-01-09 ExecuteRules ExecuteRulesCommand RuleExecutionResult Rule, Transaction RuleExecuted \"Firefly III Rules\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/rules/ \u2014 retrieved 2025-01-09 TestRule TestRuleQuery RuleTestResult Rule RuleTested \"Firefly III Rules\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/rules/ \u2014 retrieved 2025-01-09 Data Import: Use Case Input Output Domain Objects Events Published Source ImportTransactions ImportCommand ImportResult ImportJob, Transaction ImportStarted, TransactionImported \"Firefly III Data Import\" \u2014 https://docs.firefly-iii.org/how-to/data-importer/ \u2014 retrieved 2025-01-09 ValidateImportData ValidateDataCommand ValidationResult ImportMapping DataValidated \"Firefly III Data Import\" \u2014 https://docs.firefly-iii.org/how-to/data-importer/ \u2014 retrieved 2025-01-09 ConfigureImport ConfigureImportCommand ImportConfigResult ImportConfiguration ImportConfigured \"Firefly III Data Import\" \u2014 https://docs.firefly-iii.org/how-to/data-importer/ \u2014 retrieved 2025-01-09","title":"Key Use Cases"},{"location":"domain/use-cases/#orchestration-strategy","text":"Error Handling Pattern: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 public function execute(CreateTransactionCommand $command): TransactionResult { try { DB::beginTransaction(); // Domain operations $sourceAccount = $this->accounts->findById($command->sourceAccountId); $destinationAccount = $this->accounts->findById($command->destinationAccountId); $transaction = Transaction::create( $sourceAccount, $destinationAccount, $command->amount, $command->description ); $this->transactions->store($transaction); // Apply rules $this->ruleEngine->processTransaction($transaction); DB::commit(); // Publish events after successful persistence $this->events->dispatch(new TransactionCreated($transaction)); return TransactionResult::success($transaction); } catch (DomainException $e) { DB::rollback(); return TransactionResult::failure($e->getMessage()); } } Input Validation: - Commands validated at application boundary - Domain invariants enforced by aggregates - Cross-aggregate validation in use cases - External service validation through adapters Event Publishing: - Events published after successful persistence - Event handlers run asynchronously where possible - Event publishing failures logged but don't break primary operation - Events carry minimal payload (IDs + basic data) Query vs Command Separation: - Commands : Modify state, return success/failure status - Queries : Read data, return domain objects or DTOs - Query handlers : Optimized for read performance - Command handlers : Focus on consistency and validation Transaction Boundaries: - Use cases define transaction boundaries - One database transaction per use case execution - Compensating actions for cross-boundary operations - Event publication outside transaction boundaries Dependency Coordination: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 public function execute(ImportTransactionsCommand $command): ImportResult { $importJob = ImportJob::start($command->fileName, $command->userId); // 1. Parse file $transactions = $this->fileParser->parse($command->filePath); // 2. Validate data $validationResult = $this->validator->validate($transactions); if ($validationResult->hasErrors()) { return ImportResult::validationFailure($validationResult->getErrors()); } // 3. Import transactions foreach ($transactions as $transactionData) { $result = $this->createTransactionUseCase->execute( CreateTransactionCommand::fromImport($transactionData) ); $importJob->recordResult($result); } // 4. Finalize import $importJob->complete(); $this->events->dispatch(new ImportCompleted($importJob)); return ImportResult::success($importJob); }","title":"Orchestration Strategy"},{"location":"domain/use-cases/#testing-strategy","text":"Use Case Testing: - Mock repository and adapter interfaces - Test successful execution paths - Test error conditions and rollback behavior - Verify event publication - Test input validation Integration Testing: - Test use case orchestration with real dependencies - Verify transaction boundary behavior - Test cross-use case workflows - Validate event handler interactions","title":"Testing Strategy"},{"location":"domain/use-cases/#sources","text":"\"Firefly III Application Architecture\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/ \u2014 retrieved 2025-01-09 \"Firefly III Workflow Documentation\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/features/transactions/ \u2014 retrieved 2025-01-09","title":"Sources"},{"location":"ops/networking/","text":"Purpose: Document network configuration and connectivity requirements. Contents - Port Configuration - Proxy & Load Balancer - TLS & Security - Container Networking - Sources Port Configuration \u00b6 Container Ports: Service Internal Port External Port Protocol Purpose Source Nginx 80 8080 HTTP Web interface \"Docker Compose Config\" \u2014 docker-compose.yml \u2014 retrieved 2025-01-09 PHP-FPM 9000 9000 FastCGI Application backend \"Docker Compose Config\" \u2014 docker-compose.yml \u2014 retrieved 2025-01-09 MariaDB 3306 3306 MySQL Database access \"Docker Compose Config\" \u2014 docker-compose.yml \u2014 retrieved 2025-01-09 Redis 6379 N/A Redis Cache/sessions (internal only) \"Docker Compose Config\" \u2014 docker-compose.yml \u2014 retrieved 2025-01-09 Port Binding Security: - All ports bound to 127.0.0.1 (localhost only) - No direct external access to database or cache - Web traffic routed through nginx proxy - PHP-FPM exposed for direct debugging only Firewall Configuration: 1 2 3 4 5 6 7 8 # Allow HTTP traffic sudo ufw allow 8080 /tcp # Allow HTTPS traffic (if using external TLS termination) sudo ufw allow 443 /tcp # Block direct database access from external networks sudo ufw deny 3306 /tcp Proxy & Load Balancer \u00b6 Nginx Configuration: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 server { listen 80 ; server_name localhost ; root /var/www/app/public ; index index.php index.html ; location / { try_files $uri $uri/ /index.php? $query_string ; } location ~ \\.php$ { fastcgi_pass firefly-iii-application.application : 9000 ; fastcgi_index index.php ; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name ; include fastcgi_params ; # Performance tuning fastcgi_buffers 16 16k ; fastcgi_buffer_size 32k ; fastcgi_read_timeout 300 ; } } External Load Balancer (Production): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 # Example Ingress configuration apiVersion : networking.k8s.io/v1 kind : Ingress metadata : name : firefly-iii-ingress annotations : nginx.ingress.kubernetes.io/proxy-body-size : \"64m\" nginx.ingress.kubernetes.io/proxy-read-timeout : \"300\" nginx.ingress.kubernetes.io/proxy-send-timeout : \"300\" spec : rules : - host : firefly.example.com http : paths : - path : / pathType : Prefix backend : service : name : firefly-iii-service port : number : 80 Trusted Proxies: 1 2 3 4 5 # Environment variable for proxy trust TRUSTED_PROXIES = * # Or specific proxy IPs TRUSTED_PROXIES = 10 .0.0.0/8,172.16.0.0/12,192.168.0.0/16 TLS & Security \u00b6 TLS Termination Options: Option Implementation Pros Cons Source External Load Balancer Kubernetes Ingress, AWS ALB Centralized, automatic renewal Additional infrastructure \"Firefly III Security\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 Nginx Proxy Reverse proxy with Let's Encrypt Simple setup, full control Manual certificate management \"Firefly III Security\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 Container TLS Direct certificate in nginx container No external dependencies Complex certificate rotation \"Firefly III Security\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 Security Headers: 1 2 3 4 5 6 # Add to nginx configuration add_header X-Frame-Options DENY ; add_header X-Content-Type-Options nosniff ; add_header X-XSS-Protection \"1 ; mode=block\" ; add_header Referrer-Policy strict-origin-when-cross-origin ; add_header Content-Security-Policy \"default-src 'self' ; script-src 'self' 'unsafe-inline' ; style-src 'self' 'unsafe-inline'\" ; SSL/TLS Configuration: 1 2 3 4 5 6 7 8 9 # Strong SSL configuration ssl_protocols TLSv1.2 TLSv1.3 ; ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384 ; ssl_prefer_server_ciphers off ; ssl_session_cache shared:SSL:10m ; ssl_session_timeout 10m ; # HSTS header add_header Strict-Transport-Security \"max-age=31536000 ; includeSubDomains\" always ; Container Networking \u00b6 Docker Compose Network: 1 2 3 4 networks : default : external : true name : webgrip Container Communication: - Containers communicate via service names - Internal DNS resolution provided by Docker - No network isolation between services (shared network) - External network allows integration with other services Network Security: 1 2 3 4 5 6 # Check container network connectivity docker exec firefly-iii-application.application nc -zv firefly-iii-application.mariadb 3306 docker exec firefly-iii-application.application nc -zv firefly-iii-application.redis 6379 # Monitor network traffic (debugging) docker run --rm --net container:firefly-iii-application.application nicolaka/netshoot tcpdump -i eth0 Service Discovery: - MariaDB: firefly-iii-application.mariadb:3306 - Redis: firefly-iii-application.redis:6379 - Application: firefly-iii-application.application:9000 - Nginx: firefly-iii-application.nginx:80 Performance & Timeouts \u00b6 Connection Timeouts: 1 2 3 4 5 6 7 8 9 # PHP-FPM settings max_execution_time = 300 max_input_time = 300 memory_limit = 512M # Nginx FastCGI timeouts fastcgi_connect_timeout = 60s fastcgi_send_timeout = 300s fastcgi_read_timeout = 300s Database Connection Pool: 1 2 3 4 5 # MariaDB connection settings max_connections = 151 connect_timeout = 10 wait_timeout = 28800 interactive_timeout = 28800 Redis Network Configuration: 1 2 3 4 # Redis timeout settings timeout = 0 tcp-keepalive = 300 tcp-backlog = 511 Monitoring & Diagnostics \u00b6 Network Health Checks: 1 2 3 4 5 6 7 # Test all service connectivity curl -f http://localhost:8080/health telnet localhost 3306 redis-cli -h localhost ping # Check DNS resolution docker exec firefly-iii-application.application nslookup firefly-iii-application.mariadb Traffic Analysis: 1 2 3 4 5 6 7 8 # Monitor HTTP requests docker logs firefly-iii-application.nginx | grep \"GET\\|POST\" # Database connection monitoring docker exec firefly-iii-application.mariadb mysql -u root -p -e \"SHOW PROCESSLIST;\" # Redis connection monitoring docker exec firefly-iii-application.redis redis-cli info clients Troubleshooting Network Issues: Connection Refused: Check service is running: docker ps Verify port binding: netstat -tlnp | grep :8080 Check firewall rules: sudo ufw status Slow Response Times: Monitor container resources: docker stats Check database performance: SHOW PROCESSLIST Analyze nginx access logs for slow requests DNS Resolution Issues: Verify container network: docker network inspect webgrip Test internal connectivity: docker exec ... nc -zv service_name port Sources \u00b6 \"Firefly III Installation Guide\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 \"Docker Compose Configuration\" \u2014 docker-compose.yml \u2014 retrieved 2025-01-09","title":"Networking"},{"location":"ops/networking/#port-configuration","text":"Container Ports: Service Internal Port External Port Protocol Purpose Source Nginx 80 8080 HTTP Web interface \"Docker Compose Config\" \u2014 docker-compose.yml \u2014 retrieved 2025-01-09 PHP-FPM 9000 9000 FastCGI Application backend \"Docker Compose Config\" \u2014 docker-compose.yml \u2014 retrieved 2025-01-09 MariaDB 3306 3306 MySQL Database access \"Docker Compose Config\" \u2014 docker-compose.yml \u2014 retrieved 2025-01-09 Redis 6379 N/A Redis Cache/sessions (internal only) \"Docker Compose Config\" \u2014 docker-compose.yml \u2014 retrieved 2025-01-09 Port Binding Security: - All ports bound to 127.0.0.1 (localhost only) - No direct external access to database or cache - Web traffic routed through nginx proxy - PHP-FPM exposed for direct debugging only Firewall Configuration: 1 2 3 4 5 6 7 8 # Allow HTTP traffic sudo ufw allow 8080 /tcp # Allow HTTPS traffic (if using external TLS termination) sudo ufw allow 443 /tcp # Block direct database access from external networks sudo ufw deny 3306 /tcp","title":"Port Configuration"},{"location":"ops/networking/#proxy-load-balancer","text":"Nginx Configuration: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 server { listen 80 ; server_name localhost ; root /var/www/app/public ; index index.php index.html ; location / { try_files $uri $uri/ /index.php? $query_string ; } location ~ \\.php$ { fastcgi_pass firefly-iii-application.application : 9000 ; fastcgi_index index.php ; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name ; include fastcgi_params ; # Performance tuning fastcgi_buffers 16 16k ; fastcgi_buffer_size 32k ; fastcgi_read_timeout 300 ; } } External Load Balancer (Production): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 # Example Ingress configuration apiVersion : networking.k8s.io/v1 kind : Ingress metadata : name : firefly-iii-ingress annotations : nginx.ingress.kubernetes.io/proxy-body-size : \"64m\" nginx.ingress.kubernetes.io/proxy-read-timeout : \"300\" nginx.ingress.kubernetes.io/proxy-send-timeout : \"300\" spec : rules : - host : firefly.example.com http : paths : - path : / pathType : Prefix backend : service : name : firefly-iii-service port : number : 80 Trusted Proxies: 1 2 3 4 5 # Environment variable for proxy trust TRUSTED_PROXIES = * # Or specific proxy IPs TRUSTED_PROXIES = 10 .0.0.0/8,172.16.0.0/12,192.168.0.0/16","title":"Proxy &amp; Load Balancer"},{"location":"ops/networking/#tls-security","text":"TLS Termination Options: Option Implementation Pros Cons Source External Load Balancer Kubernetes Ingress, AWS ALB Centralized, automatic renewal Additional infrastructure \"Firefly III Security\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 Nginx Proxy Reverse proxy with Let's Encrypt Simple setup, full control Manual certificate management \"Firefly III Security\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 Container TLS Direct certificate in nginx container No external dependencies Complex certificate rotation \"Firefly III Security\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 Security Headers: 1 2 3 4 5 6 # Add to nginx configuration add_header X-Frame-Options DENY ; add_header X-Content-Type-Options nosniff ; add_header X-XSS-Protection \"1 ; mode=block\" ; add_header Referrer-Policy strict-origin-when-cross-origin ; add_header Content-Security-Policy \"default-src 'self' ; script-src 'self' 'unsafe-inline' ; style-src 'self' 'unsafe-inline'\" ; SSL/TLS Configuration: 1 2 3 4 5 6 7 8 9 # Strong SSL configuration ssl_protocols TLSv1.2 TLSv1.3 ; ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384 ; ssl_prefer_server_ciphers off ; ssl_session_cache shared:SSL:10m ; ssl_session_timeout 10m ; # HSTS header add_header Strict-Transport-Security \"max-age=31536000 ; includeSubDomains\" always ;","title":"TLS &amp; Security"},{"location":"ops/networking/#container-networking","text":"Docker Compose Network: 1 2 3 4 networks : default : external : true name : webgrip Container Communication: - Containers communicate via service names - Internal DNS resolution provided by Docker - No network isolation between services (shared network) - External network allows integration with other services Network Security: 1 2 3 4 5 6 # Check container network connectivity docker exec firefly-iii-application.application nc -zv firefly-iii-application.mariadb 3306 docker exec firefly-iii-application.application nc -zv firefly-iii-application.redis 6379 # Monitor network traffic (debugging) docker run --rm --net container:firefly-iii-application.application nicolaka/netshoot tcpdump -i eth0 Service Discovery: - MariaDB: firefly-iii-application.mariadb:3306 - Redis: firefly-iii-application.redis:6379 - Application: firefly-iii-application.application:9000 - Nginx: firefly-iii-application.nginx:80","title":"Container Networking"},{"location":"ops/networking/#performance-timeouts","text":"Connection Timeouts: 1 2 3 4 5 6 7 8 9 # PHP-FPM settings max_execution_time = 300 max_input_time = 300 memory_limit = 512M # Nginx FastCGI timeouts fastcgi_connect_timeout = 60s fastcgi_send_timeout = 300s fastcgi_read_timeout = 300s Database Connection Pool: 1 2 3 4 5 # MariaDB connection settings max_connections = 151 connect_timeout = 10 wait_timeout = 28800 interactive_timeout = 28800 Redis Network Configuration: 1 2 3 4 # Redis timeout settings timeout = 0 tcp-keepalive = 300 tcp-backlog = 511","title":"Performance &amp; Timeouts"},{"location":"ops/networking/#monitoring-diagnostics","text":"Network Health Checks: 1 2 3 4 5 6 7 # Test all service connectivity curl -f http://localhost:8080/health telnet localhost 3306 redis-cli -h localhost ping # Check DNS resolution docker exec firefly-iii-application.application nslookup firefly-iii-application.mariadb Traffic Analysis: 1 2 3 4 5 6 7 8 # Monitor HTTP requests docker logs firefly-iii-application.nginx | grep \"GET\\|POST\" # Database connection monitoring docker exec firefly-iii-application.mariadb mysql -u root -p -e \"SHOW PROCESSLIST;\" # Redis connection monitoring docker exec firefly-iii-application.redis redis-cli info clients Troubleshooting Network Issues: Connection Refused: Check service is running: docker ps Verify port binding: netstat -tlnp | grep :8080 Check firewall rules: sudo ufw status Slow Response Times: Monitor container resources: docker stats Check database performance: SHOW PROCESSLIST Analyze nginx access logs for slow requests DNS Resolution Issues: Verify container network: docker network inspect webgrip Test internal connectivity: docker exec ... nc -zv service_name port","title":"Monitoring &amp; Diagnostics"},{"location":"ops/networking/#sources","text":"\"Firefly III Installation Guide\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 \"Docker Compose Configuration\" \u2014 docker-compose.yml \u2014 retrieved 2025-01-09","title":"Sources"},{"location":"ops/observability/","text":"Purpose: Enable effective monitoring and troubleshooting. Contents - Logging Strategy - Metrics Collection - Health Monitoring - Alerting - Sources Logging Strategy \u00b6 Log Destinations: Component Log Location Format Rotation Purpose Source Firefly III Application /var/www/app/storage/logs/laravel.log JSON Daily Application events, errors \"Firefly III Logging\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 Nginx Access stdout Combined log format Docker log driver HTTP request tracking \"Nginx Configuration\" \u2014 ops/docker/nginx/ \u2014 retrieved 2025-01-09 Nginx Error stderr Standard error format Docker log driver Web server errors \"Nginx Configuration\" \u2014 ops/docker/nginx/ \u2014 retrieved 2025-01-09 MariaDB /var/log/mysql/error.log MySQL format Size-based Database errors \"MariaDB Configuration\" \u2014 ops/docker/mariadb/ \u2014 retrieved 2025-01-09 Redis stdout Redis format Docker log driver Cache operations \"Redis Configuration\" \u2014 ops/docker/redis/ \u2014 retrieved 2025-01-09 Structured Logging Configuration: 1 2 3 4 5 6 7 # Laravel logging configuration LOG_CHANNEL = stderr LOG_LEVEL = info LOG_STACK = single # JSON format for structured logs LOG_JSON_FORMAT = true Log Level Guidelines: Level When to Use Examples DEBUG Development debugging SQL queries, cache operations INFO Normal operations User login, transaction creation WARNING Recoverable errors Failed external API calls, validation warnings ERROR Application errors Unhandled exceptions, database errors CRITICAL System failures Database unavailable, filesystem full Centralized Logging (Production): 1 2 3 4 5 6 7 8 # Example logging sidecar for Kubernetes - name : log-shipper image : fluent/fluent-bit:2.0 volumeMounts : - name : app-logs mountPath : /var/log/app - name : fluent-bit-config mountPath : /fluent-bit/etc Metrics Collection \u00b6 Application Metrics: Metric Type Description Labels Source firefly_transactions_total Counter Total transactions created type, user_id \"Firefly III Metrics\" \u2014 Application Events \u2014 retrieved 2025-01-09 firefly_active_users Gauge Currently active users - \"Firefly III Metrics\" \u2014 Application Events \u2014 retrieved 2025-01-09 firefly_account_balance Gauge Account balances by currency account_type, currency \"Firefly III Metrics\" \u2014 Application Events \u2014 retrieved 2025-01-09 firefly_budget_utilization Gauge Budget spending percentage budget_id, period \"Firefly III Metrics\" \u2014 Application Events \u2014 retrieved 2025-01-09 firefly_import_jobs_total Counter Data import jobs status, format \"Firefly III Metrics\" \u2014 Application Events \u2014 retrieved 2025-01-09 firefly_rule_executions_total Counter Rule engine executions rule_id, outcome \"Firefly III Metrics\" \u2014 Application Events \u2014 retrieved 2025-01-09 Infrastructure Metrics: Metric Type Description Labels container_cpu_usage_percent Gauge Container CPU utilization container_name container_memory_usage_bytes Gauge Container memory usage container_name mysql_connections_active Gauge Active database connections - redis_memory_usage_bytes Gauge Redis memory consumption - http_requests_total Counter HTTP requests received method, status_code http_request_duration_seconds Histogram HTTP request latency method, status_code Prometheus Configuration: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # prometheus.yml snippet scrape_configs : - job_name : 'firefly-iii' static_configs : - targets : [ 'localhost:8080' ] metrics_path : '/metrics' scrape_interval : 30s - job_name : 'mysql-exporter' static_configs : - targets : [ 'localhost:9104' ] - job_name : 'redis-exporter' static_configs : - targets : [ 'localhost:9121' ] Custom Metrics Implementation: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // Example application metric use Prometheus\\Counter; class TransactionCreatedListener { private Counter $transactionCounter; public function handle(TransactionCreated $event): void { $this->transactionCounter ->labels($event->transaction->type, $event->user_id) ->inc(); } } Health Monitoring \u00b6 Health Check Endpoints: Endpoint Purpose Response Format Checks Performed Source /health Basic health status JSON HTTP 200/503, basic connectivity \"Health Check Implementation\" \u2014 src/index.js \u2014 retrieved 2025-01-09 /health/detailed Comprehensive health JSON Database, Redis, filesystem, external APIs \"Health Check Implementation\" \u2014 src/index.js \u2014 retrieved 2025-01-09 /metrics Prometheus metrics Prometheus format Application and system metrics \"Metrics Implementation\" \u2014 Custom \u2014 retrieved 2025-01-09 Health Check Response Format: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 { \"status\" : \"healthy\" , \"timestamp\" : \"2025-01-09T10:30:00Z\" , \"checks\" : { \"database\" : { \"status\" : \"healthy\" , \"response_time_ms\" : 12 , \"connection_pool\" : { \"active\" : 3 , \"max\" : 10 } }, \"redis\" : { \"status\" : \"healthy\" , \"response_time_ms\" : 2 , \"memory_usage_mb\" : 45 }, \"filesystem\" : { \"status\" : \"healthy\" , \"storage_usage_percent\" : 65 } } } Container Health Checks: 1 2 3 4 5 6 7 # Docker Compose health check healthcheck : test : [ \"CMD\" , \"curl\" , \"-f\" , \"http://localhost:80/health\" ] interval : 30s timeout : 10s retries : 3 start_period : 60s Readiness vs Liveness: - Liveness : Basic process health (HTTP 200 response) - Readiness : Full system health (database, cache, dependencies) - Startup : Initial system initialization (longer timeout) Alerting \u00b6 Critical Alerts (Immediate Response): Alert Condition Severity Action Required Application Down HTTP health check fails for 3 minutes Critical Immediate investigation Database Unavailable Database connection failures > 50% Critical Database recovery High Error Rate Error rate > 5% for 5 minutes High Code/configuration review Memory Exhaustion Container memory > 90% for 10 minutes High Resource scaling Warning Alerts (Next Business Day): Alert Condition Severity Action Required Slow Response Times P95 latency > 2s for 15 minutes Medium Performance optimization Disk Space Low Storage usage > 80% Medium Cleanup or expansion High Transaction Volume 50% above normal for 1 hour Medium Capacity planning Alert Manager Configuration: 1 2 3 4 5 6 7 8 9 10 11 12 13 # alertmanager.yml route : group_by : [ 'alertname' ] group_wait : 30s group_interval : 5m repeat_interval : 12h receiver : 'web.hook' receivers : - name : 'web.hook' webhook_configs : - url : 'https://hooks.slack.com/services/...' send_resolved : true Prometheus Alert Rules: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # alerts.yml groups : - name : firefly-iii rules : - alert : FireflyIIIDown expr : up{job=\"firefly-iii\"} == 0 for : 3m labels : severity : critical annotations : summary : \"Firefly III is down\" description : \"Firefly III has been down for more than 3 minutes\" - alert : HighErrorRate expr : rate(http_requests_total{status=~\"5..\"}[5m]) > 0.05 for : 5m labels : severity : high annotations : summary : \"High error rate detected\" Dashboards \u00b6 Grafana Dashboard Panels: Overview Dashboard: Service health status Request rate and latency Error rate trends Active user count Application Dashboard: Transaction creation rate Account balance trends Budget utilization Import job success rate Infrastructure Dashboard: Container resource usage Database performance metrics Cache hit rates Network traffic Dashboard Configuration: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 { \"dashboard\" : { \"title\" : \"Firefly III Overview\" , \"panels\" : [ { \"title\" : \"Request Rate\" , \"type\" : \"graph\" , \"targets\" : [ { \"expr\" : \"rate(http_requests_total[5m])\" , \"legendFormat\" : \"{{ method }} {{ status }}\" } ] } ] } } Troubleshooting Workflows \u00b6 Performance Issues: 1. Check dashboard for resource utilization 2. Review slow query logs 3. Analyze request patterns 4. Check for memory leaks 5. Verify cache performance Error Investigation: 1. Check error rate dashboard 2. Review application logs 3. Correlate with deployment events 4. Check external service status 5. Verify configuration changes Capacity Planning: 1. Monitor growth trends 2. Analyze peak usage patterns 3. Project future requirements 4. Plan scaling activities Sources \u00b6 \"Firefly III Installation Guide\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 \"Laravel Logging Documentation\" \u2014 https://laravel.com/docs/logging \u2014 retrieved 2025-01-09","title":"Observability"},{"location":"ops/observability/#logging-strategy","text":"Log Destinations: Component Log Location Format Rotation Purpose Source Firefly III Application /var/www/app/storage/logs/laravel.log JSON Daily Application events, errors \"Firefly III Logging\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 Nginx Access stdout Combined log format Docker log driver HTTP request tracking \"Nginx Configuration\" \u2014 ops/docker/nginx/ \u2014 retrieved 2025-01-09 Nginx Error stderr Standard error format Docker log driver Web server errors \"Nginx Configuration\" \u2014 ops/docker/nginx/ \u2014 retrieved 2025-01-09 MariaDB /var/log/mysql/error.log MySQL format Size-based Database errors \"MariaDB Configuration\" \u2014 ops/docker/mariadb/ \u2014 retrieved 2025-01-09 Redis stdout Redis format Docker log driver Cache operations \"Redis Configuration\" \u2014 ops/docker/redis/ \u2014 retrieved 2025-01-09 Structured Logging Configuration: 1 2 3 4 5 6 7 # Laravel logging configuration LOG_CHANNEL = stderr LOG_LEVEL = info LOG_STACK = single # JSON format for structured logs LOG_JSON_FORMAT = true Log Level Guidelines: Level When to Use Examples DEBUG Development debugging SQL queries, cache operations INFO Normal operations User login, transaction creation WARNING Recoverable errors Failed external API calls, validation warnings ERROR Application errors Unhandled exceptions, database errors CRITICAL System failures Database unavailable, filesystem full Centralized Logging (Production): 1 2 3 4 5 6 7 8 # Example logging sidecar for Kubernetes - name : log-shipper image : fluent/fluent-bit:2.0 volumeMounts : - name : app-logs mountPath : /var/log/app - name : fluent-bit-config mountPath : /fluent-bit/etc","title":"Logging Strategy"},{"location":"ops/observability/#metrics-collection","text":"Application Metrics: Metric Type Description Labels Source firefly_transactions_total Counter Total transactions created type, user_id \"Firefly III Metrics\" \u2014 Application Events \u2014 retrieved 2025-01-09 firefly_active_users Gauge Currently active users - \"Firefly III Metrics\" \u2014 Application Events \u2014 retrieved 2025-01-09 firefly_account_balance Gauge Account balances by currency account_type, currency \"Firefly III Metrics\" \u2014 Application Events \u2014 retrieved 2025-01-09 firefly_budget_utilization Gauge Budget spending percentage budget_id, period \"Firefly III Metrics\" \u2014 Application Events \u2014 retrieved 2025-01-09 firefly_import_jobs_total Counter Data import jobs status, format \"Firefly III Metrics\" \u2014 Application Events \u2014 retrieved 2025-01-09 firefly_rule_executions_total Counter Rule engine executions rule_id, outcome \"Firefly III Metrics\" \u2014 Application Events \u2014 retrieved 2025-01-09 Infrastructure Metrics: Metric Type Description Labels container_cpu_usage_percent Gauge Container CPU utilization container_name container_memory_usage_bytes Gauge Container memory usage container_name mysql_connections_active Gauge Active database connections - redis_memory_usage_bytes Gauge Redis memory consumption - http_requests_total Counter HTTP requests received method, status_code http_request_duration_seconds Histogram HTTP request latency method, status_code Prometheus Configuration: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # prometheus.yml snippet scrape_configs : - job_name : 'firefly-iii' static_configs : - targets : [ 'localhost:8080' ] metrics_path : '/metrics' scrape_interval : 30s - job_name : 'mysql-exporter' static_configs : - targets : [ 'localhost:9104' ] - job_name : 'redis-exporter' static_configs : - targets : [ 'localhost:9121' ] Custom Metrics Implementation: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // Example application metric use Prometheus\\Counter; class TransactionCreatedListener { private Counter $transactionCounter; public function handle(TransactionCreated $event): void { $this->transactionCounter ->labels($event->transaction->type, $event->user_id) ->inc(); } }","title":"Metrics Collection"},{"location":"ops/observability/#health-monitoring","text":"Health Check Endpoints: Endpoint Purpose Response Format Checks Performed Source /health Basic health status JSON HTTP 200/503, basic connectivity \"Health Check Implementation\" \u2014 src/index.js \u2014 retrieved 2025-01-09 /health/detailed Comprehensive health JSON Database, Redis, filesystem, external APIs \"Health Check Implementation\" \u2014 src/index.js \u2014 retrieved 2025-01-09 /metrics Prometheus metrics Prometheus format Application and system metrics \"Metrics Implementation\" \u2014 Custom \u2014 retrieved 2025-01-09 Health Check Response Format: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 { \"status\" : \"healthy\" , \"timestamp\" : \"2025-01-09T10:30:00Z\" , \"checks\" : { \"database\" : { \"status\" : \"healthy\" , \"response_time_ms\" : 12 , \"connection_pool\" : { \"active\" : 3 , \"max\" : 10 } }, \"redis\" : { \"status\" : \"healthy\" , \"response_time_ms\" : 2 , \"memory_usage_mb\" : 45 }, \"filesystem\" : { \"status\" : \"healthy\" , \"storage_usage_percent\" : 65 } } } Container Health Checks: 1 2 3 4 5 6 7 # Docker Compose health check healthcheck : test : [ \"CMD\" , \"curl\" , \"-f\" , \"http://localhost:80/health\" ] interval : 30s timeout : 10s retries : 3 start_period : 60s Readiness vs Liveness: - Liveness : Basic process health (HTTP 200 response) - Readiness : Full system health (database, cache, dependencies) - Startup : Initial system initialization (longer timeout)","title":"Health Monitoring"},{"location":"ops/observability/#alerting","text":"Critical Alerts (Immediate Response): Alert Condition Severity Action Required Application Down HTTP health check fails for 3 minutes Critical Immediate investigation Database Unavailable Database connection failures > 50% Critical Database recovery High Error Rate Error rate > 5% for 5 minutes High Code/configuration review Memory Exhaustion Container memory > 90% for 10 minutes High Resource scaling Warning Alerts (Next Business Day): Alert Condition Severity Action Required Slow Response Times P95 latency > 2s for 15 minutes Medium Performance optimization Disk Space Low Storage usage > 80% Medium Cleanup or expansion High Transaction Volume 50% above normal for 1 hour Medium Capacity planning Alert Manager Configuration: 1 2 3 4 5 6 7 8 9 10 11 12 13 # alertmanager.yml route : group_by : [ 'alertname' ] group_wait : 30s group_interval : 5m repeat_interval : 12h receiver : 'web.hook' receivers : - name : 'web.hook' webhook_configs : - url : 'https://hooks.slack.com/services/...' send_resolved : true Prometheus Alert Rules: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # alerts.yml groups : - name : firefly-iii rules : - alert : FireflyIIIDown expr : up{job=\"firefly-iii\"} == 0 for : 3m labels : severity : critical annotations : summary : \"Firefly III is down\" description : \"Firefly III has been down for more than 3 minutes\" - alert : HighErrorRate expr : rate(http_requests_total{status=~\"5..\"}[5m]) > 0.05 for : 5m labels : severity : high annotations : summary : \"High error rate detected\"","title":"Alerting"},{"location":"ops/observability/#dashboards","text":"Grafana Dashboard Panels: Overview Dashboard: Service health status Request rate and latency Error rate trends Active user count Application Dashboard: Transaction creation rate Account balance trends Budget utilization Import job success rate Infrastructure Dashboard: Container resource usage Database performance metrics Cache hit rates Network traffic Dashboard Configuration: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 { \"dashboard\" : { \"title\" : \"Firefly III Overview\" , \"panels\" : [ { \"title\" : \"Request Rate\" , \"type\" : \"graph\" , \"targets\" : [ { \"expr\" : \"rate(http_requests_total[5m])\" , \"legendFormat\" : \"{{ method }} {{ status }}\" } ] } ] } }","title":"Dashboards"},{"location":"ops/observability/#troubleshooting-workflows","text":"Performance Issues: 1. Check dashboard for resource utilization 2. Review slow query logs 3. Analyze request patterns 4. Check for memory leaks 5. Verify cache performance Error Investigation: 1. Check error rate dashboard 2. Review application logs 3. Correlate with deployment events 4. Check external service status 5. Verify configuration changes Capacity Planning: 1. Monitor growth trends 2. Analyze peak usage patterns 3. Project future requirements 4. Plan scaling activities","title":"Troubleshooting Workflows"},{"location":"ops/observability/#sources","text":"\"Firefly III Installation Guide\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 \"Laravel Logging Documentation\" \u2014 https://laravel.com/docs/logging \u2014 retrieved 2025-01-09","title":"Sources"},{"location":"ops/runbook/","text":"Purpose: Safe day-2 operations. Contents - Start/Stop - Backups/Restores - Health & Readiness - Maintenance Tasks - Sources Start/Stop \u00b6 Starting the stack: 1 2 3 4 5 6 7 8 9 10 11 # Bootstrap environment (first time only) make bootstrap # Start all services make start # Verify services are running docker ps | grep firefly-iii-application # Check logs for any startup issues make logs Stopping the stack: 1 2 3 4 5 # Graceful shutdown make stop # Force stop if needed (last resort) docker compose down --remove-orphans Individual service management: 1 2 3 4 5 6 7 8 # Restart specific service docker compose restart firefly-iii-application.application # View logs for specific service make logs SERVICE = firefly-iii-application.application # Execute commands in application container make enter CMD = \"/bin/bash\" Backups/Restores \u00b6 Database backup (daily recommended): 1 2 3 4 5 6 7 8 9 10 11 # Create timestamped backup DATE = $( date +%Y%m%d_%H%M%S ) docker exec firefly-iii-application.mariadb mysqldump \\ -u application -p '${DB_PASSWORD}' application \\ > \"backup_firefly_ ${ DATE } .sql\" # Compress backup gzip \"backup_firefly_ ${ DATE } .sql\" # Verify backup integrity zcat \"backup_firefly_ ${ DATE } .sql.gz\" | head -20 File storage backup: 1 2 3 4 5 6 # Backup user uploads and application storage docker run --rm \\ -v firefly-iii-application-application-storage-data:/source:ro \\ -v $( pwd ) :/backup \\ alpine:latest \\ tar czf /backup/storage_backup_ $( date +%Y%m%d ) .tar.gz -C /source . Database restore: 1 2 3 4 5 6 7 8 9 10 # Stop application first docker compose stop firefly-iii-application.application # Restore database zcat backup_firefly_YYYYMMDD_HHMMSS.sql.gz | \\ docker exec -i firefly-iii-application.mariadb mysql \\ -u application -p '${DB_PASSWORD}' application # Restart application docker compose start firefly-iii-application.application Storage restore: 1 2 3 4 5 6 7 8 9 10 11 12 # Stop application docker compose stop firefly-iii-application.application # Restore files docker run --rm \\ -v firefly-iii-application-application-storage-data:/target \\ -v $( pwd ) :/backup:ro \\ alpine:latest \\ tar xzf /backup/storage_backup_YYYYMMDD.tar.gz -C /target # Restart application docker compose start firefly-iii-application.application Health & Readiness \u00b6 Health check endpoints: - Application : http://localhost:8080/health (via nginx) - Direct PHP-FPM : Not exposed externally - Database : Health check via container status - Redis : Health check via container status Container health verification: 1 2 3 4 5 6 7 8 # Check all container health status docker ps --format \"table {.Names}\\t{.Status}\\t{.Ports}\" # Detailed health check docker inspect firefly-iii-application.application | grep -A 5 Health # Manual health check curl -f http://localhost:8080/health || echo \"Health check failed\" Health check commands: 1 2 3 4 5 6 7 8 9 10 11 # Application health (internal) docker exec firefly-iii-application.application \\ php artisan firefly-iii:verify # Database connectivity docker exec firefly-iii-application.mariadb \\ mariadb --user = application --password = '${DB_PASSWORD}' \\ --execute = \"SELECT 1\" # Redis connectivity docker exec firefly-iii-application.redis redis-cli ping Expected health check responses: - HTTP 200 : Application healthy and database connected - HTTP 503 : Application starting or database unavailable - Connection refused : Service not running or network issue Maintenance Tasks \u00b6 Cache clearing (if performance issues): 1 2 3 4 5 # Clear application cache docker exec firefly-iii-application.application php artisan cache:clear # Clear Redis cache entirely (destructive) docker exec firefly-iii-application.redis redis-cli FLUSHALL Database maintenance: 1 2 3 4 5 6 7 8 9 10 11 12 13 # Check database size docker exec firefly-iii-application.mariadb \\ mysql -u application -p '${DB_PASSWORD}' \\ -e \"SELECT table_name AS 'Table', ROUND(((data_length + index_length) / 1024 / 1024), 2) AS 'Size (MB)' FROM information_schema.TABLES WHERE table_schema = 'application' ORDER BY (data_length + index_length) DESC;\" # Optimize database tables docker exec firefly-iii-application.mariadb \\ mysql -u application -p '${DB_PASSWORD}' \\ -e \"OPTIMIZE TABLE application.transactions, application.accounts, application.transaction_journals;\" Log rotation: 1 2 3 4 5 6 7 # Check log sizes docker exec firefly-iii-application.application \\ du -sh storage/logs/ # Archive old logs (keep last 7 days) docker exec firefly-iii-application.application \\ find storage/logs/ -name \"*.log\" -mtime +7 -delete Security updates: 1 2 3 4 5 6 # Check for container image updates docker compose pull # Update and restart (after testing in staging) docker compose down docker compose up -d User management: 1 2 3 4 5 6 7 8 # Create admin user make user:create EMAIL = admin@example.com PASS = secure_password # Reset user password (Laravel tinker) docker exec -it firefly-iii-application.application php artisan tinker >>> $user = User::where ( 'email' , 'admin@example.com' ) ->first () ; >>> $user ->password = Hash::make ( 'new_password' ) ; >>> $user ->save () ; Monitoring & Alerts \u00b6 Key metrics to monitor: - Container health status - HTTP response times and error rates - Database connection pool utilization - Redis memory usage and hit rates - Disk space for volumes - Transaction processing rates Log monitoring: 1 2 3 4 5 # Watch for errors in real-time make logs | grep -i error # Check for specific error patterns docker logs firefly-iii-application.application 2 > & 1 | grep -i \"exception\\|error\\|failed\" Performance monitoring: 1 2 3 4 5 6 7 # Check resource usage docker stats firefly-iii-application.application # Database performance docker exec firefly-iii-application.mariadb \\ mysql -u application -p '${DB_PASSWORD}' \\ -e \"SHOW PROCESSLIST;\" Emergency Procedures \u00b6 Application unresponsive: 1. Check container health: docker ps 2. Review logs: make logs 3. Restart application: docker compose restart firefly-iii-application.application 4. If database issues, restart database: docker compose restart firefly-iii-application.mariadb Database corruption: 1. Stop application immediately 2. Restore from latest backup 3. Verify data integrity 4. Restart application Storage full: 1. Archive old logs and backups 2. Clean up temporary files 3. Extend storage if needed 4. Monitor space regularly Sources \u00b6 \"Firefly III Installation Guide\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 \"Firefly III Administration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/administration/ \u2014 retrieved 2025-01-09","title":"Runbook"},{"location":"ops/runbook/#startstop","text":"Starting the stack: 1 2 3 4 5 6 7 8 9 10 11 # Bootstrap environment (first time only) make bootstrap # Start all services make start # Verify services are running docker ps | grep firefly-iii-application # Check logs for any startup issues make logs Stopping the stack: 1 2 3 4 5 # Graceful shutdown make stop # Force stop if needed (last resort) docker compose down --remove-orphans Individual service management: 1 2 3 4 5 6 7 8 # Restart specific service docker compose restart firefly-iii-application.application # View logs for specific service make logs SERVICE = firefly-iii-application.application # Execute commands in application container make enter CMD = \"/bin/bash\"","title":"Start/Stop"},{"location":"ops/runbook/#backupsrestores","text":"Database backup (daily recommended): 1 2 3 4 5 6 7 8 9 10 11 # Create timestamped backup DATE = $( date +%Y%m%d_%H%M%S ) docker exec firefly-iii-application.mariadb mysqldump \\ -u application -p '${DB_PASSWORD}' application \\ > \"backup_firefly_ ${ DATE } .sql\" # Compress backup gzip \"backup_firefly_ ${ DATE } .sql\" # Verify backup integrity zcat \"backup_firefly_ ${ DATE } .sql.gz\" | head -20 File storage backup: 1 2 3 4 5 6 # Backup user uploads and application storage docker run --rm \\ -v firefly-iii-application-application-storage-data:/source:ro \\ -v $( pwd ) :/backup \\ alpine:latest \\ tar czf /backup/storage_backup_ $( date +%Y%m%d ) .tar.gz -C /source . Database restore: 1 2 3 4 5 6 7 8 9 10 # Stop application first docker compose stop firefly-iii-application.application # Restore database zcat backup_firefly_YYYYMMDD_HHMMSS.sql.gz | \\ docker exec -i firefly-iii-application.mariadb mysql \\ -u application -p '${DB_PASSWORD}' application # Restart application docker compose start firefly-iii-application.application Storage restore: 1 2 3 4 5 6 7 8 9 10 11 12 # Stop application docker compose stop firefly-iii-application.application # Restore files docker run --rm \\ -v firefly-iii-application-application-storage-data:/target \\ -v $( pwd ) :/backup:ro \\ alpine:latest \\ tar xzf /backup/storage_backup_YYYYMMDD.tar.gz -C /target # Restart application docker compose start firefly-iii-application.application","title":"Backups/Restores"},{"location":"ops/runbook/#health-readiness","text":"Health check endpoints: - Application : http://localhost:8080/health (via nginx) - Direct PHP-FPM : Not exposed externally - Database : Health check via container status - Redis : Health check via container status Container health verification: 1 2 3 4 5 6 7 8 # Check all container health status docker ps --format \"table {.Names}\\t{.Status}\\t{.Ports}\" # Detailed health check docker inspect firefly-iii-application.application | grep -A 5 Health # Manual health check curl -f http://localhost:8080/health || echo \"Health check failed\" Health check commands: 1 2 3 4 5 6 7 8 9 10 11 # Application health (internal) docker exec firefly-iii-application.application \\ php artisan firefly-iii:verify # Database connectivity docker exec firefly-iii-application.mariadb \\ mariadb --user = application --password = '${DB_PASSWORD}' \\ --execute = \"SELECT 1\" # Redis connectivity docker exec firefly-iii-application.redis redis-cli ping Expected health check responses: - HTTP 200 : Application healthy and database connected - HTTP 503 : Application starting or database unavailable - Connection refused : Service not running or network issue","title":"Health &amp; Readiness"},{"location":"ops/runbook/#maintenance-tasks","text":"Cache clearing (if performance issues): 1 2 3 4 5 # Clear application cache docker exec firefly-iii-application.application php artisan cache:clear # Clear Redis cache entirely (destructive) docker exec firefly-iii-application.redis redis-cli FLUSHALL Database maintenance: 1 2 3 4 5 6 7 8 9 10 11 12 13 # Check database size docker exec firefly-iii-application.mariadb \\ mysql -u application -p '${DB_PASSWORD}' \\ -e \"SELECT table_name AS 'Table', ROUND(((data_length + index_length) / 1024 / 1024), 2) AS 'Size (MB)' FROM information_schema.TABLES WHERE table_schema = 'application' ORDER BY (data_length + index_length) DESC;\" # Optimize database tables docker exec firefly-iii-application.mariadb \\ mysql -u application -p '${DB_PASSWORD}' \\ -e \"OPTIMIZE TABLE application.transactions, application.accounts, application.transaction_journals;\" Log rotation: 1 2 3 4 5 6 7 # Check log sizes docker exec firefly-iii-application.application \\ du -sh storage/logs/ # Archive old logs (keep last 7 days) docker exec firefly-iii-application.application \\ find storage/logs/ -name \"*.log\" -mtime +7 -delete Security updates: 1 2 3 4 5 6 # Check for container image updates docker compose pull # Update and restart (after testing in staging) docker compose down docker compose up -d User management: 1 2 3 4 5 6 7 8 # Create admin user make user:create EMAIL = admin@example.com PASS = secure_password # Reset user password (Laravel tinker) docker exec -it firefly-iii-application.application php artisan tinker >>> $user = User::where ( 'email' , 'admin@example.com' ) ->first () ; >>> $user ->password = Hash::make ( 'new_password' ) ; >>> $user ->save () ;","title":"Maintenance Tasks"},{"location":"ops/runbook/#monitoring-alerts","text":"Key metrics to monitor: - Container health status - HTTP response times and error rates - Database connection pool utilization - Redis memory usage and hit rates - Disk space for volumes - Transaction processing rates Log monitoring: 1 2 3 4 5 # Watch for errors in real-time make logs | grep -i error # Check for specific error patterns docker logs firefly-iii-application.application 2 > & 1 | grep -i \"exception\\|error\\|failed\" Performance monitoring: 1 2 3 4 5 6 7 # Check resource usage docker stats firefly-iii-application.application # Database performance docker exec firefly-iii-application.mariadb \\ mysql -u application -p '${DB_PASSWORD}' \\ -e \"SHOW PROCESSLIST;\"","title":"Monitoring &amp; Alerts"},{"location":"ops/runbook/#emergency-procedures","text":"Application unresponsive: 1. Check container health: docker ps 2. Review logs: make logs 3. Restart application: docker compose restart firefly-iii-application.application 4. If database issues, restart database: docker compose restart firefly-iii-application.mariadb Database corruption: 1. Stop application immediately 2. Restore from latest backup 3. Verify data integrity 4. Restart application Storage full: 1. Archive old logs and backups 2. Clean up temporary files 3. Extend storage if needed 4. Monitor space regularly","title":"Emergency Procedures"},{"location":"ops/runbook/#sources","text":"\"Firefly III Installation Guide\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 \"Firefly III Administration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/administration/ \u2014 retrieved 2025-01-09","title":"Sources"},{"location":"ops/upgrades-rollback/","text":"Purpose: Ensure safe and reliable version management. Contents - Upgrade Strategy - Pre-Upgrade Preparation - Upgrade Execution - Rollback Procedures - Validation & Testing - Sources Upgrade Strategy \u00b6 Tagging Policy: - Production : Use specific version tags (e.g., 6.1.17 , 6.1.18 ) - Staging : Use release candidate tags (e.g., 6.1.18-rc1 ) - Development : Use specific commits or feature branches - Never : Use latest tag in any environment Version Support Matrix: Environment Upgrade Frequency Version Lag Approval Required Development Immediate Latest RC Developer Staging Weekly 1-2 versions behind latest Team Lead Production Monthly 2-4 versions behind latest Change Board Upgrade Types: Type Example Database Changes Downtime Risk Level Patch 6.1.17 \u2192 6.1.18 Rare None Low Minor 6.1.x \u2192 6.2.0 Possible Minimal Medium Major 6.x \u2192 7.0 Likely Planned High Pre-Upgrade Preparation \u00b6 Backup Verification: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 # Create pre-upgrade backup DATE = $( date +%Y%m%d_%H%M%S ) BACKUP_DIR = \"/backups/pre-upgrade- ${ DATE } \" mkdir -p \" ${ BACKUP_DIR } \" # Database backup docker exec firefly-iii-application.mariadb mysqldump \\ -u application -p '${DB_PASSWORD}' application \\ > \" ${ BACKUP_DIR } /database.sql\" # Storage backup docker run --rm \\ -v firefly-iii-application-application-storage-data:/source:ro \\ -v \" ${ BACKUP_DIR } \" :/backup \\ alpine:latest \\ tar czf /backup/storage.tar.gz -C /source . # Configuration backup cp .env \" ${ BACKUP_DIR } /env.backup\" cp docker-compose.yml \" ${ BACKUP_DIR } /compose.backup\" # Verify backup integrity test -s \" ${ BACKUP_DIR } /database.sql\" || { echo \"Database backup failed\" ; exit 1 ; } test -s \" ${ BACKUP_DIR } /storage.tar.gz\" || { echo \"Storage backup failed\" ; exit 1 ; } Environment Validation: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # Check current version docker exec firefly-iii-application.application \\ php artisan --version # Verify system health curl -f http://localhost:8080/health || { echo \"System unhealthy\" ; exit 1 ; } # Check resource availability df -h | grep -E \"(/ $ |/var/lib/docker)\" | awk '$5 > \"80%\" {print \"Disk space warning: \" $0}' # Verify database connectivity docker exec firefly-iii-application.mariadb \\ mysql -u application -p '${DB_PASSWORD}' \\ -e \"SELECT COUNT(*) FROM transactions;\" || { echo \"Database check failed\" ; exit 1 ; } Change Documentation: 1 2 3 4 5 6 7 8 # Review changelog for breaking changes curl -s https://api.github.com/repos/firefly-iii/firefly-iii/releases/latest | \\ jq -r '.body' > changelog.md # Check for configuration changes echo \"Review configuration requirements in changelog.md\" echo \"Update .env file if necessary\" echo \"Verify all required environment variables are set\" Upgrade Execution \u00b6 Docker Compose Upgrade: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # Set target version TARGET_VERSION = \"6.1.18\" # Update docker-compose.yml sed -i.backup \"s/tag: \\\".*\\\"/tag: \\\" ${ TARGET_VERSION } \\\"/\" docker-compose.yml # Pull new images docker compose pull # Stop application (keep database running) docker compose stop firefly-iii-application.application firefly-iii-application.nginx # Start application with new version docker compose up -d firefly-iii-application.application firefly-iii-application.nginx # Wait for startup echo \"Waiting for application startup...\" timeout 300 bash -c 'until curl -f http://localhost:8080/health; do sleep 5; done' Kubernetes Upgrade: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # Update Helm values TARGET_VERSION = \"6.1.18\" yq eval \".application.controllers.main.containers.app.image.tag = \\\" ${ TARGET_VERSION } \\\"\" \\ -i ops/helm/application-application/values.yaml # Helm upgrade with rollback capability helm upgrade firefly-iii-application \\ ops/helm/application-application \\ --namespace firefly-iii-application \\ --wait \\ --timeout 10m \\ --atomic # Verify deployment kubectl get pods -n firefly-iii-application kubectl logs -n firefly-iii-application deployment/firefly-iii-application Database Migrations: 1 2 3 4 5 6 7 # Migrations run automatically on startup, but can be run manually docker exec firefly-iii-application.application \\ php artisan migrate --force # Check migration status docker exec firefly-iii-application.application \\ php artisan migrate:status Rollback Procedures \u00b6 Immediate Rollback (Docker Compose): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 # Restore previous version PREVIOUS_VERSION = \"6.1.17\" # Set to known good version # Stop current version docker compose down # Restore configuration cp docker-compose.yml.backup docker-compose.yml cp .env.backup .env # Update to previous version sed -i \"s/tag: \\\".*\\\"/tag: \\\" ${ PREVIOUS_VERSION } \\\"/\" docker-compose.yml # Restore database if needed if [ \" ${ RESTORE_DATABASE } \" = \"true\" ] ; then # Stop all services docker compose down # Restore database cat \" ${ BACKUP_DIR } /database.sql\" | \\ docker exec -i firefly-iii-application.mariadb \\ mysql -u application -p '${DB_PASSWORD}' application fi # Start previous version docker compose up -d # Verify rollback timeout 300 bash -c 'until curl -f http://localhost:8080/health; do sleep 5; done' Kubernetes Rollback: 1 2 3 4 5 6 7 8 9 10 # Helm rollback to previous release helm rollback firefly-iii-application -n firefly-iii-application # Or rollback to specific revision helm history firefly-iii-application -n firefly-iii-application helm rollback firefly-iii-application 3 -n firefly-iii-application # Verify rollback kubectl get pods -n firefly-iii-application kubectl rollout status deployment/firefly-iii-application -n firefly-iii-application Database Rollback: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # Database rollback (destructive - use with caution) # Only if database schema changes are incompatible # Stop application docker compose stop firefly-iii-application.application # Restore database from backup docker exec -i firefly-iii-application.mariadb \\ mysql -u application -p '${DB_PASSWORD}' application \\ < \" ${ BACKUP_DIR } /database.sql\" # Restore storage if needed docker run --rm \\ -v firefly-iii-application-application-storage-data:/target \\ -v \" ${ BACKUP_DIR } \" :/backup:ro \\ alpine:latest \\ tar xzf /backup/storage.tar.gz -C /target # Start application docker compose start firefly-iii-application.application Validation & Testing \u00b6 Post-Upgrade Validation: 1 2 3 4 5 6 7 8 9 10 11 12 13 # Health check validation curl -f http://localhost:8080/health | jq '.status' | grep -q \"healthy\" # Version verification CURRENT_VERSION = $( docker exec firefly-iii-application.application php artisan --version | grep -o 'v[0-9.]*' ) echo \"Current version: ${ CURRENT_VERSION } \" # Database integrity check docker exec firefly-iii-application.application \\ php artisan firefly-iii:verify # Basic functionality test curl -s http://localhost:8080/ | grep -q \"Firefly III\" Functional Testing: 1 2 3 4 5 6 7 8 9 10 11 12 # Test critical user journeys echo \"Testing login functionality...\" # Add automated login test here echo \"Testing transaction creation...\" # Add automated transaction test here echo \"Testing data export...\" # Add automated export test here echo \"Testing import functionality...\" # Add automated import test here Performance Validation: 1 2 3 4 5 6 7 8 9 10 11 12 # Response time check RESPONSE_TIME = $( curl -o /dev/null -s -w '%{time_total}' http://localhost:8080/ ) echo \"Response time: ${ RESPONSE_TIME } s\" # Memory usage check MEMORY_USAGE = $( docker stats --no-stream --format \"{.MemUsage}\" firefly-iii-application.application ) echo \"Memory usage: ${ MEMORY_USAGE } \" # Database performance check docker exec firefly-iii-application.mariadb \\ mysql -u application -p '${DB_PASSWORD}' \\ -e \"SHOW GLOBAL STATUS LIKE 'Threads_connected';\" Upgrade Checklist \u00b6 Pre-Upgrade: - [ ] Review changelog for breaking changes - [ ] Create database backup - [ ] Create storage backup - [ ] Verify system health - [ ] Schedule maintenance window - [ ] Notify users of potential downtime During Upgrade: - [ ] Update configuration files - [ ] Pull new container images - [ ] Stop application services - [ ] Start services with new version - [ ] Monitor startup logs - [ ] Verify health checks pass Post-Upgrade: - [ ] Validate version upgrade - [ ] Test critical functionality - [ ] Check performance metrics - [ ] Verify all services healthy - [ ] Document any issues encountered - [ ] Notify users of completion Rollback (if needed): - [ ] Stop current version - [ ] Restore previous configuration - [ ] Restore database if necessary - [ ] Start previous version - [ ] Verify rollback successful - [ ] Document rollback reason Emergency Procedures \u00b6 Critical Upgrade Failure: 1. Immediately stop the application 2. Restore from backup 3. Start previous version 4. Verify system health 5. Notify stakeholders 6. Investigate root cause Data Corruption Detection: 1. Stop application immediately 2. Do not restart until investigation complete 3. Restore from most recent clean backup 4. Document corruption details 5. Contact support if needed Sources \u00b6 \"Firefly III Upgrade Guide\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/upgrade/ \u2014 retrieved 2025-01-09 \"Firefly III Installation Guide\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09","title":"Upgrades & Rollback"},{"location":"ops/upgrades-rollback/#upgrade-strategy","text":"Tagging Policy: - Production : Use specific version tags (e.g., 6.1.17 , 6.1.18 ) - Staging : Use release candidate tags (e.g., 6.1.18-rc1 ) - Development : Use specific commits or feature branches - Never : Use latest tag in any environment Version Support Matrix: Environment Upgrade Frequency Version Lag Approval Required Development Immediate Latest RC Developer Staging Weekly 1-2 versions behind latest Team Lead Production Monthly 2-4 versions behind latest Change Board Upgrade Types: Type Example Database Changes Downtime Risk Level Patch 6.1.17 \u2192 6.1.18 Rare None Low Minor 6.1.x \u2192 6.2.0 Possible Minimal Medium Major 6.x \u2192 7.0 Likely Planned High","title":"Upgrade Strategy"},{"location":"ops/upgrades-rollback/#pre-upgrade-preparation","text":"Backup Verification: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 # Create pre-upgrade backup DATE = $( date +%Y%m%d_%H%M%S ) BACKUP_DIR = \"/backups/pre-upgrade- ${ DATE } \" mkdir -p \" ${ BACKUP_DIR } \" # Database backup docker exec firefly-iii-application.mariadb mysqldump \\ -u application -p '${DB_PASSWORD}' application \\ > \" ${ BACKUP_DIR } /database.sql\" # Storage backup docker run --rm \\ -v firefly-iii-application-application-storage-data:/source:ro \\ -v \" ${ BACKUP_DIR } \" :/backup \\ alpine:latest \\ tar czf /backup/storage.tar.gz -C /source . # Configuration backup cp .env \" ${ BACKUP_DIR } /env.backup\" cp docker-compose.yml \" ${ BACKUP_DIR } /compose.backup\" # Verify backup integrity test -s \" ${ BACKUP_DIR } /database.sql\" || { echo \"Database backup failed\" ; exit 1 ; } test -s \" ${ BACKUP_DIR } /storage.tar.gz\" || { echo \"Storage backup failed\" ; exit 1 ; } Environment Validation: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # Check current version docker exec firefly-iii-application.application \\ php artisan --version # Verify system health curl -f http://localhost:8080/health || { echo \"System unhealthy\" ; exit 1 ; } # Check resource availability df -h | grep -E \"(/ $ |/var/lib/docker)\" | awk '$5 > \"80%\" {print \"Disk space warning: \" $0}' # Verify database connectivity docker exec firefly-iii-application.mariadb \\ mysql -u application -p '${DB_PASSWORD}' \\ -e \"SELECT COUNT(*) FROM transactions;\" || { echo \"Database check failed\" ; exit 1 ; } Change Documentation: 1 2 3 4 5 6 7 8 # Review changelog for breaking changes curl -s https://api.github.com/repos/firefly-iii/firefly-iii/releases/latest | \\ jq -r '.body' > changelog.md # Check for configuration changes echo \"Review configuration requirements in changelog.md\" echo \"Update .env file if necessary\" echo \"Verify all required environment variables are set\"","title":"Pre-Upgrade Preparation"},{"location":"ops/upgrades-rollback/#upgrade-execution","text":"Docker Compose Upgrade: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # Set target version TARGET_VERSION = \"6.1.18\" # Update docker-compose.yml sed -i.backup \"s/tag: \\\".*\\\"/tag: \\\" ${ TARGET_VERSION } \\\"/\" docker-compose.yml # Pull new images docker compose pull # Stop application (keep database running) docker compose stop firefly-iii-application.application firefly-iii-application.nginx # Start application with new version docker compose up -d firefly-iii-application.application firefly-iii-application.nginx # Wait for startup echo \"Waiting for application startup...\" timeout 300 bash -c 'until curl -f http://localhost:8080/health; do sleep 5; done' Kubernetes Upgrade: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # Update Helm values TARGET_VERSION = \"6.1.18\" yq eval \".application.controllers.main.containers.app.image.tag = \\\" ${ TARGET_VERSION } \\\"\" \\ -i ops/helm/application-application/values.yaml # Helm upgrade with rollback capability helm upgrade firefly-iii-application \\ ops/helm/application-application \\ --namespace firefly-iii-application \\ --wait \\ --timeout 10m \\ --atomic # Verify deployment kubectl get pods -n firefly-iii-application kubectl logs -n firefly-iii-application deployment/firefly-iii-application Database Migrations: 1 2 3 4 5 6 7 # Migrations run automatically on startup, but can be run manually docker exec firefly-iii-application.application \\ php artisan migrate --force # Check migration status docker exec firefly-iii-application.application \\ php artisan migrate:status","title":"Upgrade Execution"},{"location":"ops/upgrades-rollback/#rollback-procedures","text":"Immediate Rollback (Docker Compose): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 # Restore previous version PREVIOUS_VERSION = \"6.1.17\" # Set to known good version # Stop current version docker compose down # Restore configuration cp docker-compose.yml.backup docker-compose.yml cp .env.backup .env # Update to previous version sed -i \"s/tag: \\\".*\\\"/tag: \\\" ${ PREVIOUS_VERSION } \\\"/\" docker-compose.yml # Restore database if needed if [ \" ${ RESTORE_DATABASE } \" = \"true\" ] ; then # Stop all services docker compose down # Restore database cat \" ${ BACKUP_DIR } /database.sql\" | \\ docker exec -i firefly-iii-application.mariadb \\ mysql -u application -p '${DB_PASSWORD}' application fi # Start previous version docker compose up -d # Verify rollback timeout 300 bash -c 'until curl -f http://localhost:8080/health; do sleep 5; done' Kubernetes Rollback: 1 2 3 4 5 6 7 8 9 10 # Helm rollback to previous release helm rollback firefly-iii-application -n firefly-iii-application # Or rollback to specific revision helm history firefly-iii-application -n firefly-iii-application helm rollback firefly-iii-application 3 -n firefly-iii-application # Verify rollback kubectl get pods -n firefly-iii-application kubectl rollout status deployment/firefly-iii-application -n firefly-iii-application Database Rollback: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # Database rollback (destructive - use with caution) # Only if database schema changes are incompatible # Stop application docker compose stop firefly-iii-application.application # Restore database from backup docker exec -i firefly-iii-application.mariadb \\ mysql -u application -p '${DB_PASSWORD}' application \\ < \" ${ BACKUP_DIR } /database.sql\" # Restore storage if needed docker run --rm \\ -v firefly-iii-application-application-storage-data:/target \\ -v \" ${ BACKUP_DIR } \" :/backup:ro \\ alpine:latest \\ tar xzf /backup/storage.tar.gz -C /target # Start application docker compose start firefly-iii-application.application","title":"Rollback Procedures"},{"location":"ops/upgrades-rollback/#validation-testing","text":"Post-Upgrade Validation: 1 2 3 4 5 6 7 8 9 10 11 12 13 # Health check validation curl -f http://localhost:8080/health | jq '.status' | grep -q \"healthy\" # Version verification CURRENT_VERSION = $( docker exec firefly-iii-application.application php artisan --version | grep -o 'v[0-9.]*' ) echo \"Current version: ${ CURRENT_VERSION } \" # Database integrity check docker exec firefly-iii-application.application \\ php artisan firefly-iii:verify # Basic functionality test curl -s http://localhost:8080/ | grep -q \"Firefly III\" Functional Testing: 1 2 3 4 5 6 7 8 9 10 11 12 # Test critical user journeys echo \"Testing login functionality...\" # Add automated login test here echo \"Testing transaction creation...\" # Add automated transaction test here echo \"Testing data export...\" # Add automated export test here echo \"Testing import functionality...\" # Add automated import test here Performance Validation: 1 2 3 4 5 6 7 8 9 10 11 12 # Response time check RESPONSE_TIME = $( curl -o /dev/null -s -w '%{time_total}' http://localhost:8080/ ) echo \"Response time: ${ RESPONSE_TIME } s\" # Memory usage check MEMORY_USAGE = $( docker stats --no-stream --format \"{.MemUsage}\" firefly-iii-application.application ) echo \"Memory usage: ${ MEMORY_USAGE } \" # Database performance check docker exec firefly-iii-application.mariadb \\ mysql -u application -p '${DB_PASSWORD}' \\ -e \"SHOW GLOBAL STATUS LIKE 'Threads_connected';\"","title":"Validation &amp; Testing"},{"location":"ops/upgrades-rollback/#upgrade-checklist","text":"Pre-Upgrade: - [ ] Review changelog for breaking changes - [ ] Create database backup - [ ] Create storage backup - [ ] Verify system health - [ ] Schedule maintenance window - [ ] Notify users of potential downtime During Upgrade: - [ ] Update configuration files - [ ] Pull new container images - [ ] Stop application services - [ ] Start services with new version - [ ] Monitor startup logs - [ ] Verify health checks pass Post-Upgrade: - [ ] Validate version upgrade - [ ] Test critical functionality - [ ] Check performance metrics - [ ] Verify all services healthy - [ ] Document any issues encountered - [ ] Notify users of completion Rollback (if needed): - [ ] Stop current version - [ ] Restore previous configuration - [ ] Restore database if necessary - [ ] Start previous version - [ ] Verify rollback successful - [ ] Document rollback reason","title":"Upgrade Checklist"},{"location":"ops/upgrades-rollback/#emergency-procedures","text":"Critical Upgrade Failure: 1. Immediately stop the application 2. Restore from backup 3. Start previous version 4. Verify system health 5. Notify stakeholders 6. Investigate root cause Data Corruption Detection: 1. Stop application immediately 2. Do not restart until investigation complete 3. Restore from most recent clean backup 4. Document corruption details 5. Contact support if needed","title":"Emergency Procedures"},{"location":"ops/upgrades-rollback/#sources","text":"\"Firefly III Upgrade Guide\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/upgrade/ \u2014 retrieved 2025-01-09 \"Firefly III Installation Guide\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09","title":"Sources"},{"location":"ops/troubleshooting/connectivity/","text":"Purpose: Resolve network and connectivity issues. Contents - External Access Issues - Service Communication - Database Connectivity - Cache Connectivity - Sources External Access Issues \u00b6 Symptom: Cannot access Firefly III from browser Issue Symptom Diagnosis Solution Source Connection refused Browser can't reach site Service not running or port blocked Check service status and firewall \"Firefly III Installation\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 502 Bad Gateway Nginx shows 502 error PHP-FPM not responding Restart application container \"Nginx Troubleshooting\" \u2014 ops/docker/nginx/ \u2014 retrieved 2025-01-09 Slow loading Pages load very slowly Resource exhaustion or network issues Check container resources and network \"Performance Guide\" \u2014 docs/techdocs/ops/troubleshooting/performance.md \u2014 retrieved 2025-01-09 Diagnostic Commands: 1 2 3 4 5 6 7 8 9 10 11 # Test external connectivity curl -v http://localhost:8080/ # Check port binding netstat -tulpn | grep :8080 # Test from different network curl -v http:// $( hostname -I | awk '{print $1}' ) :8080/ # Check firewall status sudo ufw status verbose Service Communication \u00b6 Inter-container communication issues: Service Pair Error Diagnosis Solution Source App \u2192 Database Connection refused Network or service issue Check container network and database health \"Docker Networking\" \u2014 docker-compose.yml \u2014 retrieved 2025-01-09 App \u2192 Redis Redis timeout Redis not responding Verify Redis container status \"Redis Configuration\" \u2014 ops/docker/redis/ \u2014 retrieved 2025-01-09 Nginx \u2192 App 502/504 errors PHP-FPM not responding Check application container logs \"Nginx Configuration\" \u2014 ops/docker/nginx/ \u2014 retrieved 2025-01-09 Service Communication Tests: 1 2 3 4 5 6 7 8 9 10 11 # Test database connectivity from app docker exec firefly-iii-application.application nc -zv firefly-iii-application.mariadb 3306 # Test Redis connectivity from app docker exec firefly-iii-application.application nc -zv firefly-iii-application.redis 6379 # Test app connectivity from nginx docker exec firefly-iii-application.nginx nc -zv firefly-iii-application.application 9000 # Check container network docker network inspect webgrip Database Connectivity \u00b6 Common database connection issues: Issue Symptom Resolution Source Max connections reached \"Too many connections\" Increase max_connections or fix connection leaks \"MariaDB Tuning\" \u2014 https://mariadb.com/kb/en/server-system-variables/#max_connections \u2014 retrieved 2025-01-09 Connection timeout Queries hang Check wait_timeout and interactive_timeout \"MariaDB Configuration\" \u2014 ops/docker/mariadb/ \u2014 retrieved 2025-01-09 Authentication failure Access denied Verify credentials and host permissions \"Database Setup\" \u2014 docs/techdocs/app/integrations/database.md \u2014 retrieved 2025-01-09 Cache Connectivity \u00b6 Redis connection troubleshooting: Issue Symptom Resolution Source Memory full Redis OOM errors Increase memory limit or implement eviction \"Redis Memory\" \u2014 https://redis.io/docs/manual/eviction/ \u2014 retrieved 2025-01-09 Connection drops Intermittent failures Check tcp-keepalive settings \"Redis Configuration\" \u2014 ops/docker/redis/ \u2014 retrieved 2025-01-09 Slow responses High latency Monitor Redis performance metrics \"Cache Performance\" \u2014 docs/techdocs/app/integrations/cache.md \u2014 retrieved 2025-01-09 Sources \u00b6 \"Firefly III Installation Guide\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 \"Docker Networking\" \u2014 https://docs.docker.com/network/ \u2014 retrieved 2025-01-09","title":"Connectivity"},{"location":"ops/troubleshooting/connectivity/#external-access-issues","text":"Symptom: Cannot access Firefly III from browser Issue Symptom Diagnosis Solution Source Connection refused Browser can't reach site Service not running or port blocked Check service status and firewall \"Firefly III Installation\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 502 Bad Gateway Nginx shows 502 error PHP-FPM not responding Restart application container \"Nginx Troubleshooting\" \u2014 ops/docker/nginx/ \u2014 retrieved 2025-01-09 Slow loading Pages load very slowly Resource exhaustion or network issues Check container resources and network \"Performance Guide\" \u2014 docs/techdocs/ops/troubleshooting/performance.md \u2014 retrieved 2025-01-09 Diagnostic Commands: 1 2 3 4 5 6 7 8 9 10 11 # Test external connectivity curl -v http://localhost:8080/ # Check port binding netstat -tulpn | grep :8080 # Test from different network curl -v http:// $( hostname -I | awk '{print $1}' ) :8080/ # Check firewall status sudo ufw status verbose","title":"External Access Issues"},{"location":"ops/troubleshooting/connectivity/#service-communication","text":"Inter-container communication issues: Service Pair Error Diagnosis Solution Source App \u2192 Database Connection refused Network or service issue Check container network and database health \"Docker Networking\" \u2014 docker-compose.yml \u2014 retrieved 2025-01-09 App \u2192 Redis Redis timeout Redis not responding Verify Redis container status \"Redis Configuration\" \u2014 ops/docker/redis/ \u2014 retrieved 2025-01-09 Nginx \u2192 App 502/504 errors PHP-FPM not responding Check application container logs \"Nginx Configuration\" \u2014 ops/docker/nginx/ \u2014 retrieved 2025-01-09 Service Communication Tests: 1 2 3 4 5 6 7 8 9 10 11 # Test database connectivity from app docker exec firefly-iii-application.application nc -zv firefly-iii-application.mariadb 3306 # Test Redis connectivity from app docker exec firefly-iii-application.application nc -zv firefly-iii-application.redis 6379 # Test app connectivity from nginx docker exec firefly-iii-application.nginx nc -zv firefly-iii-application.application 9000 # Check container network docker network inspect webgrip","title":"Service Communication"},{"location":"ops/troubleshooting/connectivity/#database-connectivity","text":"Common database connection issues: Issue Symptom Resolution Source Max connections reached \"Too many connections\" Increase max_connections or fix connection leaks \"MariaDB Tuning\" \u2014 https://mariadb.com/kb/en/server-system-variables/#max_connections \u2014 retrieved 2025-01-09 Connection timeout Queries hang Check wait_timeout and interactive_timeout \"MariaDB Configuration\" \u2014 ops/docker/mariadb/ \u2014 retrieved 2025-01-09 Authentication failure Access denied Verify credentials and host permissions \"Database Setup\" \u2014 docs/techdocs/app/integrations/database.md \u2014 retrieved 2025-01-09","title":"Database Connectivity"},{"location":"ops/troubleshooting/connectivity/#cache-connectivity","text":"Redis connection troubleshooting: Issue Symptom Resolution Source Memory full Redis OOM errors Increase memory limit or implement eviction \"Redis Memory\" \u2014 https://redis.io/docs/manual/eviction/ \u2014 retrieved 2025-01-09 Connection drops Intermittent failures Check tcp-keepalive settings \"Redis Configuration\" \u2014 ops/docker/redis/ \u2014 retrieved 2025-01-09 Slow responses High latency Monitor Redis performance metrics \"Cache Performance\" \u2014 docs/techdocs/app/integrations/cache.md \u2014 retrieved 2025-01-09","title":"Cache Connectivity"},{"location":"ops/troubleshooting/connectivity/#sources","text":"\"Firefly III Installation Guide\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 \"Docker Networking\" \u2014 https://docs.docker.com/network/ \u2014 retrieved 2025-01-09","title":"Sources"},{"location":"ops/troubleshooting/performance/","text":"Purpose: Diagnose and resolve performance issues. Contents - Slow Response Times - High Resource Usage - Database Performance - Cache Performance - Sources Slow Response Times \u00b6 Symptom: Pages load slowly or time out Issue Cause Diagnosis Solution Source High CPU usage Resource exhaustion Monitor with docker stats Scale resources or optimize code \"Performance Tuning\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 Memory pressure Insufficient RAM Check memory usage patterns Increase memory limits \"Container Resources\" \u2014 docker-compose.yml \u2014 retrieved 2025-01-09 Disk I/O bottleneck Slow storage Monitor disk utilization Use faster storage or optimize queries \"Storage Performance\" \u2014 https://docs.docker.com/storage/ \u2014 retrieved 2025-01-09 Performance Monitoring: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # Monitor container resources docker stats firefly-iii-application.application --no-stream # Check system load uptime # Monitor disk I/O iostat -x 1 5 # Check memory usage free -h # Monitor network iftop -t -s 10 High Resource Usage \u00b6 Resource optimization strategies: Resource Monitoring Optimization Source CPU docker stats , top Optimize queries, enable caching \"PHP Performance\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 Memory docker stats , free Tune PHP memory limits, optimize cache \"Memory Tuning\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 Disk df , iostat Archive old data, optimize storage \"Storage Management\" \u2014 docs/techdocs/app/configuration/files-and-paths.md \u2014 retrieved 2025-01-09 Database Performance \u00b6 Database optimization checks: Issue Symptom Solution Source Slow queries High response times Analyze and optimize slow queries \"MariaDB Performance\" \u2014 https://mariadb.com/kb/en/optimization-and-tuning/ \u2014 retrieved 2025-01-09 Lock contention Blocking transactions Optimize transaction scope and indexing \"Database Optimization\" \u2014 docs/techdocs/app/integrations/database.md \u2014 retrieved 2025-01-09 Table bloat Large table sizes Regular maintenance and optimization \"Database Maintenance\" \u2014 docs/techdocs/ops/runbook.md \u2014 retrieved 2025-01-09 Database Performance Commands: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # Check slow queries docker exec firefly-iii-application.mariadb \\ mysql -u application -p '${DB_PASSWORD}' \\ -e \"SELECT * FROM information_schema.processlist WHERE time > 30;\" # Check table sizes docker exec firefly-iii-application.mariadb \\ mysql -u application -p '${DB_PASSWORD}' \\ -e \"SELECT table_name, ROUND(((data_length + index_length) / 1024 / 1024), 2) AS 'Size (MB)' FROM information_schema.tables WHERE table_schema = 'application' ORDER BY (data_length + index_length) DESC LIMIT 10;\" # Optimize tables docker exec firefly-iii-application.mariadb \\ mysql -u application -p '${DB_PASSWORD}' \\ -e \"OPTIMIZE TABLE application.transactions, application.accounts, application.transaction_journals;\" Cache Performance \u00b6 Redis performance optimization: Metric Command Target Action if Poor Source Hit ratio redis-cli info stats >90% Review cache strategy \"Redis Performance\" \u2014 https://redis.io/docs/manual/performance/ \u2014 retrieved 2025-01-09 Memory usage redis-cli info memory <80% of limit Increase memory or eviction policy \"Cache Configuration\" \u2014 docs/techdocs/app/integrations/cache.md \u2014 retrieved 2025-01-09 Response time Custom monitoring <5ms Check network and memory \"Redis Monitoring\" \u2014 https://redis.io/docs/manual/admin/ \u2014 retrieved 2025-01-09 Cache Performance Commands: 1 2 3 4 5 6 7 8 9 10 11 # Check Redis performance docker exec firefly-iii-application.redis redis-cli info stats | grep -E \"(hits|misses)\" # Monitor Redis memory docker exec firefly-iii-application.redis redis-cli info memory # Check Redis latency docker exec firefly-iii-application.redis redis-cli --latency-history # Monitor Redis operations docker exec firefly-iii-application.redis redis-cli monitor Sources \u00b6 \"Firefly III Performance Guide\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 \"Docker Performance Tuning\" \u2014 https://docs.docker.com/config/containers/resource_constraints/ \u2014 retrieved 2025-01-09","title":"Performance"},{"location":"ops/troubleshooting/performance/#slow-response-times","text":"Symptom: Pages load slowly or time out Issue Cause Diagnosis Solution Source High CPU usage Resource exhaustion Monitor with docker stats Scale resources or optimize code \"Performance Tuning\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 Memory pressure Insufficient RAM Check memory usage patterns Increase memory limits \"Container Resources\" \u2014 docker-compose.yml \u2014 retrieved 2025-01-09 Disk I/O bottleneck Slow storage Monitor disk utilization Use faster storage or optimize queries \"Storage Performance\" \u2014 https://docs.docker.com/storage/ \u2014 retrieved 2025-01-09 Performance Monitoring: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # Monitor container resources docker stats firefly-iii-application.application --no-stream # Check system load uptime # Monitor disk I/O iostat -x 1 5 # Check memory usage free -h # Monitor network iftop -t -s 10","title":"Slow Response Times"},{"location":"ops/troubleshooting/performance/#high-resource-usage","text":"Resource optimization strategies: Resource Monitoring Optimization Source CPU docker stats , top Optimize queries, enable caching \"PHP Performance\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 Memory docker stats , free Tune PHP memory limits, optimize cache \"Memory Tuning\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 Disk df , iostat Archive old data, optimize storage \"Storage Management\" \u2014 docs/techdocs/app/configuration/files-and-paths.md \u2014 retrieved 2025-01-09","title":"High Resource Usage"},{"location":"ops/troubleshooting/performance/#database-performance","text":"Database optimization checks: Issue Symptom Solution Source Slow queries High response times Analyze and optimize slow queries \"MariaDB Performance\" \u2014 https://mariadb.com/kb/en/optimization-and-tuning/ \u2014 retrieved 2025-01-09 Lock contention Blocking transactions Optimize transaction scope and indexing \"Database Optimization\" \u2014 docs/techdocs/app/integrations/database.md \u2014 retrieved 2025-01-09 Table bloat Large table sizes Regular maintenance and optimization \"Database Maintenance\" \u2014 docs/techdocs/ops/runbook.md \u2014 retrieved 2025-01-09 Database Performance Commands: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # Check slow queries docker exec firefly-iii-application.mariadb \\ mysql -u application -p '${DB_PASSWORD}' \\ -e \"SELECT * FROM information_schema.processlist WHERE time > 30;\" # Check table sizes docker exec firefly-iii-application.mariadb \\ mysql -u application -p '${DB_PASSWORD}' \\ -e \"SELECT table_name, ROUND(((data_length + index_length) / 1024 / 1024), 2) AS 'Size (MB)' FROM information_schema.tables WHERE table_schema = 'application' ORDER BY (data_length + index_length) DESC LIMIT 10;\" # Optimize tables docker exec firefly-iii-application.mariadb \\ mysql -u application -p '${DB_PASSWORD}' \\ -e \"OPTIMIZE TABLE application.transactions, application.accounts, application.transaction_journals;\"","title":"Database Performance"},{"location":"ops/troubleshooting/performance/#cache-performance","text":"Redis performance optimization: Metric Command Target Action if Poor Source Hit ratio redis-cli info stats >90% Review cache strategy \"Redis Performance\" \u2014 https://redis.io/docs/manual/performance/ \u2014 retrieved 2025-01-09 Memory usage redis-cli info memory <80% of limit Increase memory or eviction policy \"Cache Configuration\" \u2014 docs/techdocs/app/integrations/cache.md \u2014 retrieved 2025-01-09 Response time Custom monitoring <5ms Check network and memory \"Redis Monitoring\" \u2014 https://redis.io/docs/manual/admin/ \u2014 retrieved 2025-01-09 Cache Performance Commands: 1 2 3 4 5 6 7 8 9 10 11 # Check Redis performance docker exec firefly-iii-application.redis redis-cli info stats | grep -E \"(hits|misses)\" # Monitor Redis memory docker exec firefly-iii-application.redis redis-cli info memory # Check Redis latency docker exec firefly-iii-application.redis redis-cli --latency-history # Monitor Redis operations docker exec firefly-iii-application.redis redis-cli monitor","title":"Cache Performance"},{"location":"ops/troubleshooting/performance/#sources","text":"\"Firefly III Performance Guide\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 \"Docker Performance Tuning\" \u2014 https://docs.docker.com/config/containers/resource_constraints/ \u2014 retrieved 2025-01-09","title":"Sources"},{"location":"ops/troubleshooting/startup/","text":"Purpose: Resolve common startup and initialization issues. Contents - Container Startup Issues - Database Connection Problems - Application Initialization - Configuration Issues - Sources Container Startup Issues \u00b6 Symptom: Containers fail to start or exit immediately Issue Symptom Cause Solution Source Container exits with code 125 docker ps shows no containers Invalid configuration or missing image Check docker-compose.yml syntax, verify image availability \"Docker Troubleshooting\" \u2014 https://docs.docker.com/engine/reference/run/ \u2014 retrieved 2025-01-09 Port binding errors port already in use error Another service using same port Stop conflicting service or change port mapping \"Docker Troubleshooting\" \u2014 https://docs.docker.com/engine/reference/run/ \u2014 retrieved 2025-01-09 Volume mount failures Permission denied errors Incorrect file permissions Fix file ownership: sudo chown -R 1000:1000 ./data \"Docker Troubleshooting\" \u2014 https://docs.docker.com/engine/reference/run/ \u2014 retrieved 2025-01-09 Memory/CPU limits Container killed (OOMKilled) Insufficient resources Increase memory limits or optimize application \"Docker Troubleshooting\" \u2014 https://docs.docker.com/engine/reference/run/ \u2014 retrieved 2025-01-09 Diagnostic Commands: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # Check container status docker ps -a | grep firefly-iii-application # View container logs docker logs firefly-iii-application.application --tail 50 # Check resource usage docker stats firefly-iii-application.application --no-stream # Inspect container configuration docker inspect firefly-iii-application.application | jq '.State' # Check for port conflicts netstat -tulpn | grep :8080 Common Startup Fixes: 1 2 3 4 5 6 7 8 9 10 11 # Clear stopped containers docker compose down --remove-orphans # Rebuild containers if needed docker compose build --no-cache # Pull latest images docker compose pull # Start with verbose logging docker compose up -d && docker compose logs -f Database Connection Problems \u00b6 Symptom: Application fails to connect to database Issue Error Message Diagnosis Solution Source Database not ready Connection refused Database container not started Wait for database health check or restart database \"Firefly III Installation\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 Wrong credentials Access denied Incorrect username/password Verify DB_USERNAME and DB_PASSWORD in .env \"Firefly III Installation\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 Database doesn't exist Unknown database Database not created Check MARIADB_DATABASE environment variable \"Firefly III Installation\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 Character set issues Incorrect string value Wrong character set Ensure utf8mb4 character set in database \"Firefly III Installation\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 Database Diagnostic Commands: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # Check database container health docker exec firefly-iii-application.mariadb \\ mysql -u root -p '${DB_ROOT_PASSWORD}' \\ -e \"SHOW DATABASES;\" # Test application database connection docker exec firefly-iii-application.mariadb \\ mysql -u application -p '${DB_PASSWORD}' application \\ -e \"SELECT 1;\" # Check database character set docker exec firefly-iii-application.mariadb \\ mysql -u application -p '${DB_PASSWORD}' \\ -e \"SELECT @@character_set_database, @@collation_database;\" # Verify database user permissions docker exec firefly-iii-application.mariadb \\ mysql -u root -p '${DB_ROOT_PASSWORD}' \\ -e \"SHOW GRANTS FOR 'application'@'%';\" Database Connection Fixes: 1 2 3 4 5 6 7 8 9 10 11 # Reset database container docker compose stop firefly-iii-application.mariadb docker compose start firefly-iii-application.mariadb # Wait for database to be ready timeout 60 bash -c 'until docker exec firefly-iii-application.mariadb mysql -u application -p\"${DB_PASSWORD}\" -e \"SELECT 1\" >/dev/null 2>&1; do sleep 2; done' # Recreate database with correct settings docker exec firefly-iii-application.mariadb \\ mysql -u root -p '${DB_ROOT_PASSWORD}' \\ -e \"DROP DATABASE IF EXISTS application; CREATE DATABASE application CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\" Application Initialization \u00b6 Symptom: Application starts but fails during initialization Issue Log Message Cause Solution Source Missing APP_KEY No application encryption key APP_KEY not set Generate: docker exec app php artisan key:generate \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 Migration failures Migration failed Database schema issues Check database permissions and run migrations manually \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 Cache/config issues Configuration cache errors Stale cache files Clear cache: php artisan config:clear \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 Permission errors Permission denied File system permissions Fix storage permissions: chown -R www-data:www-data storage \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 Application Diagnostic Commands: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # Check Laravel environment docker exec firefly-iii-application.application php artisan env # Verify configuration docker exec firefly-iii-application.application php artisan config:show # Check migration status docker exec firefly-iii-application.application php artisan migrate:status # Verify file permissions docker exec firefly-iii-application.application ls -la storage/ # Test application configuration docker exec firefly-iii-application.application php artisan firefly-iii:verify Application Initialization Fixes: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # Generate application key docker exec firefly-iii-application.application php artisan key:generate # Clear all caches docker exec firefly-iii-application.application php artisan cache:clear docker exec firefly-iii-application.application php artisan config:clear docker exec firefly-iii-application.application php artisan route:clear docker exec firefly-iii-application.application php artisan view:clear # Run migrations manually docker exec firefly-iii-application.application php artisan migrate --force # Fix storage permissions docker exec firefly-iii-application.application chown -R www-data:www-data storage bootstrap/cache Configuration Issues \u00b6 Symptom: Application starts but behaves incorrectly Issue Symptom Common Cause Solution Source Wrong base URL Links point to localhost APP_URL misconfigured Set correct APP_URL in .env \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 Timezone issues Wrong timestamps APP_TIMEZONE not set Set APP_TIMEZONE=Europe/Amsterdam \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 Email not working No emails sent MAIL_* variables wrong Configure SMTP settings correctly \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 Cache not working Slow performance Redis connection failed Check REDIS_HOST and REDIS_PORT \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 Configuration Validation: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # Validate critical environment variables docker exec firefly-iii-application.application env | grep -E \"(APP_|DB_|REDIS_)\" | sort # Test Redis connection docker exec firefly-iii-application.application \\ php -r \" \\$redis = new Redis(); \\$redis->connect('firefly-iii-application.redis', 6379); echo \\$redis->ping() ? 'Redis OK' : 'Redis Failed'; \" # Test email configuration (development only) docker exec firefly-iii-application.application \\ php artisan tinker --execute = \"Mail::raw('Test', function(\\$m) { \\$m->to('test@example.com')->subject('Test'); });\" # Verify URL configuration curl -I http://localhost:8080/ | grep -i location Startup Sequence Troubleshooting \u00b6 Normal Startup Sequence: 1. Database container starts and initializes 2. Redis container starts 3. Application container starts 4. Database migrations run 5. Cache warming occurs 6. Nginx starts and serves traffic Startup Timeline Issues: Step Timeout Failure Mode Debug Command Database ready 30s Connection refused docker logs firefly-iii-application.mariadb Redis ready 5s Connection refused docker logs firefly-iii-application.redis Migrations 60s SQL errors docker exec app php artisan migrate:status App startup 90s PHP errors docker logs firefly-iii-application.application Health check 60s HTTP 503 curl -v http://localhost:8080/health Startup Sequence Debug: 1 2 3 4 5 6 7 8 9 # Monitor startup sequence watch -n 2 'docker ps --format \"table {.Names}\\t{.Status}\\t{.Ports}\"' # Check dependency order docker compose config | grep -A 5 depends_on # Test service dependencies manually docker exec firefly-iii-application.application nc -zv firefly-iii-application.mariadb 3306 docker exec firefly-iii-application.application nc -zv firefly-iii-application.redis 6379 Quick Recovery Scripts \u00b6 Full Stack Restart: 1 2 3 4 5 6 7 8 #!/bin/bash # full-restart.sh docker compose down docker compose pull docker compose up -d echo \"Waiting for services to be ready...\" timeout 300 bash -c 'until curl -f http://localhost:8080/health >/dev/null 2>&1; do sleep 5; done' echo \"Services ready!\" Database Reset (Development Only): 1 2 3 4 5 6 7 #!/bin/bash # reset-database.sh docker compose stop firefly-iii-application.application docker compose exec firefly-iii-application.mariadb \\ mysql -u root -p \" ${ DB_ROOT_PASSWORD } \" \\ -e \"DROP DATABASE application; CREATE DATABASE application CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\" docker compose start firefly-iii-application.application Sources \u00b6 \"Firefly III Installation Guide\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 \"Docker Troubleshooting Guide\" \u2014 https://docs.docker.com/engine/reference/run/ \u2014 retrieved 2025-01-09","title":"Startup"},{"location":"ops/troubleshooting/startup/#container-startup-issues","text":"Symptom: Containers fail to start or exit immediately Issue Symptom Cause Solution Source Container exits with code 125 docker ps shows no containers Invalid configuration or missing image Check docker-compose.yml syntax, verify image availability \"Docker Troubleshooting\" \u2014 https://docs.docker.com/engine/reference/run/ \u2014 retrieved 2025-01-09 Port binding errors port already in use error Another service using same port Stop conflicting service or change port mapping \"Docker Troubleshooting\" \u2014 https://docs.docker.com/engine/reference/run/ \u2014 retrieved 2025-01-09 Volume mount failures Permission denied errors Incorrect file permissions Fix file ownership: sudo chown -R 1000:1000 ./data \"Docker Troubleshooting\" \u2014 https://docs.docker.com/engine/reference/run/ \u2014 retrieved 2025-01-09 Memory/CPU limits Container killed (OOMKilled) Insufficient resources Increase memory limits or optimize application \"Docker Troubleshooting\" \u2014 https://docs.docker.com/engine/reference/run/ \u2014 retrieved 2025-01-09 Diagnostic Commands: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # Check container status docker ps -a | grep firefly-iii-application # View container logs docker logs firefly-iii-application.application --tail 50 # Check resource usage docker stats firefly-iii-application.application --no-stream # Inspect container configuration docker inspect firefly-iii-application.application | jq '.State' # Check for port conflicts netstat -tulpn | grep :8080 Common Startup Fixes: 1 2 3 4 5 6 7 8 9 10 11 # Clear stopped containers docker compose down --remove-orphans # Rebuild containers if needed docker compose build --no-cache # Pull latest images docker compose pull # Start with verbose logging docker compose up -d && docker compose logs -f","title":"Container Startup Issues"},{"location":"ops/troubleshooting/startup/#database-connection-problems","text":"Symptom: Application fails to connect to database Issue Error Message Diagnosis Solution Source Database not ready Connection refused Database container not started Wait for database health check or restart database \"Firefly III Installation\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 Wrong credentials Access denied Incorrect username/password Verify DB_USERNAME and DB_PASSWORD in .env \"Firefly III Installation\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 Database doesn't exist Unknown database Database not created Check MARIADB_DATABASE environment variable \"Firefly III Installation\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 Character set issues Incorrect string value Wrong character set Ensure utf8mb4 character set in database \"Firefly III Installation\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 Database Diagnostic Commands: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # Check database container health docker exec firefly-iii-application.mariadb \\ mysql -u root -p '${DB_ROOT_PASSWORD}' \\ -e \"SHOW DATABASES;\" # Test application database connection docker exec firefly-iii-application.mariadb \\ mysql -u application -p '${DB_PASSWORD}' application \\ -e \"SELECT 1;\" # Check database character set docker exec firefly-iii-application.mariadb \\ mysql -u application -p '${DB_PASSWORD}' \\ -e \"SELECT @@character_set_database, @@collation_database;\" # Verify database user permissions docker exec firefly-iii-application.mariadb \\ mysql -u root -p '${DB_ROOT_PASSWORD}' \\ -e \"SHOW GRANTS FOR 'application'@'%';\" Database Connection Fixes: 1 2 3 4 5 6 7 8 9 10 11 # Reset database container docker compose stop firefly-iii-application.mariadb docker compose start firefly-iii-application.mariadb # Wait for database to be ready timeout 60 bash -c 'until docker exec firefly-iii-application.mariadb mysql -u application -p\"${DB_PASSWORD}\" -e \"SELECT 1\" >/dev/null 2>&1; do sleep 2; done' # Recreate database with correct settings docker exec firefly-iii-application.mariadb \\ mysql -u root -p '${DB_ROOT_PASSWORD}' \\ -e \"DROP DATABASE IF EXISTS application; CREATE DATABASE application CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\"","title":"Database Connection Problems"},{"location":"ops/troubleshooting/startup/#application-initialization","text":"Symptom: Application starts but fails during initialization Issue Log Message Cause Solution Source Missing APP_KEY No application encryption key APP_KEY not set Generate: docker exec app php artisan key:generate \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 Migration failures Migration failed Database schema issues Check database permissions and run migrations manually \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 Cache/config issues Configuration cache errors Stale cache files Clear cache: php artisan config:clear \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 Permission errors Permission denied File system permissions Fix storage permissions: chown -R www-data:www-data storage \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 Application Diagnostic Commands: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # Check Laravel environment docker exec firefly-iii-application.application php artisan env # Verify configuration docker exec firefly-iii-application.application php artisan config:show # Check migration status docker exec firefly-iii-application.application php artisan migrate:status # Verify file permissions docker exec firefly-iii-application.application ls -la storage/ # Test application configuration docker exec firefly-iii-application.application php artisan firefly-iii:verify Application Initialization Fixes: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # Generate application key docker exec firefly-iii-application.application php artisan key:generate # Clear all caches docker exec firefly-iii-application.application php artisan cache:clear docker exec firefly-iii-application.application php artisan config:clear docker exec firefly-iii-application.application php artisan route:clear docker exec firefly-iii-application.application php artisan view:clear # Run migrations manually docker exec firefly-iii-application.application php artisan migrate --force # Fix storage permissions docker exec firefly-iii-application.application chown -R www-data:www-data storage bootstrap/cache","title":"Application Initialization"},{"location":"ops/troubleshooting/startup/#configuration-issues","text":"Symptom: Application starts but behaves incorrectly Issue Symptom Common Cause Solution Source Wrong base URL Links point to localhost APP_URL misconfigured Set correct APP_URL in .env \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 Timezone issues Wrong timestamps APP_TIMEZONE not set Set APP_TIMEZONE=Europe/Amsterdam \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 Email not working No emails sent MAIL_* variables wrong Configure SMTP settings correctly \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 Cache not working Slow performance Redis connection failed Check REDIS_HOST and REDIS_PORT \"Firefly III Configuration\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 Configuration Validation: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # Validate critical environment variables docker exec firefly-iii-application.application env | grep -E \"(APP_|DB_|REDIS_)\" | sort # Test Redis connection docker exec firefly-iii-application.application \\ php -r \" \\$redis = new Redis(); \\$redis->connect('firefly-iii-application.redis', 6379); echo \\$redis->ping() ? 'Redis OK' : 'Redis Failed'; \" # Test email configuration (development only) docker exec firefly-iii-application.application \\ php artisan tinker --execute = \"Mail::raw('Test', function(\\$m) { \\$m->to('test@example.com')->subject('Test'); });\" # Verify URL configuration curl -I http://localhost:8080/ | grep -i location","title":"Configuration Issues"},{"location":"ops/troubleshooting/startup/#startup-sequence-troubleshooting","text":"Normal Startup Sequence: 1. Database container starts and initializes 2. Redis container starts 3. Application container starts 4. Database migrations run 5. Cache warming occurs 6. Nginx starts and serves traffic Startup Timeline Issues: Step Timeout Failure Mode Debug Command Database ready 30s Connection refused docker logs firefly-iii-application.mariadb Redis ready 5s Connection refused docker logs firefly-iii-application.redis Migrations 60s SQL errors docker exec app php artisan migrate:status App startup 90s PHP errors docker logs firefly-iii-application.application Health check 60s HTTP 503 curl -v http://localhost:8080/health Startup Sequence Debug: 1 2 3 4 5 6 7 8 9 # Monitor startup sequence watch -n 2 'docker ps --format \"table {.Names}\\t{.Status}\\t{.Ports}\"' # Check dependency order docker compose config | grep -A 5 depends_on # Test service dependencies manually docker exec firefly-iii-application.application nc -zv firefly-iii-application.mariadb 3306 docker exec firefly-iii-application.application nc -zv firefly-iii-application.redis 6379","title":"Startup Sequence Troubleshooting"},{"location":"ops/troubleshooting/startup/#quick-recovery-scripts","text":"Full Stack Restart: 1 2 3 4 5 6 7 8 #!/bin/bash # full-restart.sh docker compose down docker compose pull docker compose up -d echo \"Waiting for services to be ready...\" timeout 300 bash -c 'until curl -f http://localhost:8080/health >/dev/null 2>&1; do sleep 5; done' echo \"Services ready!\" Database Reset (Development Only): 1 2 3 4 5 6 7 #!/bin/bash # reset-database.sh docker compose stop firefly-iii-application.application docker compose exec firefly-iii-application.mariadb \\ mysql -u root -p \" ${ DB_ROOT_PASSWORD } \" \\ -e \"DROP DATABASE application; CREATE DATABASE application CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\" docker compose start firefly-iii-application.application","title":"Quick Recovery Scripts"},{"location":"ops/troubleshooting/startup/#sources","text":"\"Firefly III Installation Guide\" \u2014 https://docs.firefly-iii.org/how-to/firefly-iii/installation/self-hosted/ \u2014 retrieved 2025-01-09 \"Docker Troubleshooting Guide\" \u2014 https://docs.docker.com/engine/reference/run/ \u2014 retrieved 2025-01-09","title":"Sources"}]}